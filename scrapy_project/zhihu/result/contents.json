[
{"title": "Python 这样 print 才够骚啊", "description": "小帅b来告诉你print的一些骚操作 那么接下来就是学习 python 的正确姿势 在 Python 中print 函数中的 end 默认是 \\n 也就是说你在打印每个语句的时候", "article": "我们在玩 Python 的时候\n常常会使用到 print 这个函数\n主要用它来打印一些输出\n这样我们可以更加方便的知道\n程序的运行情况\n我们常常这样操作\n不过不是很骚\n有时候我们想更加直观的看到我们程序的运行进度\n比如你爬取某个文件的时候想看看它的下载进度啥的\n这次\n小帅b来告诉你print的一些骚操作\n那么接下来就是\n学习 python 的正确姿势\n在 Python 中print 函数中的 end 默认是 \\n\n也就是说你在打印每个语句的时候\n最后都以换行结尾\n比如这样\n这样的打印结果是这样的\n但是我们要的是\n在一行中打印就行并且能够一直刷新\n那么我们可以把 end 给改了\n默认是换行我们改成空字符试试看\n结果是这样的\n虽然是一行不过它是整块一起出来的\n没有刷新我们可以加个强制刷新\n因为 flush 默认为 False只有所有内容都有了然后一次性都打印出来\n而使用 True 就可以做到每次打印都及时显示出来\n使用 sleep 来看看显示效果\n不过对于一些百分比显示这样操作就不好了\n比如我们要显示这样的进度百分比\n想必你也想到了结果是这个鸟样\n我们希望的是\n数字一直变换就行了对吧\n这时候我们可以使用\n\\r\n这个转义字符\n它可以做到每次都回到开头\n我们试试看吧\n这里我们加入 \\r 之后\n就可以达到我们预想的那样啦\n当然了如果觉得自己搞一个这样的有点麻烦\n也有很多库满足你的需求比如\ntqdm\n秀\n又比如\nprogressbar\n效果是这样的\n以上这两个都是我挺喜欢用的库\n好了本期就分享到这\n我们下次见\npeace\n扫一扫学习 Python 没烦恼\n你拉到这里来\n是要给我点“赞”吗？"},
{"title": "再见，Python！你好，Go语言", "description": "比起大家熟悉的 Python，Go 语言其实有很多优良特性，很多时候都可以代替 Python，他已经在很多任务中使用 Go 语言替代了 Python。那么 Go 语言到底有着什么样的独特魅力", "article": "各位亲爱的开发者们，为了给大家分享更多精彩的技术干货，给大家创造更加纯净的开发者交流环境，请移步至\ncsdn平台华为云专区\n哦，点击传送门关注：\nhttps://\nblog.csdn.net/devcloud\n【小宅按】Go 语言诞生于谷歌，由计算机领域的三位宗师级大牛 Rob Pike、Ken Thompson 和 Robert Griesemer 写成。由于出身名门，Go 在诞生之初就吸引了大批开发者的关注。诞生十年以来，已经涌出了很多基于 Go 的应用。就在不多久之前，知乎也舍弃了 Python，转 用Go 重构推荐系统 。\n谷歌前员工 Jake Wilson 认为，比起大家熟悉的 Python，Go 语言其实有很多优良特性，很多时候都可以代替 Python，他已经在很多任务中使用 Go 语言替代了 Python。那么 Go 语言到底有着什么样的独特魅力？它有哪些胜于 Python 的地方呢？让我们一起来了解一下吧！\n2019 年程序员最想学习的编程语言\n出身名门的 Go 语言\n对于一门只有十年历史的新语言，Go 的发展势头相当迅猛，容器界的扛把子 Docker 就是用 Go 写的，国内也有不少团队广泛使用 Go。近日，HackerRank 在社区发起了程序员技能调查，来自 100 多个国家、超过 70000 名开发者参与其中。调查结果显示，2019 年，程序员最想学习的编程语言 Top 3 分别是 Go、Kotlin 和 Python，其中 Go 以 37.2% 的比例排在首位。\n但 Go 要想撼动编程界的常青树 Java 二十多年的地位无疑难度颇大。据 HackerRank 数据显示，2018 年，Java 在开发者最受欢迎的编程语言排行榜中仍然排名第 2，Python 排名第 4，Go 排名第 13，距离第一名 JavaScript 还有不小的差距。\n但对本文作者 Jack Wilson 来说，Go 语言虽然“年纪尚小”，但已经拥有很多非常优秀的特性。\nGo 语言到底好在哪？\n在很多任务上，我已经用 Go 语言代替了 Python，举几个例子：\n处理储存在 S3 上的云端日志\n在 S3 上的 bucket 和 / 或 region 之间移动 TB 级别大小的文件\n匹配本地的数据库记录和 S3 上的文件，以保证文件处于同步状态\n这些任务大多是一次性的，所以使用脚本语言操作就会比较合适。这些任务需要快速地编程，而代码用过一次一般就舍弃了。一般来说，这种任务的需求都比较新颖、比较专，其代码很少需要复用。下面就来介绍一下，针对这种任务为什么可以用 Go 语言来替代 Python。\n拥有编译器很方便\n我经常在写 Python 时犯很低级的错误。我会给变量或函数命错名，或向它们传递错误的参数。这样的错误用调试工具可以找出一部分，但这种工具一般需要专门设置。我从来没很方便地配置过 pylint，而且我也不喜欢用那些很重的、配置起来更麻烦的 IDE。最惨的情况是，你可能会不小心打错变量名，而这种错误又不太容易发现。你的脚本可能会跑好几个小时才遇上这个错误，然后一切都崩溃了，你又得从头开始跑这个脚本。这种错误大部分都可以靠单元测试检出，但单元测试很少能覆盖 100% 的代码，而且我并不想浪费时间去给一个只用一次的脚本写单元测试。而带编译器的语言就可以解决以上所有问题。\n编译器可以检测出你犯的所有低级错误。\n出于这点原因，我在写长达几百行的代码时，更倾向于使用 Go 这类语言。\n开发速度\n然而，需要编译的语言的一个缺点是，一般你的开发速度会下降。这点在 C/C++ 和 Java 等语言上体现得尤其明显。而 Go 是一个非常简单的语言，我发现它的开发速度并没有被拖慢多少。不要误会，我的意思并不是说它比 Python 还快，而是想说，\n用 Go 语言没有比 Python 慢很多，一般达到使用 Python 开发速度的 85% 还是没问题的。\n相对于拥有编译器能避免的那些低级错误来说，我认为牺牲 15% 的开发速度还是很值的。\n更好的并行性\n你可能已经知道，\nGo 语言就是为并行而生的\n。在我的团队里经常会需要并行程序，因为我们要在 S3 上操作我们数据库中大量的数据。如果该任务是 IO 密集型的（实际上很多任务都是），我们就可以很容易地部署 Python 线程。但如果任务是 CPU 密集型的，用 Python 就比较不方便了，因为有全局解释器锁的存在。我非常享受在 Go 语言中简单代码不用修改就能直接多线程运行的爽快感。不知你在 Python 中有没有遇到过这种问题：直接复制粘贴的多线程代码却完全不工作。在 Go 语言中就不会有此问题。\n部署简单\n我比较喜欢把所有依赖放在单个二进制文件里。我经常在 EC2 服务器上运行自己的脚本，好让环境更加接近我们在 S3 上的服务器。如果用 Python 的话，我需要保证所有需要的包都在服务器上装好，而且我的同事不能在服务器上装任何可能产生冲突的包。虚拟环境可以解决大部分问题，但我还是觉得用 Go 语言更方便。我一般是在 Mac 和 Linux 上交叉编译我的代码，将其拷贝到远程服务器上，然后就可以任其运行了。我的代码所需要的所有依赖都在一个二进制文件里。\n风格一致\n一开始，Go 语言的格式化工具 gofmt 实在是让我抓狂，尤其是它在代码缩进时要求使用 tab 键而不是空格键。我觉得这简直是疯了。但是我用了一段时间后，就开始“真香”了。写代码时，我在格式上可以天马行空，格式化工具会帮我完成一切。我的所有代码风格都是一致的，即使我是在写不同的项目。这是因为\n格式化是标准 Go 工具的一个特性\n。但我如果想在 Python 中实现这一点，就要费些劲儿了。我需要正确地配置 pylint 工具，并要保证在每一个项目中都使用它。\n更便捷的工具\nGofmt 只是 Go 语言众多工具中的一个小例子。所有我喜欢用的编辑器——VSCode，vim 和 Sublime Text 中，都有 Go 语言相应的扩展，让我能够方便地享受到 Go 工具的优点。这样，我就能获得写 Java 时的那种智能体验，却不需要真正使用一个 IDE。我在用 Python 时从未获得过这种体验。\nGo 语言当然也有缺点\n我每次看到批评 Go 语言的文章时，里面讲的几乎都是 Go 语言对关键特性的缺失，比如泛型。我倒是认为没有泛型没什么影响——你会发现，使用map和切片（Slice）就能实现多得惊人的操作。但是我在使用 Go 语言的过程中遇到了很多其他问题。\n缺乏灵活性\n首先，\nGo 语言可能是我用过的语言里最“固执”的语言\n了。比如，它除了会强迫你使用 tab 而不是空格键缩进（假设你用了 gofmt 工具），会强迫你使用特定的文件组织结构，还会强迫你在 GOPATH 环境变量中编程，如此等等。这种语言有太多难以改变的特性了。\nGo 语言简单易学的原因之一恐怕就是你不能改变这些特性\n。如果你不愿意将所有首字母大写的变量名 export 一遍，那真是抱歉了。幸运的是，Go 的这些特性倒是没有触犯我的原则底线，但是如果有人认为里面的某些要求根本无法理喻，我也能够理解。相比之下 Python 就灵活多了。\n库支持有点差劲\n在这方面把 Go 语言和 Python 做比较有些不公平。Go 的出现比 Python 晚很多，但当我发现有些功能 Go 居然不支持的时候，还是觉得很困惑。我甚至发现 StackOverflow 上很多人 po 出了本应该作为内置功能的代码段，而且大家都需要该功能，纷纷将代码复制粘贴到自己的项目下。这类功能不应该嵌入到语言内部吗？说到这里，我想到了近几年的两个例子：\n给切片排序（幸运的是在 Go 1.8 版本中这点方便多了）\nMath.round 只支持整数，不能进行浮点数的取整（比如你想找一个最接近 0.5 的整数，Go 语言就无法完成）。甚至在 Go 1.10 版本之前，根本没有 math.round 函数\n当然，这些问题的原因有一部分是 Go 语言没有泛型，另一部分是因为 Go 的开发者们只给 Go 的标准库中添加最最必要的功能。\n这两点我都理解，但是在遇到很小的问题却需要自己写代码解决时还是感到烦恼。希望随着 Go 语言的发展，它的问题会变得越来越少。\nGo 和 Python 你更喜欢谁？欢迎留言交流！\n作者介绍：\nJake Wilson，现任 SketchUp web team 技术经理，研究范围包括 HTML5、WebGL、Google Closure、Typescript、Java Redis 后端开发等，从事软件开发、硬件、产品、创业和激励方面的工作。他曾就职于 \nhttp://\nBoxuno.com\n、\nhttp://\nMonolla.com\n、谷歌等公司。在谷歌，他曾参与 Goole+、chrome、Webmaster Tools 等项目。\n更多精彩内容，请滑至顶部点击右上角关注小宅哦~\n来源：\nAI前线\n   译者：李志  作者：Jack Wilson  \n原文链接"},
{"title": "用 python 写一个小游戏", "description": "今天玩点别的吧都说 Python 除了生孩子什么都能干 咱们今天就用 Python 写个小游戏贪吃蛇 想必大家都玩过这玩意 有没有想过你自己来实现一个这样的游戏呢", "article": "今天玩点别的吧都说 Python 除了生孩子什么都能干\n咱们今天就用 Python 写个小游戏\n贪吃蛇\n想必大家都玩过这玩意\n有没有想过你自己来实现一个这样的游戏呢\n那么接下来就是\n学习 python 的正确姿势\n想要用 Python 写一个小游戏就不得不知道 pygame 这个库了\n这个库是在 sdl 之上构建的\n可以使用到很多 GUI、渲染画布等\n废话不多说\n我们开始\n首先我们得有个窗口通过 pygame 的初始化就可以使用它提供给我们的工具了\n既然有东西可用了来设置一下游戏名称吧\n想了想就叫做《帅气的python》\n恩，很符合小帅b的气质\n通过 set_model 方法可以设置窗口的大小\n比如：\n那么这时候得到的窗口就是这样\n把这张图点开，居然发现了一张帅脸\n窗口有了\n咱们把蛇搞上去\n背景我们就默认黑色吧所以蛇的颜色应该是白色\n这样才显得比较凸突出\n通过 pygame 的 rect 方法\n可以在画布上画矩形\n那么一开始我们的蛇应该是处于中间的\n蛇的长度就给 4 个格子吧\n这里我们一个格子的宽高设置为 10\n现在应该是这个样子\n蛇有了\n就差食物了\n一样的道理\n现在就成这样了\n还整的有模有样的\n不过这食物吧是\n随机\n的才对\n而且我们刚写的代码有点糙捣腾捣腾\n这里把食物的位置随机了一下这样每次一运行就会随机显示了\n好了\n现在蛇也有了食物也有了\n接下来就让蛇的身体扭！起！来！\n需要监听一下\n方向键的事件\n通过 pygame 的这个方法\npygame.event.get()\n可以监听事件\n比如监听关闭\n又比如这样来监听我们的方向键\n运行起来\n只要你按了方向键\n就会被监听到\n接着定义一个蛇头的位置\n蛇头居中指引方向\n每次触发一个方向键就让蛇头的位置发生相应的变化然后更新蛇身的位置\n所谓更新蛇身位置\n主要将是将列表中的元素更新一下\n添加蛇头的位置pop掉蛇尾的位置\n每次更新\n需要渲染一下画布\n运行一下就是这样的\n看\n我把它扭起来了\n哎我这该死的手速差点暴露了什么\n刚刚的代码是不是很多重复抽成一个方法吧\n蛇也有了也会扭了\n食物也有了\n接下来就让它去吃啊怎么吃呢\n吃一堑长一智\n判断下呗只要头碰到了食物就算吃到了给蛇的身体加一格\n这里只要发现头的位置\n和食物的位置相同就说明吃到了\n此时列表的数据就不 pop 了并且食物的位置重新随机生成\n那么现在每次重新渲染的时候食物的位置就是随机的了\n运行起来\nnice\n就是要这样\n不过现在这条蛇好像有外挂似得\n撞到南墙都不死的\n撞到自己也不死的\n闹呢？你以为你充钱了么？\n怎么判断撞到自己了呢其实就是把列表的数据拿出来比对\n第一个元素是蛇头拿它跟其它元素比对\n相同就代表撞到了\n如何判断撞到了墙了呢\n通过蛇头的位置只要不超过 [500, 500] 就没事吧\n也就是说\n只要蛇头都在画布之内就行\n这里就直接退出了\n效果就是这样撞到就直接拜拜\n当然\n画布一直频繁的更新所以可以使用 pygame 的 clock\n这样子每秒不会超过 10 帧这样就不会那么浪费资源了\nok今天就分享到这里代码不难如果需要的话就在后台发送“帅蛇”获取吧\n当然更多是提供下思路你还可以进一步优化下代码\n也可以添加一些功能\n比如添加背景音乐\n添加分数统计\n把食物换成cxk...\n自己发挥吧\n那么我们下回见\npeace\n扫一扫\n学习 Python 没烦恼"},
{"title": "哪些 Python 库让你相见恨晚？", "description": "我希望能在这里持续更新我喜欢的第三方库，力求详实丰富。 专栏里收集了github上更多有趣的python项目，喜欢就关注下哦！Python大数据分析 介绍的大体流程是：库名、类型、github star、功能、使用方法、案例、学习资料", "article": "最近程沉迷于github，无法自拔，看到各种各样新奇又实用的第三方库。网络上有很多python库的排名、汇总，但总觉得不够具体生动。\n我希望能在这里\n持续更新\n我喜欢的第三方库，力求详实丰富。\n专栏里收集了github上更多有趣的python项目，喜欢就关注下哦！\nPython大数据分析\n介绍的大体流程是：\n库名、类型、github star、功能、使用方法、案例、学习资料。\n第一部分：数据可视化\npyecharts \n类型：\n可视化图表设计\n GitHub Star ：\n5985\n功能：\n简洁的 API 设计，使用如丝滑般流畅，支持链式调用\n囊括了 30+ 种常见图表，应有尽有\n支持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab\n可轻松集成至 Flask，Django 等主流 Web 框架\n高度灵活的配置项，可轻松搭配出精美的图表\n详细的文档和示例，帮助开发者更快的上手项目\n多达 400+ 地图文件以及原生的百度地图，为地理数据可视化提供强有力的支持\n使用方法：\nfrom\n \npyecharts.charts\n \nimport\n \nBar\n\n\n\nbar\n \n=\n \nBar\n()\n\n\nbar\n.\nadd_xaxis\n([\n\"衬衫\"\n,\n \n\"羊毛衫\"\n,\n \n\"雪纺衫\"\n,\n \n\"裤子\"\n,\n \n\"高跟鞋\"\n,\n \n\"袜子\"\n])\n\n\nbar\n.\nadd_yaxis\n(\n\"商家A\"\n,\n \n[\n5\n,\n \n20\n,\n \n36\n,\n \n10\n,\n \n75\n,\n \n90\n])\n\n\n# render 会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件\n\n\n# 也可以传入路径参数，如 bar.render(\"mycharts.html\")\n\n\nbar\n.\nrender\n()\n案例：\n学习资料：\nA Python Echarts Plotting Library\n \nSuperset \n类型：\n开源的 企业级 轻量BI工具 \n GitHub star ：\n24937\n功能：\n创建和分享可视化面板\n有丰富的可视化方法来分析数据，且具有灵活的扩展能力\n具有可扩展的、高粒度的安全模型，可以用复杂规则来控制访问权限。目前支持主要的认证提供商：DB、OpenID、LDAP、OAuth、和Flask AppBuiler的REMOTE_USER\n使用简单的语法，就可以控制数据在UI中的展现方式\n与Druid深度结合，可快速的分析大数据\n配置缓存来快速加载仪表盘\nSuperset最初是在\nhttp://\nDruid.io\n的基础上设计的，但是通过使用SQLAlchemy（一种与大多数常见数据库兼容的Python ORM），迅速扩展了范围以支持其他数据库。\n使用方法：\n安装好后，启动浏览器端，添加数据源，搭建可视化面板，分享，导出\n1、安装：\n教程1\n、\n教程2\n \n2、使用：\n官方教程\n、\ngithub\n、\n简单使用教程\n案例：\n查看仪表板\n数据切片和切块\n使用SQL Lab查询和可视化数据\n可视化地理空间数据\n从各种可视化中进行选择\n学习资源：\n官方文档\n \nplotly\n类型：\n非常著名且强大的交互式开源数据可视化框架\nGitHub star ：\n5235\n功能：\n交互式开源可视化框架，支持超过40种独特图表类型，涵盖统计、财务、地理、学术、三维等。\n建立在Javascript plotly库基础上，能使python用户创建基于web的可交互的可视化作品，其能在jupyter notebook上展示，而且可以导出为HTML。\nplotly还可以在非web编辑器上（如pycharm、spyder）绘制图表\n能导出出版级别的图片\n使用方法：\nimport plotly.express as px\niris = px.data.iris()\nfig = px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\")\nfig.show()\n案例：\n学习资源：\n官方文档\n \nBokeh\n类型：服务于浏览器的炫酷的交互式可视化库\nGitHub star ：\n11061\n功能：\n专门针对Web浏览器的交互式、可视化Python绘图库\n提供优雅简洁的多功能可视化展示，能快速创建图表、仪表板和可视化应用\n可以做出像D3.js简洁漂亮的交互可视化效果，但是使用难度低于D3.js。\n独立的HTML文档或服务端程序\n可以处理大量、动态或数据流\n支持Python (或Scala, R, Julia…)\n不需要使用Javascript\n使用方法：\nfrom bokeh.plotting import figure, output_file, show\n# 创建图表\np = figure(plot_width=300, plot_height=300, tools=\"pan,reset,save\")\n# 图表中添加圆\np.circle([1, 2.5, 3, 2], [2, 3, 1, 1.5], radius=0.3, alpha=0.5)\n# 定义输出形式\noutput_file(\"foo.html\")\n# 展示图表\nshow(p)\n案例：\n学习资源：\n官方文档\n未完待续！欢迎点赞收藏转发，谢谢"},
{"title": "Python 与 Excel 不得不说的事", "description": "//github.com/python-excelhttps://github.com/python-excel/tutorial/raw/master/python-excel", "article": "数据处理是 Python 的一大应用场景，而 Excel 则是最流行的数据处理软件。因此用 Python 进行数据相关的工作时，难免要和 Excel 打交道。\n如果仅仅是要以表单形式保存数据，可以借助 CSV 格式（一种以逗号分隔的表格数据格式）进行处理，Excel 也支持此格式。但标准的 Excel 文件（xls/xlsx）具有较复杂的格式，并不方便像普通文本文件一样直接进行读写，需要借助第三方库来实现。\n常用的库是 python-excel 系列：\nxlrd、xlwt、xlutils\nxlrd － 读取 Excel 文件\nxlwt － 写入 Excel 文件\nxlutils － 操作 Excel 文件的实用工具，如复制、分割、筛选等\n尽管这是目前被用得最多的 Excel 库，我还是很想吐槽为什么这三个包不能放在一个模块里……另外它们有个缺陷，就是只能处理 xls 文件。如果你想用新版本的 xlsx，可以考虑 openpyxl 和 xlsxwriter。\n不过今天只说说这三个。\n（更新：有人提到另外几个 Python 处理 Excel 的库，有些的确会比 python-excel 系列好用。之后会再做一篇对比，敬请期待。\n另外，关于为什么不用 VBA、Java、C#……处理 Excel。其实本文的出发点是对于 Python 使用者来说，操作 Excel 的一种基本方式，并非否定其他语言和方法。）\n安装\n安装的方法没啥特别的，只是得装三遍。可以下载安装包、下载代码压缩包、或者通过 pip 等。可参考 \n如何安装 Python 的第三方模块 - Crossin的编程教室 - 知乎专栏\n如果安装过之前推荐的 anaconda，那么就已经有了 xlrd 和 xlwt，但 xlutils 没有附带在安装包中，使用时仍需另行安装。\n读取\n结合一段简单的代码来看：\nimport\n \nxlrd\n\n\n# 打开 xls 文件\n\n\nbook\n \n=\n \nxlrd\n.\nopen_workbook\n(\n\"test.xls\"\n)\n\n\nprint\n \n\"表单数量:\"\n,\n \nbook\n.\nnsheets\n\n\nprint\n \n\"表单名称:\"\n,\n \nbook\n.\nsheet_names\n()\n\n\n# 获取第1个表单\n\n\nsh\n \n=\n \nbook\n.\nsheet_by_index\n(\n0\n)\n\n\nprint\n \nu\n\"表单 \n%s\n 共 \n%d\n 行 \n%d\n 列\"\n \n%\n \n(\nsh\n.\nname\n,\n \nsh\n.\nnrows\n,\n \nsh\n.\nncols\n)\n\n\nprint\n \n\"第二行第三列:\"\n,\n \nsh\n.\ncell_value\n(\n1\n,\n \n2\n)\n\n\n# 遍历所有表单\n\n\nfor\n \ns\n \nin\n \nbook\n.\nsheets\n():\n\n    \nfor\n \nr\n \nin\n \nrange\n(\ns\n.\nnrows\n):\n\n        \n# 输出指定行\n\n        \nprint\n \ns\n.\nrow\n(\nr\n)\n测试文件：\n输出结果：\n表单数量: 2\n表单名称: [u'Group.A', u'Group.B']\n表单 Group.A 共 7 行 3 列\n第二行第三列: 15.0\n[text:u'Rank', text:u'Team', text:u'Points']\n[number:1.0, text:u'Brazil', number:15.0]\n[number:2.0, text:u'Russia', number:12.0]\n...\n常用的方法：\nopen_workbook 打开文件\nsheet_by_index 获取某一个表单\nsheets 获取所有表单\ncell_value 获取指定单元格的数据\n写入\n还是看代码：\nimport\n \nxlwt\n\n\n# 创建 xls 文件对象\n\n\nwb\n \n=\n \nxlwt\n.\nWorkbook\n()\n\n\n# 新增一个表单\n\n\nsh\n \n=\n \nwb\n.\nadd_sheet\n(\n'A Test Sheet'\n)\n\n\n# 按位置添加数据\n\n\nsh\n.\nwrite\n(\n0\n,\n \n0\n,\n \n1234.56\n)\n\n\nsh\n.\nwrite\n(\n1\n,\n \n0\n,\n \n8888\n)\n\n\nsh\n.\nwrite\n(\n2\n,\n \n0\n,\n \n'hello'\n)\n\n\nsh\n.\nwrite\n(\n2\n,\n \n1\n,\n \n'world'\n)\n\n\n# 保存文件\n\n\nwb\n.\nsave\n(\n'example.xls'\n)\n生成文件：\n常用的方法：\nWorkbook 创建文件对象\nadd_sheet 新增一个表单\nwrite 在指定单元格写入数据\n修改\n很遗憾，并没有直接修改 xls 文件的方法。通常的做法是，读取出文件，复制一份数据，对其进行修改，再保存。\n在复制时，需要用到 xlutils 中的方法。\nfrom\n \nxlrd\n \nimport\n \nopen_workbook\n\n\nfrom\n \nxlutils.copy\n \nimport\n \ncopy\n\n\n# 打开文件\n\n\nrb\n \n=\n \nopen_workbook\n(\n\"example.xls\"\n)\n\n\n# 复制\n\n\nwb\n \n=\n \ncopy\n(\nrb\n)\n\n\n# 选取表单\n\n\ns\n \n=\n \nwb\n.\nget_sheet\n(\n0\n)\n\n\n# 写入数据\n\n\ns\n.\nwrite\n(\n0\n,\n \n1\n,\n \n'new data'\n)\n\n\n# 保存\n\n\nwb\n.\nsave\n(\n'example.xls'\n)\n修改后文件：\n特别要注意的是，选取读取表单时，要使用 sheet_by_index，而在选取写入表单时，则要用 get_sheet。不要问我为什么，我也很想知道这么设定的用意何在……\n时间转换\n如果表单中有时间格式的数据，通过处理之后，你会发现时间数据出了差错。\n输出单元格内容：\n[number:8888.0, xldate:42613.0]\n因为这里 xldate 有自己的格式定义。如果要使用正确的格式，必须转换：\nnew_date\n \n=\n \nxlrd\n.\nxldate\n.\nxldate_as_datetime\n(\ndate\n,\n \nbook\n.\ndatemode\n)\n\n\ndate 是对应单元格的数据，book 是打开的文件对象。\n另外，在打开文件时，加上参数 formatting_info=True，可以保证在时间数据在 copy 时保持原样。\n写入时间数据，则可通过此方法创建 excel 的时间对象：\nxlrd\n.\nxldate\n.\nxldate_from_datetime_tuple\n\n\n或者通过 xlwt.easyxf 指定时间格式：\nstyle\n \n=\n \nxlwt\n.\neasyxf\n(\nnum_format_str\n=\n'D-MMM-YY'\n)\n\n\nws\n.\nwrite\n(\n1\n,\n \n0\n,\n \ndatetime\n.\nnow\n(),\n \nstyle\n)\n\n\n具体细节及更多功能这里不展开说明。\n以上便是 Python 操作 Excel 文件的一些基本方法。实际使用过程中遇到问题或者需要了解更多功能，永远记住两个词：\nRTFM\n、\nSTFW\n：）\n参考资料：\nhttp://www.\npython-excel.org/\nhttps://\ngithub.com/python-excel\nhttps://\ngithub.com/python-excel\n/tutorial/raw/master/python-excel.pdf\n其他文章及回答：\n想用 Python 做数据分析？先玩玩这个再说 - Crossin的文章 - 知乎专栏\n用 Python 实现你的量化交易策略 - Crossin的文章 - 知乎专栏\n学习编程的过程中可能会走哪些弯路，有哪些经验可以参考？ - Crossin 的回答\n你是如何自学 Python 的？ - Crossin 的回答\n编程初学者如何使用搜索引擎 - Crossin的文章 - 知乎专栏\n如何直观地理解程序的运行过程？- Crossin的文章 - 知乎专栏\n如何在 Python 中使用断点调试 - Crossin的文章 - 知乎专栏\nPython 抓取网页乱码原因分析 - Crossin的编程教室 - 知乎专栏\n极简 Github 上手教程 - Crossin的编程教室 - 知乎专栏\nCrossin的编程教室\n \n微信ID：crossincode\n论坛：\nCrossin的编程教室"},
{"title": "C#、C++、Java、Python 选择哪个好？", "description": "学习的精力旺盛，然后觉得C#和Java似乎差的不是太多。 PHP看过，没用过。Python看过，没用过。还有Ruby，看过，没用过。我说看过的意思大概就是写过Hello", "article": "第一次正儿八经在知乎回答，居然这么多赞，看来知乎上IT男很多啊。谢谢大家！不知道能不能破千，要是破千的话，可以考虑写点技术的干货。\n——————————————以下是原答。\n作为一个20年的老程序员来回答一下。\n1998毕业，现在自己做一家IT公司，依然喜欢写代码。\n工作这么多年，正式项目用过的语言有： Pascal/Delphi,dBase/FoxBase,FoxPro,VB,VBScript,JavaScript,COBOL,C/C++,Lua,Java,C#,各种数据库的SQL。\n最早学的是Pascal，大学里面学数据结构用的，毕业以后用delphi写了一个小项目，然后再也没有用过。\ndBase/FoxBase也是学校里面学数据库的时候教的，然后毕业以后用的是FoxPro，也是做了一个小项目，后面基本就没用了。\nVB/VBScript作为主力语言，从1998年用到2002年，对，那时候做ASP。也用VB写过还算有规模的EXE的项目。至今书橱里面那本《VB5金典》依然保佑一席之地。VB做快速开发真的很好用。然而\nhttp://\nVB.Net\n就压根没看过。那已经不是VB了。\n因为Web开发基本上没有断过，JavaScript一直陪我到现在。\nCOBOL是原来在对日外包公司工作的时候，接了日本一个野村证券的项目，居然是COBOL，然后，作为新技术研发部的负责人，当仁不让上了。边学边做项目，做完就扔了。\nC是从开始编程就学的，断断续续用一点点，2003年做银行项目的时候，用IBM小型机，Tuxedo中间件，然后只能用C/C++语言编程（那个时候银行还不怎么接受Java）。然后自己开始创业，做游戏，用OpenGL做了一个游戏引擎，跨平台的那种，一次编写，Windows、Android、iOS都能跑。C++写的。中间尝试了一下Lua，写了两个小游戏，觉得对程序的掌控能力还是比C差远了，就放弃了。\n最后就是Java和C#这对双子星，是用的时间最长，做过项目最多的。C#是从2001年开始，beta版本开始学的。记得第一个项目是2002年6、7月的样子吧，那时候公司接了一个比较大的Web项目，本来是准备用ASP做的，结果那时候我正好在学C#，然后看了一下说是10月份会发布正式版（时间大概是那样吧，年数长了，记忆有点模糊），然后仗着自己是项目负责人，外加老板不懂技术，就擅自决定用C#/\nhttp://\nASP.Net\n来做。项目做完大概是10月份，在项目上线的前几天，微软发了正式版ASP.Net1.0，项目有惊无险的上线了。现在想想有点作死的感觉。如果微软把.Net正式版的发布时间往后推一个月，很难想象老板会拿我怎么样。\nJava差不多跟C#同时学的，然后一直做啊做，从EJB做到SSH，再到Android。那时候年轻，学习的精力旺盛，然后觉得C#和Java似乎差的不是太多。\nPHP看过，没用过。Python看过，没用过。还有Ruby，看过，没用过。我说看过的意思大概就是写过Hello World，但是没有拿来做过项目。\n我是真的喜欢写程序，所以有什么新奇的东西，都喜欢拿来跑一跑。\n然后说说对编程的看法。\n首先，我认为，语言没有高下之分，只有应用场景之分。作为一个技术决策者，拿到任何一个项目，首先第一个考虑的，不是怎么做，而是用什么做。如果你拿到的是一个Web项目，我认为，在很多情况下，JSP、PHP、\nhttp://\nASP.Net\n甚至Node.js基本上都是等价的，应该都能够很好的完成项目的开发，选择什么技术开发，看自己所拥有的资源禀赋和具体情况。如果手下一帮弟兄都是搞Java的，当然JSP啊，如果手下小弟都是做C#，当然\nhttp://\nASP.Net\n啊。当然，项目有特殊要求的除外，比如，如果甲方是银行，那估计就没法用\nhttp://\nASP.Net\n了，如果是有客户端的项目，当然C#+WinForm啊，如果是做安卓，当然Java啊。\n其次，作为一个好的程序员，应该至少会三种以上语言，这样你能够充分接受不同语言的风格，更关键的是你会去关注不同技术社区的讨论，开阔眼界，对编程的本质会有更深刻的体会，然后你会觉得，看任何语言都是差不多的。我经常对公司的技术人员讲，要用Java的编程思想来写C#的代码。这是不同技术社区的风格体现出来的。在Java的社区，你能看到更多的对模式、框架的讨论，而微软虽然自己做的东西很讲究模式和框架，但似乎更喜欢做好一堆全家桶给你，让你去做快速开发。\n第三，对各种语言的感受，写起来最爽最有成就感的当然是C，那种一切尽在掌握的感觉是很奇妙的。不过我现在公司没有C/C++程序员了，因为公司不做游戏了，我也有起码5年没碰C了。我最喜欢的还是C#，我很崇拜安德鲁，C#的语法和机制真的设计的很精妙：泛型、delegate/event、Attribute、Lamda表达式、函数式编程，总觉得这个语言的设计给人一种特别的精致美感，能满足我对一门好的语言的所有的想象。自从.Net Core以后，跨平台也不是问题了。相对Java来说，我更喜欢C#。当然，我是不会排斥Java的，只要做Java能赚钱。\n第四，我觉得数据结构真的非常重要，如果你想成为高手的话。在学校里面，一定要把这门课反反复复的学习。当然，如果你只想做做Web开发，写写网页的话，当我没说。\n最后，对计算机专业的学生来说，我认为，在大学就是要打好基础。语言的东西真的不难，所有语言的编程思想都是想通的，语法其实也都大同小异，无外乎顺序结构、循环结构、分支结构。不用太焦虑应用型的开发，这些东西其实学起来是很快的。重要的是基础。C语言是必学的，学好C，让你对计算机的原理（数据结构、寄存器、内存、硬盘读写等等）有更深刻的认识。然后，为了工作，学学Java，学学C#。数据结构、编译原理这样的课程，当你工作年限变长，开始写架构、开始做性能优化的时候，你会觉得特别有用。当然，最开始的简单开发任务基本上用不着。不过，不想做高手的程序员，当然不是好程序员，是吧？\n还有，其实我是非常建议，作为程序员，C#是必学的，不是因为我个人喜欢C#，是因为，实际上，按照我的习惯，在做项目的过程中，我经常会写一些小工具，而这些小工具，很多时候当然都是写成exe啦，所以，一般我都会选择用C#来写。\n——————————————————\n补充一点，我认为好的程序员不能把自己绑定在一种语言上，不能把自己就定义为JAVA程序员，C#程序员，等等。还是那句话，语言没有高下之分，只有适用的场景。好的程序员，应该有很快学会一种新的语言，并解决实际问题的能力。在我二十年的程序生涯中，有过不止一次，因为项目，一两天学一种语言的基本语法，然后边Google函数和库用法，边完成项目，然后项目完成后就扔一边的经历。\n写程序，关键的是解决问题的思路，而不是语言本身。对语言来说，无外乎语法，函数，类库，现成的框架这些东西，这些都是“术”，而你对数据结构，设计模式，系统架构，计算机原理这些东西的理解，才是“道”。补充一点，对SSH这种现成框架的使用，并不能称为架构设计。\n再举个例子，比如你要做网络编程，那么你对TCP/IP的理解，socket是怎么回事，怎么握手，怎么发送数据之类的理解是最基础的，是所有语言都通用的，至于最后你用JAVA来写，还是用C#来写，有多大区别？其实都是大同小异。\n最后，要成为高手，学好英语，学会翻墙，一定要用Google。记住一点，凡是能百度到中文资料的内容，都已经不是“高级”的内容了。"},
{"title": "当Python遇上微信，可以这么玩", "description": "有兴趣的朋友可以加上可视化的展示，我这里用基于python的Echarts（有机会再细讲） 先安装了pip install echarts-python 展示比例一般使用百分比圆饼表吧", "article": "代码放在这里：\nwzyonggege/python-wechat-itchat\n词云那里可以换成小黄人图片\n---------------------------------------------------------------------------------------------------\n0. itchat\n最近研究了一些微信的玩法，我们可以通过网页版的微信\n微信网页版\n，扫码登录后去抓包爬取信息，还可以post去发送信息。\n然后发现了\nitchat\n这个开源项目，\n作者是\n@LittleCoder\n，已经把微信的接口完成了，大大的方便了我们对微信的挖掘，以下的功能也通过itchat来实现。\n安装itchat这个库\npip install itchat\n\n先来段简单的试用，实现微信的登录，运行下面代码会生成一个二维码，扫码之后手机端确认登录，就会发送一条信息给‘filehelper’，这个\nfilehelper\n就是微信上的文件传输助手。\nimport\n \nitchat\n\n\n\n# 登录\n\n\nitchat\n.\nlogin\n()\n\n\n# 发送消息\n\n\nitchat\n.\nsend\n(\nu\n'你好'\n,\n \n'filehelper'\n)\n\n\n除了登录和发送消息我们还可以这么来玩，往下走～\n1. 微信好友男女比例\n想统计下自己微信里好友的性别比例，当然也是很简单，先获取好友列表，统计列表里性别计数\nimport\n \nitchat\n\n\n\n# 先登录\n\n\nitchat\n.\nlogin\n()\n\n\n\n# 获取好友列表\n\n\nfriends\n \n=\n \nitchat\n.\nget_friends\n(\nupdate\n=\nTrue\n)[\n0\n:]\n\n\n\n# 初始化计数器，有男有女，当然，有些人是不填的\n\n\nmale\n \n=\n \nfemale\n \n=\n \nother\n \n=\n \n0\n\n\n\n# 遍历这个列表，列表里第一位是自己，所以从\"自己\"之后开始计算\n\n\n# 1表示男性，2女性\n\n\nfor\n \ni\n \nin\n \nfriends\n[\n1\n:]:\n\n    \nsex\n \n=\n \ni\n[\n\"Sex\"\n]\n\n    \nif\n \nsex\n \n==\n \n1\n:\n\n        \nmale\n \n+=\n \n1\n\n    \nelif\n \nsex\n \n==\n \n2\n:\n\n        \nfemale\n \n+=\n \n1\n\n    \nelse\n:\n\n        \nother\n \n+=\n \n1\n\n\n\n# 总数算上，好计算比例啊～\n\n\ntotal\n \n=\n \nlen\n(\nfriends\n[\n1\n:])\n\n\n\n# 好了，打印结果\n\n\nprint\n \nu\n\"男性好友：\n%.2f%%\n\"\n \n%\n \n(\nfloat\n(\nmale\n)\n \n/\n \ntotal\n \n*\n \n100\n)\n\n\nprint\n \nu\n\"女性好友：\n%.2f%%\n\"\n \n%\n \n(\nfloat\n(\nfemale\n)\n \n/\n \ntotal\n \n*\n \n100\n)\n\n\nprint\n \nu\n\"其他：\n%.2f%%\n\"\n \n%\n \n(\nfloat\n(\nother\n)\n \n/\n \ntotal\n \n*\n \n100\n)\n\n\n好看看结果：\n（好吧，暴露了我男性友人较多的真相～～）\n好像不够直观，有兴趣的朋友可以加上可视化的展示，我这里用基于python的\nEcharts\n（有机会再细讲） \n先安装了\npip install echarts-python\n\n展示比例一般使用百分比圆饼表吧\n# 使用echarts，加上这段\n\n\nfrom\n \necharts\n \nimport\n \nEchart\n,\n \nLegend\n,\n \nPie\n\n\n\nchart\n \n=\n \nEchart\n(\nu\n'\n%s\n的微信好友性别比例'\n \n%\n \n(\nfriends\n[\n0\n][\n'NickName'\n]),\n \n'from WeChat'\n)\n\n\nchart\n.\nuse\n(\nPie\n(\n'WeChat'\n,\n\n              \n[{\n'value'\n:\n \nmale\n,\n \n'name'\n:\n \nu\n'男性 \n%.2f%%\n'\n \n%\n \n(\nfloat\n(\nmale\n)\n \n/\n \ntotal\n \n*\n \n100\n)},\n\n               \n{\n'value'\n:\n \nfemale\n,\n \n'name'\n:\n \nu\n'女性 \n%.2f%%\n'\n \n%\n \n(\nfloat\n(\nfemale\n)\n \n/\n \ntotal\n \n*\n \n100\n)},\n\n               \n{\n'value'\n:\n \nother\n,\n \n'name'\n:\n \nu\n'其他 \n%.2f%%\n'\n \n%\n \n(\nfloat\n(\nother\n)\n \n/\n \ntotal\n \n*\n \n100\n)}],\n\n              \nradius\n=\n[\n\"50%\"\n,\n \n\"70%\"\n]))\n\n\nchart\n.\nuse\n(\nLegend\n([\n\"male\"\n,\n \n\"female\"\n,\n \n\"other\"\n]))\n\n\ndel\n \nchart\n.\njson\n[\n\"xAxis\"\n]\n\n\ndel\n \nchart\n.\njson\n[\n\"yAxis\"\n]\n\n\nchart\n.\nplot\n()\n\n\n登登登登～\n2. 好友个性签名词云\n获取好友列表的时候，返回的json信息中还看到了有个性签名的信息，脑洞一开，把大家的个性签名都抓下来，看看高频词语，还做了个词云。\n# coding:utf-8\n\n\nimport\n \nitchat\n\n\n\n# 先登录\n\n\nitchat\n.\nlogin\n()\n\n\n\n# 获取好友列表\n\n\nfriends\n \n=\n \nitchat\n.\nget_friends\n(\nupdate\n=\nTrue\n)[\n0\n:]\n\n\nfor\n \ni\n \nin\n \nfriends\n:\n\n    \n# 获取个性签名\n\n    \nsignature\n \n=\n \ni\n[\n\"Signature\"\n]\n\n\nprint\n \nsignature\n\n\n先全部抓取下来 \n打印之后你会发现，有大量的span，class，emoji，emoji1f3c3等的字段，因为个性签名中使用了表情符号，这些字段都是要过滤掉的，写个正则和replace方法过滤掉\nfor\n \ni\n \nin\n \nfriends\n:\n\n\n# 获取个性签名\n\n    \nsignature\n \n=\n \ni\n[\n\"Signature\"\n]\n.\nstrip\n()\n.\nreplace\n(\n\"span\"\n,\n \n\"\"\n)\n.\nreplace\n(\n\"class\"\n,\n \n\"\"\n)\n.\nreplace\n(\n\"emoji\"\n,\n \n\"\"\n)\n\n\n# 正则匹配过滤掉emoji表情，例如emoji1f3c3等\n\n    \nrep\n \n=\n \nre\n.\ncompile\n(\n\"1f\\d.+\"\n)\n\n    \nsignature\n \n=\n \nrep\n.\nsub\n(\n\"\"\n,\n \nsignature\n)\n\n    \nprint\n \nsignature\n\n\n接来下用jieba分词，然后制作成词云，首先要安装jieba和wordcloud库\npip install jieba\npip install wordcloud\n\n代码\n# coding:utf-8\n\n\nimport\n \nitchat\n\n\nimport\n \nre\n\n\n\nitchat\n.\nlogin\n()\n\n\nfriends\n \n=\n \nitchat\n.\nget_friends\n(\nupdate\n=\nTrue\n)[\n0\n:]\n\n\ntList\n \n=\n \n[]\n\n\nfor\n \ni\n \nin\n \nfriends\n:\n\n    \nsignature\n \n=\n \ni\n[\n\"Signature\"\n]\n.\nreplace\n(\n\" \"\n,\n \n\"\"\n)\n.\nreplace\n(\n\"span\"\n,\n \n\"\"\n)\n.\nreplace\n(\n\"class\"\n,\n \n\"\"\n)\n.\nreplace\n(\n\"emoji\"\n,\n \n\"\"\n)\n\n    \nrep\n \n=\n \nre\n.\ncompile\n(\n\"1f\\d.+\"\n)\n\n    \nsignature\n \n=\n \nrep\n.\nsub\n(\n\"\"\n,\n \nsignature\n)\n\n    \ntList\n.\nappend\n(\nsignature\n)\n\n\n\n# 拼接字符串\n\n\ntext\n \n=\n \n\"\"\n.\njoin\n(\ntList\n)\n\n\n\n# jieba分词\n\n\nimport\n \njieba\n\n\nwordlist_jieba\n \n=\n \njieba\n.\ncut\n(\ntext\n,\n \ncut_all\n=\nTrue\n)\n\n\nwl_space_split\n \n=\n \n\" \"\n.\njoin\n(\nwordlist_jieba\n)\n\n\n\n# wordcloud词云\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nwordcloud\n \nimport\n \nWordCloud\n\n\nimport\n \nPIL.Image\n \nas\n \nImage\n\n\n\n# 这里要选择字体存放路径，这里是Mac的，win的字体在windows／Fonts中\n\n\nmy_wordcloud\n \n=\n \nWordCloud\n(\nbackground_color\n=\n\"white\"\n,\n \nmax_words\n=\n2000\n,\n \n                         \nmax_font_size\n=\n40\n,\n \nrandom_state\n=\n42\n,\n\n                         \nfont_path\n=\n'/Users/sebastian/Library/Fonts/Arial Unicode.ttf'\n)\n.\ngenerate\n(\nwl_space_split\n)\n\n\n\nplt\n.\nimshow\n(\nmy_wordcloud\n)\n\n\nplt\n.\naxis\n(\n\"off\"\n)\n\n\nplt\n.\nshow\n()\n\n\n运行代码\n这。。好像有点丑，根据wordcloud用法，我可以找一张图来生成配色方案，我这里找了一张微信的logo\n修改一下代码\n# wordcloud词云\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nwordcloud\n \nimport\n \nWordCloud\n,\n \nImageColorGenerator\n\n\nimport\n \nos\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nPIL.Image\n \nas\n \nImage\n\n\n\n\nd\n \n=\n \nos\n.\npath\n.\ndirname\n(\n__file__\n)\n\n\nalice_coloring\n \n=\n \nnp\n.\narray\n(\nImage\n.\nopen\n(\nos\n.\npath\n.\njoin\n(\nd\n,\n \n\"wechat.jpg\"\n)))\n\n\nmy_wordcloud\n \n=\n \nWordCloud\n(\nbackground_color\n=\n\"white\"\n,\n \nmax_words\n=\n2000\n,\n \nmask\n=\nalice_coloring\n,\n\n                         \nmax_font_size\n=\n40\n,\n \nrandom_state\n=\n42\n,\n\n                         \nfont_path\n=\n'/Users/sebastian/Library/Fonts/Arial Unicode.ttf'\n)\n\\\n    \n.\ngenerate\n(\nwl_space_split\n)\n\n\n\nimage_colors\n \n=\n \nImageColorGenerator\n(\nalice_coloring\n)\n\n\nplt\n.\nimshow\n(\nmy_wordcloud\n.\nrecolor\n(\ncolor_func\n=\nimage_colors\n))\n\n\nplt\n.\nimshow\n(\nmy_wordcloud\n)\n\n\nplt\n.\naxis\n(\n\"off\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n# 保存图片 并发送到手机\n\n\nmy_wordcloud\n.\nto_file\n(\nos\n.\npath\n.\njoin\n(\nd\n,\n \n\"wechat_cloud.png\"\n))\n\n\nitchat\n.\nsend_image\n(\n\"wechat_cloud.png\"\n,\n \n'filehelper'\n)\n\n\n嗯～好像还可以，这是Mac下生成的，附一个win10下生成的\n3. 微信自动回复\n接着来实现一个类似qq上的自动回复，原理就是接收到消息，就发消息回去，同时发一条给文件助手，就可以在文件助手中统一查看消息。\n代码很简单，来看看\n#coding=utf8\n\n\nimport\n \nitchat\n\n\n\n# 自动回复\n\n\n# 封装好的装饰器，当接收到的消息是Text，即文字消息\n\n\n@itchat.msg_register\n(\n'Text'\n)\n\n\ndef\n \ntext_reply\n(\nmsg\n):\n\n    \n# 当消息不是由自己发出的时候\n\n    \nif\n \nnot\n \nmsg\n[\n'FromUserName'\n]\n \n==\n \nmyUserName\n:\n\n        \n# 发送一条提示给文件助手\n\n        \nitchat\n.\nsend_msg\n(\nu\n\"[\n%s\n]收到好友@\n%s\n 的信息：\n%s\n\\n\n\"\n \n%\n\n                        \n(\ntime\n.\nstrftime\n(\n\"%Y-%m-\n%d\n %H:%M:%S\"\n,\n \ntime\n.\nlocaltime\n(\nmsg\n[\n'CreateTime'\n])),\n\n                         \nmsg\n[\n'User'\n][\n'NickName'\n],\n\n                         \nmsg\n[\n'Text'\n]),\n \n'filehelper'\n)\n\n        \n# 回复给好友\n\n        \nreturn\n \nu\n'[自动回复]您好，我现在有事不在，一会再和您联系。\n\\n\n已经收到您的的信息：\n%s\n\\n\n'\n \n%\n \n(\nmsg\n[\n'Text'\n])\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \nitchat\n.\nauto_login\n()\n\n\n    \n# 获取自己的UserName\n\n    \nmyUserName\n \n=\n \nitchat\n.\nget_friends\n(\nupdate\n=\nTrue\n)[\n0\n][\n\"UserName\"\n]\n\n    \nitchat\n.\nrun\n()\n\n\n\n运行后会保持登录状态，开启自动回复模式，手机上查看：\n当然，除了文字Text信息，还可以接收图片（表情包算图片），语音，名片，地理位置，分享和类型为Note的信息（就是有人提示类的消息，例如撤回消息），把装饰器写成下面形式即可接受，大家可以试试\n@itchat.msg_register(['Map', 'Card', 'Note', 'Sharing', 'Picture'])\n\n4. 最后\n除了上面这些，还可以做到管理微信群，自动添加好友，还可以加入机器人回复功能，有时间会补上。\n再次感谢\nitchat\n作者\n@LittleCoder"},
{"title": "Python牛逼也没用", "description": "写这篇文章的起始原因是我公众号的读者不少人问我怎么用Python去做数据分析？实际数据分析工作中Python到底有多重要？用Python做数据分析需要哪些知识？ 后来想到在知乎上很多数据分析的话题下", "article": "有点标题党了。\n不过文章也有意义。\n写这篇文章的起始原因是我公众号的读者不少人问我怎么用Python去做数据分析？实际数据分析工作中Python到底有多重要？用Python做数据分析需要哪些知识？\n后来想到在知乎上很多数据分析的话题下，大家把Python位置捧得很高，貌似一个合格的数据分析师必须要要有Python这项技能才可以。今天我想泼一盆冷水。\n为什么这么说呢？因为自打我工作以来真枪实弹的干完之后，我发现在数据分析的工作中很多很多产生巨大价值的分析仅仅是使用Excel或者一些简单的分析工具就能完成的。\n而其实大家在没工作之前其实大多觉得：Python多牛逼啊，学会了R多厉害啊，确实Python和R很厉害，在做一些更深层的分析的时候非常好用，然并卵。\n就拿前段时间刚结束的一个项目来说：这个项目的目的是提高用户的次日留存从40%提升到60%，我们一共做了几件事情。第一步是先采集分析了用户的所有行为数据，与老的App对比；第二步是发现数据中的差异，寻找差异的原因；第三步寻找到原因之后开始研究相应的可解决的方案。\n开始的时候我们做了第一种解决方案某些指标涨了但是留存并没涨，所以我们又继续分析为什么行为数据涨了但是留存没涨，这样一步一步的深究原因找到最终的解决方案。\n整个流程中我要用的技术：SQL、Tableau、Excel，除此之外最重要的一个就是了解业务，向技术、测试、运营了解我们的数据现状。\n这个项目只用了两周的时间我们就把留存从40%的值提升到了65%，是不是感觉很震惊？\n当然这样的项目不止这一个，之前的营收项目同样也是一样，几乎没用到Python或者是R就可以把收入提高、把续费率提高，并不是说不好用，而是说大部分的时候根本用不到。\n最后我想用我前两天在知乎上回答了一个问题来给大家解答：怎么培养数据分析的能力？\n路人甲：怎么培养数据分析的能力？"},
{"title": "学习Python的建议", "description": "尤其是没掌握排查BUG技巧时。 如果初学者接触的第一门语言是Python，学习曲线则会平滑得多，掌握一些基本语法和Python内置的数据结构，已经可以上手写一些小工具或者小型应用", "article": "Python是最容易入门的编程语言，没有之一。如果初学者接触的第一门语言是C或者C++，对他们来说最难的不是语法，而是容易出现内存泄漏、指针等问题。有时候排查这些问题对初学者的打击很大，尤其是没掌握排查BUG技巧时。\n如果初学者接触的第一门语言是Python，学习曲线则会平滑得多，掌握一些基本语法和Python内置的数据结构，已经可以上手写一些小工具或者小型应用。这对初学者来说，非常重要。因为学习的过程是一个突破舒适区的过程，会面临很多痛苦，如果学习过程得不到激励，很容易半途而废，类似我们开玩笑说的「从入门到放弃」。Python还有很多优点：上手快，第三方库丰富，资料丰富，很容易做出“可见可得”的应用。比如你要拿C或者C++做web服务，这上手门槛就有点高了。所以很多工科学生，甚至是科班学生会问学了C/C++到底有什么用，因为想上手做一些“可见可得”的应用太难。Python就大不同，你想搞Web开发？上来一个Flask框架立马就撸。想搞点数据分析？上来一个Panda+数据可视化，撸起来轻松愉快甚有快感。想抓取什么数据？你自己基于request撸一个小爬虫采集点网站信息，app信息都不是什么难事。 \n也是因为这样，学习Python的过程几乎接近“无痛”，有很好的学习正反馈过程，学一点知识就能做一点小东西，能看得到自己成长和进步。安利了这么多好处，来看看学Python分几个阶段吧。\n1.基础知识\nPython最基本的语言特性和语法:\n变量 \n数据类型与数据结构 \n输入和输出 \n运算符、表达式、语句 \n控制流(顺序控制，选择控制和循环控制) \n面向过程编程\n面向对象编程 \n异常处理\n组织代码 \n标准库、第三方库\n针对面向对象这一块需要重点的讲一下，为什么会有面向对象？以及我们如何设计面向对象系统？这个思考的过程有助于你理解面向对象编程思想。\n可以说「一切皆对象」这句话普适性是很强的，大家都在玩的王者农药，里面每一个对战英雄，每一个野怪，每一张地图都是通过面向对象的思想构建起来的。如果一开始你觉得太复杂，大可把用「分而治之」的思想把复杂的对象break down，分解成多个简单合理的对象。任何复杂的系统都可以由若干个简单可靠的系统组成，多个简单可靠的系统有序地组织起来是可以实现强大功能的。举个例子，还拿农药来说，”英雄“是可以作为一个基类的对吧，每个英雄都有血条，移动速度，AD，AP，物防，法扛等等。李白平A后裔一下，这是对象之间的通信（或者说交互）。后裔放大打中李白，李白眩晕，这一系列的触发过程都可以通过面向对象来建模。\n在掌握了语法特点，掌握了面向对象的思想之后，我们应该能够在控制台（windows或者mac的命令行）里边实现一个有意思的程序。这个程序应该解决现实生活中的一个实际问题。比如出现一个职位的发布和管理系统。有以下功能。我们可以录入职位信息。保存到文件上。我们还可以加载职位信息。按多种条件去查询，比如按关键字按城市。按薪资范围。按商圈工作年限等等。\n在做这个的过程中，自己需要设计一个很好的面向对象系统。也把Python里常用的语言基本特性都用到了。达到这个阶段算是勉强及格了吧，不过仅仅是在语言掌握层面。如果想当一个合格的研发工程师，还需要掌握很多其他技能。\n2. 进阶的阶段\n现在的开发大部分是基于web的，比如app要调web接口，pc端肯定也要调web接口，所以我们不能光在控制台里面玩。这个时候需要了解，http协议和Python web开发。我们可以重做前面提到的求职发布系统，学习基于Python web如何实现。这个时候你需要实现若干个接口：\n用户端：\n用户注册\n用户登录\n请求首页刷出默认的职位列表\n筛选职位列表\n根据城市\n根据关键字\n根据薪酬\n根据工作商圈\n管理后台：\n登录\n发布职位\n更新职位\n删除职位\n为了实现以上接口，你需要弄清楚什么是GET，什么是POST请求，什么场景下用GET，什么场景用POST。你还需要明白一个Python web开发框架，要明白一个http请求到了web框架之后，框架做了什么事情，如何在里面实现业务逻辑。哪些数据是服务共享的，哪些数据是用户/请求独享的。\n此外，应该学会Python如何操作数据库实现增删改查，大部分的任务都离不开增删改查。比如我提到的发布职位就是create的过程，更新就是update，还有删除是delete，读是read。江湖有一个戏称CRUD boy。\n如果能顺利度过进阶阶段，你应该能举一反三实现其他类似系统了。比如现在很火的分销，拼团，还有新闻Feeds等等。\n好像我没怎么提数据结构和算法，这个要看个人追求。如果你要在最短时间内学会Python开发，恐怕是没时间学好数据结构和算法了，能掌握自带的数据结构用法就行。如果你的学习时间充足，我的建议是一定要学数据结构和算法。为了以后长期的发展，为了人民币，一定要学好数据结构和算法，我简直苦口婆心地劝啊。\n3. 工业界经验\n最后一个阶段是实际的工业经验。这个阶段，你应该对公司用的基础架构，如RPC，数据库缓存消息系统中间件，烂熟于心。同时应该掌握最基本的系统设计的技巧。知道如何根据一个实际需求，设计一个高可用，高性能高扩展性的系统。\n实际上我觉得第一个阶段是最容易的，第二个阶段会碰到一些坑，有时候不好解决。在第二个阶段，你可能需要比较好的自学能力，或者有一个好的学长导师。第三个阶段需要比较体系化的训练和思考。\n如果说你的系统设计能力ok，甚至经验丰富，再加上你不错的算法，你肯定有一份好工作，薪资可能说多了显浮夸，但优秀的应届生很多人超过30w，甚至50w已经是常态了。工作3-5年的过百万的也大有人在。\n这个时代，程序员虽然辛苦了一点，但无疑碰上最好的时代了。\nPS：辛苦是因为知识更新很快，行业发展也很快，逼着程序员也要往前走。保持学习才是从业者的基本素养，而不是掌握某门语言某门技术。\n有问题可以加卫星探讨。\nwx: hepulaocai\n厚脸皮🐵一波\n凯威讲堂"},
{"title": "为什么人工智能用 Python？", "description": "因为脚本语言写起来简单容易。 Python虽然慢但是它只是调用AI接口，真正的计算全是C/C++写好的底层，用Python只是写逻辑，即第一步怎么算，第二步怎么算", "article": "因为脚本语言写起来简单容易。\nPython虽然慢但是它只是调用AI接口，真正的计算全是C/C++写好的底层，用Python只是写逻辑，即第一步怎么算，第二步怎么算，几行代码就出来了。\n换成C++，得先学1个月才能编译通过。不是说用C++写不了上层逻辑，而是代码量太大，开发效率太低，换来总体速度提升1%，不合适。\n计算机语言各有适用性，即C/C++速度快适合底层写算法，Python慢但适合上层写逻辑。两者各自牛逼的特点恰好是对方傻逼的特点。"},
{"title": "为什么自学Python看不进去？", "description": "结合网上资料和python官方文档，整理一份30天python 学习计划，供大家参考。 第1天 Python简介 - Python的历史 / Python的优缺点 /", "article": "首先学习python一定要以\n实用性\n为导向！盲目看教程，结果大多是浅尝辄止，从入门到放弃。\n我想告诉你我的经验，\n如何在一个月内入门python！\n1、【why】 你为什么要学习python？\n爬虫？数据分析？机器学习？又或者其它？\n在找一本python教程准备啃之前，一定要问问自己，我为什么要学习python？\npython在近几年越来越受追捧，很多童鞋或者职场小伙伴想要提升技能-学习python。这是非常好的事情，但问题在于很多人不知道学python做什么，所以什么零碎细末、艰难晦涩、长篇大论的都去看，很容易陷入学不下去的困境。\n必须要有针对性、选择性地学！\n针对性学习宗旨是\n按需去学，学以致用\n。\n想成为木匠，才去学习用刨子、用车床，一个砖瓦匠就没必要瞎费这功夫。同理，当你对网络爬虫感兴趣，并且有爬一个网页的冲动，这时候去学python是最容易上手的。\n我是做数据分析工作，学python的初衷是想利用python强大灵活的数据分析能力。python做数据分析对语法的要求并不高，只要能理解基本的逻辑结构、数据类型、数据结构、运算符、函数、库，就可以运用到实际项目里。所以我就没必要花很大功夫在诸如类、web编程、模块、线程等数据分析不常用的功能上面，如果真遇到这些内容，我再去查资料搞清楚。\n2、【what】选择什么样的教程学?\n在明确自己为什么学python后，要选择合适的书籍教程。不可否认，市面上已经有太多python入门书籍，以及更多的网络教程。我只推荐给大家\npython官方文档\n，\n不久前该文档已经汉化，大家可以很方便的去学习最新最全的python知识。如果你有能力阅读英文文档，那就选英文文档，毕竟第一手的内容更专业。\npython官方中文文档\n当然，官方文档知识点太多，初学者很难找到要学的内容，这时你需要查查各个专业领域的python要求。\n如果你是要准备从事数据科学，不妨去\nkaggle数据科学微教程\n看看，里面会讲到数据科学需要的python知识，然后对照着一个知识点一个知识点地啃python官方文档。\nkaggle平台数据科学微教程\n如果你要做爬虫工作，不妨在网上买一本评分高的python爬虫书籍，一般来说里面会有python基础部分，同理你只要在官方文档里找这部分知识学习。\n针对性地在官方文档里学习python知识，不仅节省时间，而且你会发现更容易理解，\n因为你是带着问题去学习的。\n3、【how】怎么去学习python？\n其它回答里也提到了\n在重复练习中学习python，\n这点我是非常认同的。\n输出是最好的输入\n，编程语言虽然注重逻辑，但更需要学习者不断地动手敲代码。\n从一开始，你要学会如何搭建python环境，选择什么样地开发环境（IDE）。这些都可以去网上查，慢一点的折腾两三天，快一点的一天不到就能搞定。总之，这是学习python的第一步，也是练习的开始。\n对于官方文档的每一段代码，我建议都动手亲自敲一遍，比如你看到字符串这一节，在理解了字符串定义后，文档会给出示例代码和运行结果：\n照着示例代码，在你的编程环境中实践，千万不要复制黏贴，对自己的火眼精金过度自信并不是一件好事。\n4、【when】如何制定时间学python？\n学习python切忌拉很长战线。制定的计划时间越长，人的惰性、拖延就会冒出来。\n我的建议：\n制定5~8周的学习计划\n一周学习5天\n每天3小时左右\n理由是：\n时间不长1~2个月，比较容易坚持\n符合一门大学课程的学习周期\n短时间高密度的学习有利于形成知识的连贯性，对python理解也会更加深入\n当然，这中间需要监督机制，你可以在社交平台打卡，可以制定自己的学习课程表，也可以和朋友一起学习。\n结合网上资料和python官方文档，整理一份30天python 学习计划，供大家参考。\n第1天\nPython简介 - Python的历史 / Python的优缺点 / Python的应用领域\nPython环境搭建\n 【\n参考\n资料】\n第2天\n使用python解释器\n  【\n参考资料\n】\n关于python语法的简单介绍\n  【\n参考资料\n】\n第3天\n词法结构\n \n运算符和表达式\n 【\n参考资料\n】\n第4天\npython数据结构\n  列表/字符串/元组【\n参考资料\n】\n第5天\npython数据结构\n  字典/集合 【\n参考资料\n】\n第6天 \npython流程控制\n1【\n参考资料\n】\nif语句\nfor循环\nwhile循环\n第7天 \npython流程控制\n2【\n参考资料\n】\ncontinue语句\nbreak语句\npass语句\n第8~9天 \n格式化字符串\n读写文件\n【\n参考资料\n】\n第10~12天 \npython函数\n 【\n参考资料\n】\nLambda 表达式\n \n编码风格\n \n第13天 \npython模块\n 【\n参考资料\n】\n第14天  \n迭代器\n生成器\n \n生成器表达式\n \n第15~16天  \n错误和异常\n【\n参考资料\n】\n第17~19天 \n面向对象编程\n 【\n参考资料\n】\n第19~20天 \n标准库使用\n 【\n参考资料\n】\n日期和时间\n \n数学\n \n操作系统接口\n第21天 \n安装 Python 模块\n \n第22~23天\n虚拟环境和包\n \n第24天\n多线程\n第25~30天\n训练题"},
{"title": "Python有哪些作用？", "description": "今天跟大家聊聊Python吧。 Python是什么呢？ Python是一种全栈的开发语言，你如果能学好Python，前端，后端，测试，大数据分析，爬虫等这些工作你都能胜任", "article": "今天跟大家聊聊Python吧。\nPython是什么呢？\n Python是一种全栈的开发语言，你如果能学好Python，前端，后端，测试，大数据分析，爬虫等这些工作你都能胜任。\n当下Python有多火我不再赘述,Python有哪些作用呢？\n据我多年Python经验总结，Python主要有以下四大主要应用：\n网络爬虫\n网站开发\n人工智能\n自动化运维\n接下来和大家聊聊这几个方面：\n 一、网络爬虫\n       首先，\n什么叫网络爬虫？\n       网络爬虫又称网络蜘蛛，是指按照某种规则在网络上爬取所需内容的脚本程序。众所周知，每个网页通常包含其他网页的入口，网络爬虫则通过一个网址依次进入其他网址获取所需内容。\n​爬虫有什么用？\n做垂直搜索引擎（google,baidu等）.\n科学研究：在线人类行为，在线社群演化，人类动力学研究，计量社会学，复杂网络，数据挖掘，等领域的实证研究都需要大量数据，网络爬虫是收集相关数据的利器。\n偷窥，hacking，发垃圾邮件……\n       爬虫是搜索引擎的第一步也是最容易的一步。\n用什么语言写爬虫？\nC，C++。高效率，快速，适合通用搜索引擎做全网爬取。缺点，开发慢，写起来又臭又长，例如：天网搜索源代码。\n脚本语言：Perl, Python, Java, Ruby。简单，易学，良好的文本处理能方便网页内容的细致提取，但效率往往不高，适合对少量网站的聚焦爬取\nC#？\n为什么眼下最火的是Python？\n       个人用c#,java都写过爬虫。区别不大，原理就是利用好正则表达式。只不过是平台问题。后来了解到很多爬虫都是用python写的，于是便一发不可收拾。Python优势很多，总结两个要点：\n1）抓取网页本身的接口\n相比与其他静态编程语言，如java，c#，C++，python抓取网页文档的接口更简洁；相比其他动态脚本语言，如perl，shell，python的urllib2包提供了较为完整的访问网页文档的API。（当然ruby也是很好的选择）\n此外，抓取网页有时候需要模拟浏览器的行为，很多网站对于生硬的爬虫抓取都是封杀的。这是我们需要模拟user agent的行为构造合适的请求，譬如模拟用户登陆、模拟session/cookie的存储和设置。在python里都有非常优秀的第三方包帮你搞定，如Requests，mechanize\n2）网页抓取后的处理\n抓取的网页通常需要处理，比如过滤html标签，提取文本等。python的beautifulsoap提供了简洁的文档处理功能，能用极短的代码完成大部分文档的处理。\n其实以上功能很多语言和工具都能做，但是用python能够干得最快，最干净。Life is short， u need python.\n二、网站开发\n那开发网站需要用到哪些知识呢？\n1、python基础，因为用python开发的，所以python指定要会，最起码你也得会条件判断，循环，函数，类这些知识；\n2、html、css的基础知识，因为要开发网站，网页都html和css写的，最起码这些知识你得会，就算不会写前端，开发不出来特别漂亮的页面，网站，最起码要能看懂html标签是；\n3、数据库基础知识，因为开发一个网站的话，数据存在哪里，就是在数据库里，那你最起码要会数据库的增删改查吧，要不然怎么存数据，取数据呢\n　　上面这些知识会的话，开发一个简单的小站就没有问题了，如果想开发比较大型的网站，业务逻辑比较复杂的，那就得用到其他的知识了，比如说redis、MQ等等。\n三、人工智能\n \n人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。 人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。人工智能从诞生以来，理论和技术日益成熟，应用领域也不断扩大，可以设想，未来人工智能带来的科技产品，将会是人类智慧的“容器”，也可能超过人的智能。\n \n  Python正在成为机器学习的语言。大多数机器语言课程都是使用Python语言编写的，大量大公司使用的也是Python，让许多人认为它是未来的主要编程语言。\n　　有些人觉得PYTHON效率底，说他不能支持多线程，好吧，这个还有点说对了，但是我想问，看这篇文章的人有几个做过搜索引擎开发？有几个做个上亿PV的并发网站开发？有几个看过LINUX内核源码？如果没有，乖乖先把入门语言学会吧\n四、自动化运维\n　　Python能满足绝大部分自动化运维的需求，又能做后端C/S架构，又能用WEB框架快速开发出高大上的WEB界面，只有当你自已有能力做出一套运维自动化系统的时候，你的价值才体现出来。\n那么，该怎么学习Python呢？上个简图大概按这个思路走uoz，后面有空再细聊 \n末了，送大家一些Python资料（书籍、视频、论文等），需要的私我回复 “Python”领取。\n如果本文对你有用请给个赞让我知道😊"},
{"title": "Python爬虫告诉你上海房价有多高", "description": "最近用Python爬取了贝壳上7万多套上海的在售房源，7万多套房源是目前贝壳上正在挂牌出售的房源，覆盖了上海各个区县。我们对这7万多套房源做一下分析，来真实地感受一下上海的房价到底有多高", "article": "最近用Python爬取了贝壳上7万多套上海的在售房源，7万多套房源是目前贝壳上正在挂牌出售的房源，覆盖了上海各个区县。我们对这7万多套房源做一下分析，来真实地感受一下上海的房价到底有多高。\n爬虫思路\n首先介绍一下我们这个爬虫的思路。贝壳网上的房源按照区县、版块做了划分，如下\n我们首先获取所有的区和版块数据。\n然后对于每一个版块，爬取版块内的所有房源数据。每一套房源的数据除了单价总价外还包括小区名字、户型、面积、朝向、装修、电梯、楼层等，如下图\n爬取的数据存入MongoDB。爬取完所有的数据后，我们从MongoDB读取数据并做分析。\n代码这里不详细展开，文末会给出获取方式。\n房源数据分析\n爬取完所有房源数据后，我们来对数据做一下分析。\n本次共爬取挂牌在售的房源总数\n72994\n套，在售房源的平均售价是\n531万\n/套，平均单价是\n56000元\n/平米。\n按照区县划分，每个区的在售房源的分布如下：\n可以看到浦东新区作为上海第一大区，挂牌在售的房源数量也是最多的。\n上海各个区县的均价如下图：\n静安、黄浦两个区位于上海的市中心，房价也最高，都超过了9万/平米，长宁、徐汇紧随其后，单价也超过了7万/平米。这4个区也是上海高端商业区、高端写字楼密集的地方，商场上档次，生活有品位，在这里拥有一套住房也成为了身份的象征。房价最低的是金山区，地处上海偏远的郊县，虽然也属于上海，但每次去金山都有一种出差的感觉。\n下面是上海单价最贵的十大小区\n可以看到大多数都集中在静安、黄浦、徐汇、长宁这4个区。浦东有一个小区入围，那是曾经全上海最贵的汤臣一品，如今在最贵的名单里也只能排在第7了。\n最后我们来欣赏一下上海的那些最贵的顶级豪宅的房价\n总价里的零是不是数不过来了？每一套都在1亿以上。豪宅的名字也很有趣，都是什么庄园、什么山庄之类的。\n我们来欣赏一下豪宅庄园的图片\n看了是不是很喜欢？是不是很动心？\n那么月薪1万，如何才能买得起这样的豪宅呢？\n不要急，一步步来。先设定一个小目标，比如：先活他个500年。\n爬虫代码已上传github，如需代码，可在公众号【\nPython与数据分析\n】后台回复“房价”获取代码地址。"},
{"title": "Python 有那么神吗？", "description": "简单远程控制电脑（当然微信应该更好些）：【Python】利用邮件远程控制自己电脑 Python字符动画： 效果： 【Python】视频转字符动画 表白小软件：Python仿制抖音表白小软件", "article": "原文不定期更新：\n2018-11-05补充内容4，GAN生成短视频\n2019-02-18补充一些个人开源的小项目代码链接（GitHub上都给出了介绍页链接）：\n（1）微信小助手\nCharlesPikachu/WechatHelper\n（2）一些实用工具集\nCharlesPikachu/Tools\n（3）免费代理获取\nCharlesPikachu/FreeProxy\n3. 2019-06-11\n 更多新的小项目可以关注我的Github动态/我的微信公众号\nCharlesPikachu - Overview\n譬如最近的：\n部分网站模拟登录：\nhttps://\ngithub.com/CharlesPikac\nhu/DecryptLogin\n颜值预测V2：\nhttps://\ngithub.com/CharlesPikac\nhu/isBeauty\nCNNLifeGame：\nhttps://\ngithub.com/CharlesPikac\nhu/CNNLifeGame\nFaster RCNN复现：\nhttps://\ngithub.com/DetectionBLW\nX/FasterRCNN.pytorch\nFPN复现：\nhttps://\ngithub.com/DetectionBLW\nX/FPN.pytorch\n4. 2019-12-14\n更新优化了一下坦克大战游戏版本，升级到v0.2。\n为什么没有呢？反正我用着感觉挺舒服的，想干嘛就干嘛。\n本回答内容包括：\n写写小游戏\n让电脑自己来玩小游戏\n写写爬虫\n写写深度学习/机器学习有趣的小玩意\n其他无厘头但有趣的事情\n写写小游戏？\n比如坦克大战：\n坦克大战\nhttps://www.zhihu.com/video/1188976781536120832\n介绍：\n震惊，博主终于更新了坦克大战小游戏！！！\n源代码在这（里面还有其他一些小游戏）：\nCharlesPikachu/Games\n写完小游戏能不能让电脑自己玩呢？\n当然也可以啊！\n（1）比如AI贪吃蛇（因为跑完时间有点久，就上传一段视频吧）：\nhttps://www.zhihu.com/video/1015221318500904960\n400多分的时候（懒得跑下去了【可能是因为太绿了】，应该有几率可以占满屏幕的）：\n源代码在这（该项目会持续增加一些AI玩游戏的例子）：\nCharlesPikachu/AIGames\n（2）DQN玩Chrome的那个彩蛋游戏\n2018-08-24简单补坑（能跑2k左右吧，等我完成了Flag再上视频）：\nDQN玩T-Rex Rush(上)\n写写爬虫？\n比如想下载一些音乐和视频，但又懒得下载客户端，那就自己写个音乐下载器和视频下载器：\n源代码在这：\nCharlesPikachu/Music-Downloader\nCharlesPikachu/Video-Downloader\n当然你也可以爬爬QQ空间来偶尔怀个旧：\nPython爬取QQ空间信息（下）\n当然也可以是微信：\nPython简单分析微信好友\n没书看的时候可以爬爬豆瓣：\nPython与豆瓣读书\n分析分析知乎自己粉丝的构成：\nPython爬取并简单分析知乎用户粉丝构成\n等等。\n写点有趣的深度学习/机器学习代码？\n（1）风格迁移\nPython简单实现图像风格迁移\n梵高笔下的老北京：\n其他：\n（2）颜值预测\nPython实现颜值预测\n周末了，来测下自己的颜值如何？\n（3）生成动漫头像\n【Python】利用GAN生成动漫头像\n（4）利用GAN网络生成短视频\n只有源代码：\nCharlesPikachu/VideoGan\n（5）生成会跳舞的小姐姐\n效果和介绍：\n用神经网络来生成会跳舞的小姐姐呀~\n源代码在这：\nhttps://\ngithub.com/CharlesPikac\nhu/DanceNet\n等等。\n或者干点其他无厘头的事情？\n生成小姐姐：\n【Python+VBA】在Excel中生成小姐姐\n简单远程控制电脑（当然微信应该更好些）：\n【Python】利用邮件远程控制自己电脑\nPython字符动画：\n效果：\nhttps://www.zhihu.com/video/1015227123690237952\n【Python】视频转字符动画\n表白小软件：\nPython仿制抖音表白小软件\n欢迎关注我的微信公众号：Charles的皮卡丘，不定期分享有趣好玩的Python项目以及大量的学习资源。\n最后再声明一下：\n代码仅供学习交流，禁止其他用途。"},
{"title": "整理了70个Python实战项目列表，都有完整且详细的教程", "description": "你也可以从中寻找灵感去做自己的项目。 70个Python项目列表： 1、【Python 图片转字符画】 2、【200行Python代码实现2048】 3、【Python3 实现火车票查询工具】", "article": "不管学习那门语言都希望能做出实际的东西来，这个实际的东西当然就是项目啦，不用多说大家都知道学编程语言一定要做项目才行。\n 这里整理了70个Python实战项目列表，都有完整且详细的教程，你可以从中选择自己想做的项目进行参考学习练手，你也可以从中寻找灵感去做自己的项目。\n 70个Python项目列表：\n 1、\n【Python 图片转字符画】\n2、\n【200行Python代码实现2048】\n3、\n【Python3 实现火车票查询工具】\n4、\n【高德API+Python解决租房问题 】\n5、\n【Python3 色情图片识别】\n6、\n【Python 破解验证码】\n7、\n【Python实现简单的Web服务器】\n8、\n【pygame开发打飞机游戏】\n9、\n【Django 搭建简易博客】\n10、\n【Python基于共现提取《釜山行》人物关系】\n11、\n【基于scrapy爬虫的天气数据采集(python)】\n12、\n【Flask 开发轻博客】\n13、\n【Python3 图片隐写术】\n14、\n【Python 实现简易 Shell】\n15、\n【使用 Python 解数学方程】\n16、\n【PyQt 实现简易浏览器】\n17、\n【神经网络实现手写字符识别系统 】\n18、\n【Python 实现简单画板】\n19、\n【Python实现3D建模工具】\n20、\n【NBA常规赛结果预测——利用Python进行比赛数据分析】\n21、\n【神经网络实现人脸识别任务】\n22、\n【Python文本解析器】\n23、\n【Python3 & OpenCV 视频转字符动画】\n24、\n【Python3 实现淘女郎照片爬虫 】\n25、\n【Python3实现简单的FTP认证服务器】\n26、\n【基于 Flask 与 MySQL 实现番剧推荐系统】\n27、\n【Python 实现端口扫描器】\n28、\n【使用 Python 3 编写系列实用脚本】\n29、\n【Python 实现康威生命游戏】\n30、\n【川普撞脸希拉里(基于 OpenCV 的面部特征交换) 】\n31、\n【Python 3 实现 Markdown 解析器】\n32、\n【Python 气象数据分析 -- 《Python 数据分析实战》】\n33、\n【Python实现键值数据库】\n34、\n【k-近邻算法实现手写数字识别系统】\n35、\n【ebay在线拍卖数据分析】\n36、\n【Python 实现英文新闻摘要自动提取 】\n37、\n【Python实现简易局域网视频聊天工具】\n38、\n【基于 Flask 及爬虫实现微信娱乐机器人】\n39、\n【Python实现Python解释器】\n40、\n【Python3基于Scapy实现DDos】\n41、\n【Python 实现密码强度检测器】\n42、\n【使用 Python 实现深度神经网络】\n43、\n【Python实现从excel读取数据并绘制成精美图像】\n44、\n【人机对战初体验:Python基于Pygame实现四子棋游戏】\n45、\n【Python3 实现可控制肉鸡的反向Shell】\n46、\n【Python打造漏洞扫描器 】\n47、\n【Python应用马尔可夫链算法实现随机文本生成】\n48、\n【数独游戏的Python实现与破解】\n49、\n【使用Python定制词云】\n50、\n【Python开发简单计算器】\n51、\n【Python 实现 FTP 弱口令扫描器】\n52、\n【Python实现Huffman编码解压缩文件】\n53、\n【Python实现Zip文件的暴力破解 】\n54、\n【Python3 智能裁切图片】\n55、\n【Python实现网站模拟登陆】\n56、\n【给Python3爬虫做一个界面.妹子图网实战】\n57、\n【Python 3 实现图片转彩色字符】\n58、\n【自联想器的 Python 实现】\n59、\n【Python 实现简单滤镜】\n60、\n【Flask 实现简单聊天室】\n61、\n【基于PyQt5 实现地图中定位相片拍摄位置】\n62、\n【Python实现模板引擎】\n63、\n【Python实现遗传算法求解n-queens问题】\n64、\n【Python3 实现命令行动态进度条】\n65、\n【Python 获取挂号信息并邮件通知】\n66、\n【Python实现java web项目远端自动化更新部署】\n67、\n【使用 Python3 编写 Github 自动周报生成器】\n68、\n【使用 Python 生成分形图片】\n69、\n【Python 实现 Redis 异步客户端】\n70、\n【Python 实现中文错别字高亮系统】\n 最后：\n 以上项目列表希望可以给你在Python学习中带来帮助~\n作者：实验楼\n链接：\nhttps://www.\njianshu.com/p/b577a1655\n144\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。"},
{"title": "用Python发一个高逼格的朋友圈【附代码】", "description": "今天二胖要给大家介绍一个Python库： PIL(Python Image Library) 下面我们用一个实际的例子 看看50行python代码可以做什么神奇的事情", "article": "今天二胖要给大家介绍一个Python库： \nPIL(Python Image Library)\n下面我们用一个实际的例子\n看看\n50行python代码\n可以做什么神奇的事情\n这是二胖发的一个朋友圈\n切图前是一张图\n切图后就是九张图啦\n成功霸屏😄\n除了可以处理规整的正方形图片\n还可以处理非规则的图片\n比如下面这张宽度远大于高度的图片\n二胖是怎么处理的呢？\n很简单\n取宽和高之间的较大值\n然后填充白色\n就可以构造出一张正方形的图片啦\n当然，想把一张图片做成这样子也很容易啦，现在很多手机上的图片处理软件都能实现。\n二胖举这个例子只是为了给大家介绍介绍PIL库，感兴趣的童鞋也可以练习练习编程嘛~\n好了，现在就来看看这个PIL库到底是个什么吧~\nPIL是一个功能非常强大的Python图像处理标准库，但是呢，由于PIL支持Python2.7，所以\n使用Python3的程序猿们又在PIL的基础上分离出来了一个分支，创建了另外一个库Pillow，是可以支持Python3的\n。\nPillow兼容了PIL的大部分语法，使用起来也非常的简单。 \n下面二胖就讲讲是如何使用PIL库实现了上文介绍的小程序。\n其实思路很简单：\n对应代码如下：\n# -*- coding: utf-8 -*-\n\n\n'''\n\n将一张图片填充为正方形后切为9张图\n\nAuthor:微信公众号：大数据前沿\n\n'''\n\n\nfrom\n \nPIL\n \nimport\n \nImage\n\n\nimport\n \nsys\n\n\n#将图片填充为正方形\n\n\ndef\n \nfill_image\n(\nimage\n):\n\n    \nwidth\n,\n \nheight\n \n=\n \nimage\n.\nsize\n    \n    \n#选取长和宽中较大值作为新图片的\n\n    \nnew_image_length\n \n=\n \nwidth\n \nif\n \nwidth\n \n>\n \nheight\n \nelse\n \nheight\n    \n    \n#生成新图片[白底]\n\n    \nnew_image\n \n=\n \nImage\n.\nnew\n(\nimage\n.\nmode\n,\n \n(\nnew_image_length\n,\n \nnew_image_length\n),\n \ncolor\n=\n'white'\n)\n    \n    \n#将之前的图粘贴在新图上，居中 if width > height:#原图宽大于高，则填充图片的竖直维度\n\n \n#(x,y)二元组表示粘贴上图相对下图的起始位置\n\n        \nnew_image\n.\npaste\n(\nimage\n,\n \n(\n0\n,\n \nint\n((\nnew_image_length\n \n-\n \nheight\n)\n \n/\n \n2\n)))\n\n    \nelse\n:\n\n        \nnew_image\n.\npaste\n(\nimage\n,\n \n(\nint\n((\nnew_image_length\n \n-\n \nwidth\n)\n \n/\n \n2\n),\n0\n))\n    \n    \nreturn\n \nnew_image\n\n\n#切图\n\n\ndef\n \ncut_image\n(\nimage\n):\n\n    \nwidth\n,\n \nheight\n \n=\n \nimage\n.\nsize\n\n    \nitem_width\n \n=\n \nint\n(\nwidth\n \n/\n \n3\n)\n\n    \nbox_list\n \n=\n \n[]\n    \n    \n# (left, upper, right, lower) for i in range(0,3):#两重循环，生成9张图片基于原图的位置 for j in range(0,3):           \n\n            \n#print((i*item_width,j*item_width,(i+1)*item_width,(j+1)*item_width))\n\n            \nbox\n \n=\n \n(\nj\n*\nitem_width\n,\ni\n*\nitem_width\n,(\nj\n+\n1\n)\n*\nitem_width\n,(\ni\n+\n1\n)\n*\nitem_width\n)\n\n            \nbox_list\n.\nappend\n(\nbox\n)\n\n\n    \nimage_list\n \n=\n \n[\nimage\n.\ncrop\n(\nbox\n)\n \nfor\n \nbox\n \nin\n \nbox_list\n]\n    \n    \nreturn\n \nimage_list\n\n\n#保存\n\n\ndef\n \nsave_images\n(\nimage_list\n):\n\n    \nindex\n \n=\n \n1\n \n    \nfor\n \nimage\n \nin\n \nimage_list\n:\n\n        \nimage\n.\nsave\n(\n'./result/python'\n+\nstr\n(\nindex\n)\n \n+\n \n'.png'\n,\n \n'PNG'\n)\n\n        \nindex\n \n+=\n \n1\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \nfile_path\n \n=\n \n\"python.jpeg\"\n\n    \nimage\n \n=\n \nImage\n.\nopen\n(\nfile_path\n)\n   \n    \n#image.show()\n\n    \nimage\n \n=\n \nfill_image\n(\nimage\n)\n\n    \nimage_list\n \n=\n \ncut_image\n(\nimage\n)\n\n   \nsave_images\n(\nimage_list\n)\n相信大家看了代码就知道是怎么实现的了吧，代码中可能比较难理解的地方二胖也给出了相应的注释，大家赶快把代码下载下来拿去跑一跑。\ngithub地址：\nhttps://\ngithub.com/yangxuan0928\n/cut_image\n除了切图外，PIL还能做很多其他好玩的事情，二胖把中文文档下载下来啦！\n需要的朋友，请关注公众号：逆袭的二胖，后台回复【pil】就可以拿到啦。\n另外，关于编程，二胖有话要说，给大家推荐一篇我写的万赞文章，记录了我学习编程过程中积累的一些经验：\n二胖：这可能是我见过最好的编程指南了！"},
{"title": "在大型项目上，Python 是个烂语言吗？", "description": "最终也将迁出Python体系。YouTube也将不再是一个Python项目了。 YouTube的故事就讲到这里。YouTube无疑是一个使用Python的成功项目", "article": "前YouTuber来讲讲YouTube的故事吧。话说我们YouTuber跟Instagram的朋友吃饭，都要事先约定不谈Python，不然YouTuber分分钟变祥林嫂。不过再怎么吐嘈，YouTube不管从历史，代码量，码农数量，还是支撑的业务规模看，都是一个成功的大型Python Web项目 —— 至少曾经是，为什么是曾经，请一定要看到最后。\nYouTube从一开始就是一个典型的Python + MySQL项目。代码随着业务发展自然生长，在很多年前代码量就以百万计了。这时候的主要工程实践就是一些老生常谈：接口文档，单元测试和集成测试，严格的code review, 还是能维持feature开发；性能上前面一个高度优化的模板引擎 (\nhttps://\ngithub.com/youtube/spit\nfire\n) 后面一个 DB Proxy (\nhttps://\nvitess.io/\n) 就撑起了巨大的流量。Google的代码管理、构建系统和持续集成系统确实是好，serving infrastructure也够强悍，这些底子打得好是这个项目不用很多tricks都能撑到这么大的重要原因。\n但此时软件复杂性的问题已经非常明显，在这个规模上YouTube居然还是一个单体项目，不是不想拆是拆不了。问题就出在「自然生长」上，YouTube代码有典型的分层和业务模块分离设计，但是在这个开发团队规模上，很难有一个独裁架构师管控代码设计，工程师为了一些局部优化目标加一些例外破坏原始架构设计，比如在貌似ORM层的地方放业务特定代码，或者为了实现功能跨模块直接调用。Code review能保证局部代码设计合理，高覆盖的测试能大概保证上线能跑，但长期下来那么多工程师那么多例外，软件整体就变成了一团分层不明，依赖混乱，无法拆分的东西。这是常见的软件工程问题，其实跟Python没什么关系，它在一个Python项目上的体现就是随便改一两行代码都有可能break掉完全不相关的不知什么东西，而且不花至少半个小时跑完至少几千个单元测试你都发现不了（跑完了也不保证能发现就是了），开发者肯定是不爽的，我自己就变成了祥林嫂，至于什么快速开发，从来就不存在。\n由于核心数据库访问逻辑在这团无法拆分的大包里，要加涉及核心数据的功能，只能像滚屎球一样捏着鼻子继续往上加代码。但是对相对独立的新功能，工程师首先考虑的是不再需要用MySQL了 —— Google唯二大规模MySQL部署是广告后台和YouTube, 广告后台切Spanner/F1之后就只剩YouTube了，新功能都被鼓励用Spanner等Google原生存储平台。既然如此，那也就没有那坨Python貌似ORM又不是ORM的代码什么事了，业务逻辑当然就可以写成C++或者Java的后台服务。这时候YouTube就已经是一个Python+MySQL+一大堆C++/Java后台的混合架构。\n真正让YouTuber觉得日子没法过了的，其实还是运行时的问题。由于GIL, Python在多线程环境中很难扩展，YouTube用的是prefork多进程模式。YouTube为了接入Google生产环境以及跟各种Google系统交互，难免要大量调用Google通用的C++库，然而这些C++库全都假定是在一个典型的单进程多线程环境下跑的，开几个后台线程，加载一个共享数据表稀松平常，因为它们都假定这些都是给几千个线程共享的资源开销平摊下来没什么，但到了YouTube的多进程环境就尴尬了，最直接的影响就是巨大的内存占用，那些年内存价格高企，问题就尤其突出。CPU单核性能不再提高之后，CPU开销也成了大问题。YouTube尝试过PyPy, 但是发现由于之前明显的CPU瓶颈已经被用C模块的方法优化掉了，接下来上PyPy并没有带来期望的明显性能提升。从profiler上看到的就是做大型复杂工程的人熟悉的：处处都性能不佳，处处都不是瓶颈的景象，软件太复杂，响应最简单的请求都要做很多免不了的事，就得花那么多CPU. pypy-stm 还很不成熟，破除GIL带来的prefork魔咒遥遥无期。走投无路之下YouTube甚至搞过Grumpy(\nhttps://\ngithub.com/google/grump\ny\n) 这种疯狂的东西，就是一个用Go写的Python runtime, 企图用goroutine和将Python代码渐进移植成Go的方法破除性能屏障，项目似乎理所当然地没有了下文。光从性能上说另一个有希望的方向是Cython, 然而就像上面说的，明显CPU瓶颈已经用手写C模块优化过了，要再广泛铺开Cython必然要手工改写大量业务代码，话说既然都要手工改写了，那为什么还用Python呢？\n花开两朵各表一支，在codebase上，YouTuber历尽千辛万苦，还是将代码分出来严格的Web前端和API层，API层严格划分出了服务模块，各层和模块间只能采用Protocol Buffer的RPC API交互。虽然由于各种不得已这个严格划分好了的Python codebase（居然）还是要整体发布，但是现在逐个模块重写，至少在技术上成了可能。\n轰轰烈烈的 #YTFExit 运动开始了（YTFE = YouTube FrontEnd），运动还有一个契机：MySQL是真的撑不住了，就算技术上撑得住，Google SRE也不愿再为YouTube维护一套全Google唯一的巨型MySQL环境了。YouTube决定将所有存储迁移到Spanner, 并且重新设计表结构，那坨绕不开的数据访问Python代码横竖都是要重写的了。YouTube决定将API层的服务逐个用C++重写成独立部署的微服务，最大限度利用Google完善的C++ infrastructure, prefork什么的自然不会存在，性能的话，其实不管用什么语言只要把陈年代码推倒重写一次都能有显著提升，更别说是C++了。最后只剩下Web层还是Python, 而由于YouTube Web前端已经迁移到Polymer, 可以直接跟API层通信，需要服务器拼接Web页面的地方越来越少，剩下的Web层代码也越来越少，最终也将迁出Python体系。YouTube也将不再是一个Python项目了。\nYouTube的故事就讲到这里。YouTube无疑是一个使用Python的成功项目，但Python是否就是YouTube各个时期最好的选择，每个参与者都有自己的结论。我们可以问很多假设性问题，像是假如YouTube是个独立公司不需要依赖其他Google软件，会不会在运行时问题上没那么痛苦，有更多优化的机会；假如及早在架构上严格拆分，开发效率是否就不会掉得这么严重；假如早年在用Go写Vitess的时候咬咬牙把YTFE也用Go重写了项目发展会不会更顺利。要是去深入思考每一个假如，就会发现这从来不是一个单纯的语言技术问题。\n我自己的看法是，在一个大团队，长期开发的项目中，「自然生长」和滚屎球难以避免，在因此导致的软件复杂和冗余面前，单纯写代码的速度没有什么意义，在技术上能对项目有帮助的主要是 1. 编译和静态分析速度要快 2. 有个靠谱的运行时。Python在这两方面都没能做得很好（pytype没能在YouTube大规模铺开，因为对YouTube的规模来说它实在太慢了），不是说Python就一定做不好，只是在这个领域选择太多，为什么非要抱着Python不放？社区和生态系统就没有选择往这方面优化。#YTFExit 最终的选择居然是 C++, 要说C++在很多方面也非常不适合现代大型项目，比如编译时间就不及格，但是架不住那么多非C++不可的地方Google不得不下死力气优化，也符合了YouTube的要求。#YTFExit没有选择Go的最大考量是C++互操作性不好，如果不是因为Google的这个C++马太效应，要我开始一个YouTube这样的大型Web项目，我会选择Go.\n当然命运没有给我这个如果，我离开YouTube后去了搞一个大型机器学习项目。本以为逃出了YouTube的焦油坑，结果到项目第一天就被糊了一脸稀烂的Python code. Python成了机器学习默认语言这事也有很多偶然，不过已是既成事实，对构建神经网络的前端DSL是Python这件事我没有什么意见。其实一个机器学习项目除了这一点神经网络构建外其他大部分的工作都是各种倒腾protobuf数据，我认为这是非常不适合Python的东西，但是既然Python是机器学习默认语言，大部分researcher开始倒腾数据的时候也是直接上Python, 你跟谁说理去？也许以后Python社区能大力出奇迹，让语言和生态变得特别适应这类的大型项目。所以一个语言的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程，这个显而易见的道理知乎小编认为政治敏感，摊手。"},
{"title": "向Excel说再见，神级编辑器统一表格与Python", "description": "的效果到底是什么样的。总体而言，我们既可以通过 Python 加载和处理数据，也能通过「Excel」操作数据。 在 Python 上处理数据比较好理解，表格上处理数据其实非常像", "article": "很多开发者说自从有了 Python/Pandas，Excel 都不怎么用了，用它来处理与可视化表格非常快速。但是这样还是有一大缺陷，操作不是可视化的表格，因此对技能要求更高一点。近日，开发者构建了名为 Grid studio 的开源项目，它是一个基于网页的表格应用，完全结合了 Python 和 Excel 的优势。\n机器之心报道，参与：思源、张倩。\n是的，在一个界面上同时展示可视化表格与代码，而且同时通过表格与代码修改数据，这不就是 Python 与 Excel 的结合吗？\n项目地址：\nhttps://\ngithub.com/ricklamers/g\nridstudio\n我们先看看 Grid studio 的效果到底是什么样的。总体而言，我们既可以通过 Python 加载和处理数据，也能通过「Excel」操作数据。\n在 Python 上处理数据比较好理解，表格上处理数据其实非常像 Excel，如下所示为写一个求和公式。\n也许我们在表格上改了些数据，那么我们也能导入到 NumPy 数组，并做进一步的运算。\n为什么要创建这个工具？\n作者表示，他创建 Grid studio 主要是用来解决数据科学项目中工作流分散的问题，在这种项目中，他要在 R studio、Excel 等多个工具之间换来换去。\n在为 gazillionth-time 导出 CSV 文件时，如果行数过高，应用程序窗口就会卡顿。即使是做一些简单的事情，比如读取 JSON 文件，也能把人逼疯。现有的工具无法提供高效工作所需的环境和相关工作流，这也是作者决定构建该工具的原因。他想要创建一个易用的应用程序，可以把数据科学工作流整合进去。\n这个工具有何亮点？\nGrid studio 是一个基于网页的应用，看起来和 Google Sheets、Microsoft Excel 差不多。然而，它的杀手锏是整合了 Python 语言。\n几乎所有使用过计算机的人都会很自然地使用表格来查看和编辑数据。将这个简单的 UI 与 Python 这种成熟的编程语言结合起来简直不要太好用。\n用 Python 编写脚本非常简单：只需编写几行代码直接运行即可。\n核心集成：读、写\n这一 Python 集成的核心是对电子表格的读写接口，它可以在电子表格的数据和 Python 进程中的数据之间建立一个高性能的连接。\n可以用以下方式在表格中写入数据：\nsheet(\"A1:A3\", [1, 2, 3])\n用以下这种方式从表格中读取数据：\nmy_matrix = sheet(\"A1:A3\")\n你可以通过这种简单而高效的方式直接在表格中读取或写入数据，以自动化数据输入、提取、可视化等过程。\n编写定制化表格函数\n虽然通过一个简单的接口完成读写非常灵活，但有时编写可以直接调出的定制化函数也很重要。\n除了 AVERAGE、SUM、IF 这些默认函数外，你可能还需要其他函数，那么写出来就好了！\ndef UPPERCASE(a):\n    return str(a).uppercase()\n写完这行代码后，在表格中调出该函数，就像调用常规函数一样。\n利用 Python 生态\n通过利用 Python 生态中各种强大的软件包，我们能立即访问到当前最优的数据科学工具，因此也能快速访问到强大的模型，例如线性回归和支持向量机等。\n因为本身 Grid studio 主要就是处理表格数据，那么将它们作为特征可以快速调用 SVM 等模型，从而探索隐藏在这些数据背后的特征。\n数据可视化\n在数据科学中，很常见的一个任务就是可视化数据，这样才能获得关于数据的「先验知识」。通过集成交互式绘图库 Plotly.js 和 Python 标准可视化库 Matplotlib，Grid studio 目前已经内置了高级绘图功能。如下所示我们可以在向量表格格式上使用高级绘图功能：\n为了进一步解释如何使用 Grid studio 的特征以构建可视化图标，项目作者还展示了两个案例，即爬取网页与可视化数据分布，但这里主要展示第一个案例。\n案例：估计正态分布\n如下案例展示了 Grid studio 的强大功能，它会以更高的保真度通过 Plotly.js 可视化正态分布，我们可以看看交互式制图到底是如何完成的。\n使用安装\n前面介绍了这么多特性，那么我们到底该怎么用呢？Grid studio 的安装和使用都非常简单，通过简单的命令行就能搞定。\ngit clone \nhttps://\ngithub.com/ricklamers/g\nridstudio\ncd gridstudio && ./run.sh\n如上通过下载项目、运行安装脚本两步，我们就能在浏览器中打开本地端口，然后就能愉快地使用了。\n参考链接：\nhttps://\nhackernoon.com/introduc\ning-grid-studio-a-spreadsheet-app-with-python-to-make-data-science-easier-tdup38f7\nhttps://\ngithub.com/ricklamers/g\nridstudio\nhttps://\ngridstudio.io"},
{"title": "编程零基础应当如何开始学习 Python？", "description": "一. Python基础 Python基础01 Hello World! Python基础02 基本数据类型 Python基础03 序列 Python基础04 运算", "article": "零基础学编程，用python入门是个不错的选择，虽然国内基本上还是以c语言作为入门开发语言，但在国外，已经有很多的学校使用python作为入门编程语言。此外，python在机器学习，人工智能领域也非常流行，算得上是算法工程师的标配编程语言。\n下面的内容由浅入深，建议按照先后顺序阅读学习。如果你觉得内容不错，希望别做松鼠党，收藏了就不了了之，坚持读完，有条件的最好是购买书籍阅读效果更好。本文分享的内容和文末推荐的书籍均出自vamei君。\n一. Python基础\nPython基础01 Hello World!\nPython基础02 基本数据类型\nPython基础03 序列\nPython基础04 运算\nPython基础05 缩进和选择\nPython基础06 循环\nPython基础07 函数\nPython基础08 面向对象的基本概念\nPython基础09 面向对象的进一步拓展\nPython基础10 反过头来看看\n二. Python进阶\nPython进阶01 词典\nPython进阶02 文本文件的输入输出 \nPython进阶03 模块 \nPython进阶04 函数的参数传递 \nPython进阶05 循环设计 \nPython进阶06 循环对象 \nPython进阶07 函数对象 \nPython进阶08 错误处理 \n三. Python深入 \n到现在为止，Python学习已经可以告一段落。下面的部分，我想讨论Python的高级语法和底层实现。这一部分的内容并不是使用Python所必须的。但如果你想从事一些大型的Python开发(比如制作Python工具、写一个框架等)，你会希望对这一部分内容有所的了解。 \nPython深入01 特殊方法与多范式\nPython深入02 上下文管理器\nPython深入03 对象的属性\nPython深入04 闭包\nPython深入05 装饰器\nPython深入06 内存管理\n四. Python标准库 \nPython标准库的重要性在于：\n标准库是Python的一个组成部分。\nPython的哲学是一个问题只有一个最好的解决方法。这些标准库为许多问题提供了一个标准的解决方案。\nPython标准库——走马观花\nPython标准库的学习准备\nPython标准库01 正则表达式 (re包)\nPython标准库02 时间与日期 (time, datetime包)\nPython标准库03 路径与文件 (os.path包, glob包)\nPython标准库04 文件管理 (部分os包，shutil包)\nPython标准库05 存储对象 (pickle包，cPickle包)\nPython标准库06 子进程 (subprocess包)\nPython标准库07 信号 (signal包)\nPython标准库08 多线程与同步 (threading包)\nPython标准库09 进程信息 (部分os包)\nPython标准库10 多进程初步 (multiprocessing包)\nPython标准库11 多进程探索 (multiprocessing包)\nPython标准库12 数学与随机数 (math包，random包)\nPython标准库13 循环器 (itertools)\nPython标准库14 数据库 (sqlite3)\n最后推荐知名博主vamei君的书，非常非常值得推荐的一本书。是对上述内容的一个整理提炼与扩充。\n附《从Python开始学编程》作者简介：\n张腾飞， 笔名 Vamei，中国科学技术大学学士，南洋理工大学博士。著有《从Python开始学编程》等书，并写作 Java、网络协议、数据分析等方面的教程。他的博客访问量超过800万。现从事智能农业领域的创新创业，任睿畜科技首席技术官。2019年2月28日夜因抑郁症去世。\n在朋友圈看到他去世的消息，震惊又难过，RIP！"},
{"title": "初学 Python 需要安装哪些软件？", "description": "这里我们不考虑把Python编译成可执行文件。如果想运行Python程序，那么必不可少的就是Python的开发环境。 Python原版环境 在Python官网，有提供Python的原版开发环境", "article": "2019年7月22日：\n感谢各位的支持，作为一名知乎新人，能获得这么多赞，万分激动。由于个人原因（懒），这个回答中的一些问题一直没有更新，在此表示歉意。我重新做了分析，在原有的答案上做了修改，有任何问题，可以在讨论区中讨论。\n------------以下为正文区，假装是分割线-----------------\n编程这个东西是真的奇妙。对于懂得的人来说，会觉得这个工具是多么的好用、有趣，而对于小白来说，就如同大山一样。其实这个都可以理解，大家都是这样过来的。那么接下来就说一下python相关的东西吧，并说一下我对编程的理解。本人也是小白一名，如有不对的地方，还请各位大神指出~\n懒人目录：\n一、名词解释\n二、Python开发环境\n三、常用Python IDE介绍\n四、Python IDE推荐及一些小建议\n一、名词解释\n如果在编程方面接触的比较少，那么对于软件这一块，有几个名词一定要了解，比如开发环境、IDE、代码编辑器、编译器、调试器等等，我先列出来自百度百科关于这几个词的解释。\n开发环境：\n软件开发环境(Software Development Environment，SDE)是指在基本硬件和数字软件的基础上，为支持系统软件和应用软件的工程化开发和维护而使用的一组软件，简称SDE。它由软件工具和环境集成机制构成，前者用以支持软件开发的相关过程、活动和任务，后者为工具集成和软件的开发、维护及管理提供统一的支持。\nIDE：\n集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。\n编译器：\n简单讲，编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)。高级计算机语言便于人编写，阅读交流，维护。机器语言是计算机能直接解读、运行的。编译器将汇编或高级计算机语言源程序（Source program）作为输入，翻译成目标语言（Target language）机器代码的等价程序。源代码一般为高级语言 (High-level language)， 如Pascal、C、C++、Java、汉语编程等或汇编语言，而目标则是机器语言的目标代码（Object code），有时也称作机器代码（Machine code）。对于C#、VB等高级语言而言，此时编译器完成的功能是把源码（SourceCode）编译成通用中间语言（MSIL/CIL）的字节码（ByteCode）。最后运行的时候通过通用语言运行库的转换，编程最终可以被CPU直接计算的机器码（NativeCode）。\n其实百度百科对于这几个词条的解释已经很透彻了，但是对于一些刚接触程序的伙伴来说可能依然很难理解。简单点来说，以我们常见的JAVA语言为例，其实如果你想写一个程序，如果你的电脑里已经安装了JDK，那么其实你已经不需要任何其他的软件就可以实现一些功能。那有人会问，我看大家写JAVA都用eclipse或者intelliJ IDEA呀，没错，大家写JAVA大部分人都用eclipse或者intelliJ IDEA，但是要知道，那个软件叫IDE，或者说就是一个编辑器，一个简易版的eclipse是不会提供JDK的，JDK是需要我们自己单独安装的，这个JDK就是开发环境，你所编写好的代码，如果想编译和运行，就需要JDK这个开发环境所支持，而eclipse和intelliJ IDEA是提供让你编辑、调试、用JDK来编译程序用的，也就是说，你用什么编辑器并不影响你程序的编写，而这些编辑器是让你提高效率，方便调试用的，这些是可选的，而开发环境是必选的。\n二、Python开发环境\n好了，我们长篇大论说了这么多关于其他语言的事情，为的就是能让小伙伴们理解软件的关系，接下来我们好好聊聊Pyhton。\nPython其实和其他的编程语言还有点不太一样，它是一种脚本语言，就如同MATLAB语言一样，我们也可以管它叫解释型语言吧。因此，python的运行的过程中，和我们的传统语言，比如C、C++这种编译型语言不太一样，python的运行其实是一种解释的过程，因此它需要解释器，当然，这里我们不考虑把Python编译成可执行文件。如果想运行Python程序，那么必不可少的就是Python的开发环境。\nPython原版环境\n在Python官网，有提供Python的原版开发环境，该环境为最核心，也是“干净”或者说“纯净”的环境。Python开发环境下载地址：\nPython开发环境下载\nAnaconda：\nAnaconda其实属于一站式服务，里面集成了Python的运行环境，并集成了数百种库，此外该软件里面还有Anaconda Navigtor、Jupyter notebook、qtconsole和spyder等，由于集成的功能比较多，用起来相对来说省心一些。Anaconda下载地址：\nAnaconda Python/R Distribution - Anaconda\n一点小建议：\n对于Windows的小伙伴们来说，如果喜欢小巧、干净的开发环境，可以优先考虑Python的原版开发环境，如果需要Jupyter notebook和虚拟环境，可以单独用pip来安装。虚拟环境可以安装virtual environment。如果自己不喜欢折腾，喜欢一步到位的那种感觉，可以考虑使用Anaconda，会在开发中提供一定的方便。\n对于Linux的小伙伴来说，比较推荐Anaconda，因为Linux自带了Python，并且Linux中有很多依赖于Python的程序，如果对Python操作不慎，则会对系统的稳定性造成影响。如果比较熟悉Python，对Python的操作经验比较丰富，可以考虑不安装Anaconda，采用虚拟环境的开发方式进行开发。\n三、常用Python IDE介绍\n有了开发环境了，就需要有编辑器之类的软件。其实在安装Python开发环境的时候，就已经自带了一个编辑器，叫IDLE，不过老实讲，这个编辑器用起来真的不是很舒服，尤其是编辑比较庞大的工程的时候。而且，万能的记事本也可以编辑Python，但是我们肯定不能那么干。那么接下来就推荐几款可以编辑python的编辑器。\nnotepad++：\nNotepad++是 Windows操作系统下的一套文本编辑器(软件版权许可证: GPL)，有完整的中文化接口及支持多国语言编写的功能(UTF8技术)。Notepad++功能比 Windows 中的 Notepad(记事本)强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。Notepad++是免费软件，可以免费使用，自带中文，支持众多计算机程序语言: C,C++,Java,pascal,C#,XML,SQL,Ada,HTML,PHP,ASP, AutoIt, 汇编, DOS批处理, Caml, COBOL, Cmake, CSS,D, Diff, ActionScript, Fortran, Gui4Cli, Haskell, INNO, JSP, KIXtart, LISP, Lua, Make处理(Makefile), Matlab, INI文件, MS-DOS Style, NSIS, Normal text, Objective-C, Pascal,Python, Javascript,Verilog,Haskell,InnoSetup,CMake,VHDL,Matlab。\nnotepad++的下载地址：\nNotepad++ Home\nPyCharm：\nPyCharm是一种Python  IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。PyCharm在编写和调试Python方面可谓是强者，软件使用简单，功能强大，值得推荐。\nPyCharm下载地址：\nPyCharm: Python IDE for Professional Developers by JetBrains\n该软件Pro版本为付费软件，如果想免费使用，可以使用社区版。如果你有学校的邮箱，那么你还可以学生版来免费使用，幸运的是，学生版可以体验到专业版的功能。\nVS Code：\nVisual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。这个软件太漂亮了，我忍不住要放一张图。\nVS Code软件截图\nVS Code下载地址：\nVisual Studio Code - Code Editing. Redefined\nSublime Text 3：\n类似于VS Code，Sublime Text同样具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux和Mac OS等操作系统。\nSublime Text 3下载地址：\nhttp://www.\nsublimetext.com/\nAtom：\nAtom 是github专门为程序员推出的一个跨平台文本编辑器。具有简洁和直观的图形用户界面，并有很多有趣的特点，并且支持包含Python在内的众多语言。它支持宏，自动完成分屏功能，集成了文件管理器。\nAtom下载地址：\nA hackable text editor for the 21st Century\nEclipse：\nEclipse 是一个开放源代码的、基于Java的可扩展开发平台。就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。幸运的是，Eclipse 附带了一个标准的插件集，包括Java开发工具（Java Development Kit，JDK）。Eclipse并不限于编写JAVA，它也可以编写C、python等程序。\nEclipse下载地址：\nEclipse Downloads | The Eclipse Foundation\n四、Python IDE推荐及一些小建议\n市面上Python IDE有很多，每个IDE都有自己的特点和长处，只有选择适合自己的IDE，开发才会得心应手，事半功倍。\n对于小萌新们来说，Pycharm绝对是不二的选择，Pycharm功能齐全，界面友好，现已有民间汉化包，无论是在代码分析上，还是在环境安装上，Pycharm都给提供了方便的解决方案，免去了很多折腾环境的麻烦，尽可能把复杂的事情交给IDE来完成。\n但是Pycharm有个很致命的缺点，由于功能过于强大，界面也过于华丽，Pycharm对电脑配置的要求很高，动不动内存就会上1G，所以对于有经验的开发人员来说，VS code、Sublime和Atom等软件成为了重要的工具。这些软件十分开放，经过精心的配置和第三方插件的加持，功能也很强大。但是这些软件配置并不简单，所以很适合有经验的伙伴，对于小萌新们来说，不是很友好。\nNotepad++说是代码编辑器，其实我觉得它更像是一个阅读器或者是一个十分轻巧的修改工具。因为它的轻巧，所以查看代码和做一些简单修改会变得十分方便。如果为了开发，还是优先考虑VS code、Sublime和Atom等软件为好。\n至于Eclipse，我想我们还是逐渐淡忘它吧，新事物的诞生，旧事物的淘汰，这是亘古不变的话题。新工具的出现，在一定程度上会弥补经典工具的缺陷。对于一些怀旧的伙伴来说，如果能找到一些开发上的解决方案，倒也可以享受经典工具打来的乐趣。不过适应新鲜的事物，不断提升自己的工作效率，不也是一件好事么？\n希望这些对想入坑的伙伴们有所帮助，让我们一起共同学习，共同成长。"},
{"title": "Python有做大型游戏的潜力吗？", "description": "NeoX 和 Messiah，都使用 Python 作为脚本语言。 你最近所了解的比较火的挂着猪厂旗号的，也都是 Python 写的。 一些项目组甚至不需要分出人力去维护引擎部分", "article": "岂止是有潜力，简直是很合适！\n猪厂两大游戏客户端引擎，NeoX 和 Messiah，都使用 Python 作为脚本语言。\n你最近所了解的比较火的挂着猪厂旗号的，也都是 Python 写的。\n一些项目组甚至不需要分出人力去维护引擎部分，因为引擎本身比较稳。\n也就是说，程序绝大部分时间都可以专注用 Python 写逻辑，保持创造力。\n还有就是 Python 写各种工具，编辑器，不是一般的爽。PyQt 在手天下我有。\n还能和项目代码无缝衔接。\n————————\n服务端：\n也是纯 Python。\n因此很多代码可以服务端客户端共用，尤其是数据结构定义，序列化等。\n用过的才知道前后端用同一种语言有多方便。\n同一套 Excel 配表，用 Python 写的工具转成 py 文件，然后服务端和客户端都用这个。\n同一个类，服务端用，客户端也用，还需要啥数据格式转换啊（滑稽）。\n————————\n效率问题：\n运行效率大部分情况下都不是问题，开发效率却可以提升几个数量级。\n————————\n静态类型语言 vs 动态类型语言：\n这是个有争议的话题。\n个人看法这是一种 trade-off，牺牲逻辑的严谨性，以及架构，来换取开发效率。\n这样做当然很多弊端，只是在目前这个阶段，开发效率比什么都重要，真的。\n（项目组都要解散了你跟我说你的代码更好看？）\n————————\n多线程：\n客户端逻辑没有必要。\n游戏项目从来都不是计算密集型的，逻辑本来就够复杂了，多线程会进一步增加复杂度，得不偿失。\n（一般情况下不需要，要用的话祝你好运）\n————————\nHotfix：\n网络游戏正在逐渐成为一种服务，成为每个人的日常娱乐方式。\n服务的稳定也变得越来越重要，如果隔三差五就得停服修bug，客户端动不动就得整包更新，会严重影响玩家体验。\n而用 Python 进行热更是语言原生支持的，意味着实现成本很低，风险低，操作也很方便。\n————————\n最后的废话：\n不要想当然，不要听风就是雨，实践出真知。"},
{"title": "Python对微信好友进行简单统计分析", "description": "以下的代码内容只涉及一些简单的Python知识，稍微有一点Python知识的朋友都可以读下去。 如果你没有Python的知识你可能需要去学习一下Python，当然你也可以不用学", "article": "早些日子有人问我我的微信里面有一共多少朋友，我就随后拉倒了通讯录最下面就找到了微信一共有多少位好友。然后他又问我，这里面你认识多少人？这一句话问的我很无语。一千多个好友我真的不知道认识的人有多少。他还紧追着不放了，你知道你微信朋友的男女比例嘛？你知道你微信朋友大部分来自什么地方吗？\n不知道不知道不知道！偶然有一天碰到大大的一条朋友圈，大概是对微信朋友做一个分析，于是乎我才想起我也可以做一些简单的统计，于是就有了今天的内容。今天的内容会以代码简单讲解结果展示为向导。\n 以下的代码内容只涉及一些简单的Python知识，稍微有一点Python知识的朋友都可以读下去。 如果你没有Python的知识你可能需要去学习一下Python，当然你也可以不用学，搭建好Python的环境就好，期间可能需要用到一些库需要自己去解决一下，在下文中也会详细诉述。\n编程零基础应当如何开始学习 Python ？ - 路人甲的回答\n网易云课堂上有哪些值得推荐的 Python 教程？ - 路人甲的回答\n如何学习Python爬虫[入门篇] - 学习编程 - 知乎专栏\n 第一步：首先抓取微信朋友的资料\n既然是要做统计和分析，第一步就是微信朋友的所有可以抓取的资料抓取出来。所谓有用的资料大致来说有以下几个内容：\n昵称、微信号、城市、性别、星标好友、头像、个性签名、备注\n每一项或者联合项可以做的统计\n性别：好友性别统计\n城市：好友地区分布\n备注+昵称：大致统计认识的好友比例\n头像：人脸识别\n那么如何抓取呢？这里使用了之前有一位大神写的如何找出被删的好友的代码，修改部分为从提取json数据截断，对返回的json数据进行提取分别找到了以下的所需要的信息： \n代码修改为： \n#!/usr/bin/env python\n\n\n# encoding=utf-8\n\n\nfrom\n \n__future__\n \nimport\n \nprint_function\n\n\n\nimport\n \nos\n\n\nimport\n \nrequests\n\n\nimport\n \nre\n\n\nimport\n \ntime\n\n\nimport\n \nxml.dom.minidom\n\n\nimport\n \njson\n\n\nimport\n \nsys\n\n\nimport\n \nmath\n\n\nimport\n \nsubprocess\n\n\nimport\n \nssl\n\n\nimport\n \nthreading\n\n\nimport\n \nurllib\n,\nurllib2\n\n\n\n\nDEBUG\n \n=\n \nFalse\n\n\n\nMAX_GROUP_NUM\n \n=\n \n2\n  \n# 每组人数\n\n\nINTERFACE_CALLING_INTERVAL\n \n=\n \n5\n  \n# 接口调用时间间隔, 间隔太短容易出现\"操作太频繁\", 会被限制操作半小时左右\n\n\nMAX_PROGRESS_LEN\n \n=\n \n50\n\n\n\nQRImagePath\n \n=\n \nos\n.\npath\n.\njoin\n(\nos\n.\ngetcwd\n(),\n \n'qrcode.jpg'\n)\n\n\n\ntip\n \n=\n \n0\n\n\nuuid\n \n=\n \n''\n\n\n\nbase_uri\n \n=\n \n''\n\n\nredirect_uri\n \n=\n \n''\n\n\npush_uri\n \n=\n \n''\n\n\n\nskey\n \n=\n \n''\n\n\nwxsid\n \n=\n \n''\n\n\nwxuin\n \n=\n \n''\n\n\npass_ticket\n \n=\n \n''\n\n\ndeviceId\n \n=\n \n'e000000000000000'\n\n\n\nBaseRequest\n \n=\n \n{}\n\n\n\nContactList\n \n=\n \n[]\n\n\nMy\n \n=\n \n[]\n\n\nSyncKey\n \n=\n \n[]\n\n\n\ntry\n:\n\n    \nxrange\n\n    \nrange\n \n=\n \nxrange\n\n\nexcept\n:\n\n    \n# python 3\n\n    \npass\n\n\n\n\ndef\n \nresponseState\n(\nfunc\n,\n \nBaseResponse\n):\n\n    \nErrMsg\n \n=\n \nBaseResponse\n[\n'ErrMsg'\n]\n\n    \nRet\n \n=\n \nBaseResponse\n[\n'Ret'\n]\n\n    \nif\n \nDEBUG\n \nor\n \nRet\n \n!=\n \n0\n:\n\n        \nprint\n(\n'func: \n%s\n, Ret: \n%d\n, ErrMsg: \n%s\n'\n \n%\n \n(\nfunc\n,\n \nRet\n,\n \nErrMsg\n))\n\n\n    \nif\n \nRet\n \n!=\n \n0\n:\n\n        \nreturn\n \nFalse\n\n\n    \nreturn\n \nTrue\n\n\n\n\n\ndef\n \ngetUUID\n():\n\n    \nglobal\n \nuuid\n\n\n    \nurl\n \n=\n \n'https://login.weixin.qq.com/jslogin'\n\n    \nparams\n \n=\n \n{\n\n        \n'appid'\n:\n \n'wx782c26e4c19acffb'\n,\n\n        \n'fun'\n:\n \n'new'\n,\n\n        \n'lang'\n:\n \n'zh_CN'\n,\n\n        \n'_'\n:\n \nint\n(\ntime\n.\ntime\n()),\n\n    \n}\n\n\n    \nr\n=\n \nmyRequests\n.\nget\n(\nurl\n=\nurl\n,\n \nparams\n=\nparams\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\ntext\n\n\n    \n# print(data)\n\n\n    \n# window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";\n\n    \nregx\n \n=\n \nr\n'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n\n    \npm\n \n=\n \nre\n.\nsearch\n(\nregx\n,\n \ndata\n)\n\n\n    \ncode\n \n=\n \npm\n.\ngroup\n(\n1\n)\n\n    \nuuid\n \n=\n \npm\n.\ngroup\n(\n2\n)\n\n\n    \nif\n \ncode\n \n==\n \n'200'\n:\n\n        \nreturn\n \nTrue\n\n\n    \nreturn\n \nFalse\n\n\n\n\ndef\n \nshowQRImage\n():\n\n    \nglobal\n \ntip\n\n\n    \nurl\n \n=\n \n'https://login.weixin.qq.com/qrcode/'\n \n+\n \nuuid\n\n    \nparams\n \n=\n \n{\n\n        \n't'\n:\n \n'webwx'\n,\n\n        \n'_'\n:\n \nint\n(\ntime\n.\ntime\n()),\n\n    \n}\n\n\n    \nr\n \n=\n \nmyRequests\n.\nget\n(\nurl\n=\nurl\n,\n \nparams\n=\nparams\n)\n\n\n    \ntip\n \n=\n \n1\n\n\n    \nf\n \n=\n \nopen\n(\nQRImagePath\n,\n \n'wb'\n)\n\n    \nf\n.\nwrite\n(\nr\n.\ncontent\n)\n\n    \nf\n.\nclose\n()\n\n    \ntime\n.\nsleep\n(\n1\n)\n\n\n    \nif\n \nsys\n.\nplatform\n.\nfind\n(\n'darwin'\n)\n \n>=\n \n0\n:\n\n        \nsubprocess\n.\ncall\n([\n'open'\n,\n \nQRImagePath\n])\n\n    \nelse\n:\n\n        \nsubprocess\n.\ncall\n([\n'xdg-open'\n,\n \nQRImagePath\n])\n\n\n    \nprint\n(\n'请使用微信扫描二维码以登录'\n)\n\n\n\n\ndef\n \nwaitForLogin\n():\n\n    \nglobal\n \ntip\n,\n \nbase_uri\n,\n \nredirect_uri\n,\n \npush_uri\n\n\n    \nurl\n \n=\n \n'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=\n%s\n&uuid=\n%s\n&_=\n%s\n'\n \n%\n \n(\n\n        \ntip\n,\n \nuuid\n,\n \nint\n(\ntime\n.\ntime\n()))\n\n\n    \nr\n \n=\n \nmyRequests\n.\nget\n(\nurl\n=\nurl\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\ntext\n\n\n    \n# print(data)\n\n\n    \n# window.code=500;\n\n    \nregx\n \n=\n \nr\n'window.code=(\\d+);'\n\n    \npm\n \n=\n \nre\n.\nsearch\n(\nregx\n,\n \ndata\n)\n\n\n    \ncode\n \n=\n \npm\n.\ngroup\n(\n1\n)\n\n\n    \nif\n \ncode\n \n==\n \n'201'\n:\n  \n# 已扫描\n\n        \nprint\n(\n'成功扫描,请在手机上点击确认以登录'\n)\n\n        \ntip\n \n=\n \n0\n\n    \nelif\n \ncode\n \n==\n \n'200'\n:\n  \n# 已登录\n\n        \nprint\n(\n'正在登录...'\n)\n\n        \nregx\n \n=\n \nr\n'window.redirect_uri=\"(\\S+?)\";'\n\n        \npm\n \n=\n \nre\n.\nsearch\n(\nregx\n,\n \ndata\n)\n\n        \nredirect_uri\n \n=\n \npm\n.\ngroup\n(\n1\n)\n \n+\n \n'&fun=new'\n\n        \nbase_uri\n \n=\n \nredirect_uri\n[:\nredirect_uri\n.\nrfind\n(\n'/'\n)]\n\n\n        \n# push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)\n\n        \nservices\n \n=\n \n[\n\n            \n(\n'wx2.qq.com'\n,\n \n'webpush2.weixin.qq.com'\n),\n\n            \n(\n'qq.com'\n,\n \n'webpush.weixin.qq.com'\n),\n\n            \n(\n'web1.wechat.com'\n,\n \n'webpush1.wechat.com'\n),\n\n            \n(\n'web2.wechat.com'\n,\n \n'webpush2.wechat.com'\n),\n\n            \n(\n'wechat.com'\n,\n \n'webpush.wechat.com'\n),\n\n            \n(\n'web1.wechatapp.com'\n,\n \n'webpush1.wechatapp.com'\n),\n\n        \n]\n\n        \npush_uri\n \n=\n \nbase_uri\n\n        \nfor\n \n(\nsearchUrl\n,\n \npushUrl\n)\n \nin\n \nservices\n:\n\n            \nif\n \nbase_uri\n.\nfind\n(\nsearchUrl\n)\n \n>=\n \n0\n:\n\n                \npush_uri\n \n=\n \n'https://\n%s\n/cgi-bin/mmwebwx-bin'\n \n%\n \npushUrl\n\n                \nbreak\n\n\n        \n# closeQRImage\n\n        \nif\n \nsys\n.\nplatform\n.\nfind\n(\n'darwin'\n)\n \n>=\n \n0\n:\n  \n# for OSX with Preview\n\n            \nos\n.\nsystem\n(\n\"osascript -e 'quit app \n\\\"\nPreview\n\\\"\n'\"\n)\n\n    \nelif\n \ncode\n \n==\n \n'408'\n:\n  \n# 超时\n\n        \npass\n\n    \n# elif code == '400' or code == '500':\n\n\n    \nreturn\n \ncode\n\n\n\n\ndef\n \nlogin\n():\n\n    \nglobal\n \nskey\n,\n \nwxsid\n,\n \nwxuin\n,\n \npass_ticket\n,\n \nBaseRequest\n\n\n    \nr\n \n=\n \nmyRequests\n.\nget\n(\nurl\n=\nredirect_uri\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\ntext\n\n\n    \n# print(data)\n\n\n    \ndoc\n \n=\n \nxml\n.\ndom\n.\nminidom\n.\nparseString\n(\ndata\n)\n\n    \nroot\n \n=\n \ndoc\n.\ndocumentElement\n\n\n    \nfor\n \nnode\n \nin\n \nroot\n.\nchildNodes\n:\n\n        \nif\n \nnode\n.\nnodeName\n \n==\n \n'skey'\n:\n\n            \nskey\n \n=\n \nnode\n.\nchildNodes\n[\n0\n]\n.\ndata\n\n        \nelif\n \nnode\n.\nnodeName\n \n==\n \n'wxsid'\n:\n\n            \nwxsid\n \n=\n \nnode\n.\nchildNodes\n[\n0\n]\n.\ndata\n\n        \nelif\n \nnode\n.\nnodeName\n \n==\n \n'wxuin'\n:\n\n            \nwxuin\n \n=\n \nnode\n.\nchildNodes\n[\n0\n]\n.\ndata\n\n        \nelif\n \nnode\n.\nnodeName\n \n==\n \n'pass_ticket'\n:\n\n            \npass_ticket\n \n=\n \nnode\n.\nchildNodes\n[\n0\n]\n.\ndata\n\n\n    \n# print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,\n\n    \n# wxuin, pass_ticket))\n\n\n    \nif\n \nnot\n \nall\n((\nskey\n,\n \nwxsid\n,\n \nwxuin\n,\n \npass_ticket\n)):\n\n        \nreturn\n \nFalse\n\n\n    \nBaseRequest\n \n=\n \n{\n\n        \n'Uin'\n:\n \nint\n(\nwxuin\n),\n\n        \n'Sid'\n:\n \nwxsid\n,\n\n        \n'Skey'\n:\n \nskey\n,\n\n        \n'DeviceID'\n:\n \ndeviceId\n,\n\n    \n}\n\n\n    \nreturn\n \nTrue\n\n\n\n\ndef\n \nwebwxinit\n():\n\n\n    \nurl\n \n=\n \n(\nbase_uri\n \n+\n \n        \n'/webwxinit?pass_ticket=\n%s\n&skey=\n%s\n&r=\n%s\n'\n \n%\n \n(\n\n            \npass_ticket\n,\n \nskey\n,\n \nint\n(\ntime\n.\ntime\n()))\n \n)\n\n    \nparams\n  \n=\n \n{\n'BaseRequest'\n:\n \nBaseRequest\n \n}\n\n    \nheaders\n \n=\n \n{\n'content-type'\n:\n \n'application/json; charset=UTF-8'\n}\n\n\n    \nr\n \n=\n \nmyRequests\n.\npost\n(\nurl\n=\nurl\n,\n \ndata\n=\njson\n.\ndumps\n(\nparams\n),\nheaders\n=\nheaders\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\njson\n()\n\n\n    \nif\n \nDEBUG\n:\n\n        \nf\n \n=\n \nopen\n(\nos\n.\npath\n.\njoin\n(\nos\n.\ngetcwd\n(),\n \n'webwxinit.json'\n),\n \n'wb'\n)\n\n        \nf\n.\nwrite\n(\nr\n.\ncontent\n)\n\n        \nf\n.\nclose\n()\n\n\n\n    \n# print(data)\n\n\n    \nglobal\n \nContactList\n,\n \nMy\n,\n \nSyncKey\n\n    \ndic\n \n=\n \ndata\n\n    \nContactList\n \n=\n \ndic\n[\n'ContactList'\n]\n\n    \nMy\n \n=\n \ndic\n[\n'User'\n]\n\n    \nSyncKey\n \n=\n \ndic\n[\n'SyncKey'\n]\n\n\n    \nstate\n \n=\n \nresponseState\n(\n'webwxinit'\n,\n \ndic\n[\n'BaseResponse'\n])\n\n    \nreturn\n \nstate\n\n\n\n\ndef\n \nwebwxgetcontact\n():\n\n\n    \nurl\n \n=\n \n(\nbase_uri\n \n+\n \n        \n'/webwxgetcontact?pass_ticket=\n%s\n&skey=\n%s\n&r=\n%s\n'\n \n%\n \n(\n\n            \npass_ticket\n,\n \nskey\n,\n \nint\n(\ntime\n.\ntime\n()))\n \n)\n\n    \nheaders\n \n=\n \n{\n'content-type'\n:\n \n'application/json; charset=UTF-8'\n}\n\n\n\n    \nr\n \n=\n \nmyRequests\n.\npost\n(\nurl\n=\nurl\n,\nheaders\n=\nheaders\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\njson\n()\n\n\n    \nif\n \nDEBUG\n:\n\n        \nf\n \n=\n \nopen\n(\nos\n.\npath\n.\njoin\n(\nos\n.\ngetcwd\n(),\n \n'webwxgetcontact.json'\n),\n \n'wb'\n)\n\n        \nf\n.\nwrite\n(\nr\n.\ncontent\n)\n\n        \nf\n.\nclose\n()\n\n\n\n    \ndic\n \n=\n \ndata\n\n    \nMemberList\n \n=\n \ndic\n[\n'MemberList'\n]\n\n\n    \n# 倒序遍历,不然删除的时候出问题..\n\n    \nSpecialUsers\n \n=\n \n[\n\"newsapp\"\n,\n \n\"fmessage\"\n,\n \n\"filehelper\"\n,\n \n\"weibo\"\n,\n \n\"qqmail\"\n,\n \n\"tmessage\"\n,\n \n\"qmessage\"\n,\n \n\"qqsync\"\n,\n \n\"floatbottle\"\n,\n \n\"lbsapp\"\n,\n \n\"shakeapp\"\n,\n \n\"medianote\"\n,\n \n\"qqfriend\"\n,\n \n\"readerapp\"\n,\n \n\"blogapp\"\n,\n \n\"facebookapp\"\n,\n \n\"masssendapp\"\n,\n\n                    \n\"meishiapp\"\n,\n \n\"feedsapp\"\n,\n \n\"voip\"\n,\n \n\"blogappweixin\"\n,\n \n\"weixin\"\n,\n \n\"brandsessionholder\"\n,\n \n\"weixinreminder\"\n,\n \n\"wxid_novlwrv3lqwv11\"\n,\n \n\"gh_22b87fa7cb3c\"\n,\n \n\"officialaccounts\"\n,\n \n\"notification_messages\"\n,\n \n\"wxitil\"\n,\n \n\"userexperience_alarm\"\n]\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nMemberList\n)\n \n-\n \n1\n,\n \n-\n1\n,\n \n-\n1\n):\n\n        \nMember\n \n=\n \nMemberList\n[\ni\n]\n\n        \nif\n \nMember\n[\n'VerifyFlag'\n]\n \n&\n \n8\n \n!=\n \n0\n:\n  \n# 公众号/服务号\n\n            \nMemberList\n.\nremove\n(\nMember\n)\n\n        \nelif\n \nMember\n[\n'UserName'\n]\n \nin\n \nSpecialUsers\n:\n  \n# 特殊账号\n\n            \nMemberList\n.\nremove\n(\nMember\n)\n\n        \nelif\n \nMember\n[\n'UserName'\n]\n.\nfind\n(\n'@@'\n)\n \n!=\n \n-\n1\n:\n  \n# 群聊\n\n            \nMemberList\n.\nremove\n(\nMember\n)\n\n        \nelif\n \nMember\n[\n'UserName'\n]\n \n==\n \nMy\n[\n'UserName'\n]:\n  \n# 自己\n\n            \nMemberList\n.\nremove\n(\nMember\n)\n\n\n    \nreturn\n \nMemberList\n\n\n\n\ndef\n \nsyncKey\n():\n\n    \nSyncKeyItems\n \n=\n \n[\n'\n%s\n_\n%s\n'\n \n%\n \n(\nitem\n[\n'Key'\n],\n \nitem\n[\n'Val'\n])\n\n                    \nfor\n \nitem\n \nin\n \nSyncKey\n[\n'List'\n]]\n\n    \nSyncKeyStr\n \n=\n \n'|'\n.\njoin\n(\nSyncKeyItems\n)\n\n    \nreturn\n \nSyncKeyStr\n\n\n\n\ndef\n \nsyncCheck\n():\n\n    \nurl\n \n=\n \npush_uri\n \n+\n \n'/synccheck?'\n\n    \nparams\n \n=\n \n{\n\n        \n'skey'\n:\n \nBaseRequest\n[\n'Skey'\n],\n\n        \n'sid'\n:\n \nBaseRequest\n[\n'Sid'\n],\n\n        \n'uin'\n:\n \nBaseRequest\n[\n'Uin'\n],\n\n        \n'deviceId'\n:\n \nBaseRequest\n[\n'DeviceID'\n],\n\n        \n'synckey'\n:\n \nsyncKey\n(),\n\n        \n'r'\n:\n \nint\n(\ntime\n.\ntime\n()),\n\n    \n}\n\n\n    \nr\n \n=\n \nmyRequests\n.\nget\n(\nurl\n=\nurl\n,\nparams\n=\nparams\n)\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\ntext\n\n\n    \n# print(data)\n\n\n    \n# window.synccheck={retcode:\"0\",selector:\"2\"}\n\n    \nregx\n \n=\n \nr\n'window.synccheck={retcode:\"(\\d+)\",selector:\"(\\d+)\"}'\n\n    \npm\n \n=\n \nre\n.\nsearch\n(\nregx\n,\n \ndata\n)\n\n\n    \nretcode\n \n=\n \npm\n.\ngroup\n(\n1\n)\n\n    \nselector\n \n=\n \npm\n.\ngroup\n(\n2\n)\n\n\n    \nreturn\n \nselector\n\n\n\n\ndef\n \nwebwxsync\n():\n\n    \nglobal\n \nSyncKey\n\n\n    \nurl\n \n=\n \nbase_uri\n \n+\n \n'/webwxsync?lang=zh_CN&skey=\n%s\n&sid=\n%s\n&pass_ticket=\n%s\n'\n \n%\n \n(\n\n        \nBaseRequest\n[\n'Skey'\n],\n \nBaseRequest\n[\n'Sid'\n],\n \nurllib\n.\nquote_plus\n(\npass_ticket\n))\n\n    \nparams\n \n=\n \n{\n\n        \n'BaseRequest'\n:\n \nBaseRequest\n,\n\n        \n'SyncKey'\n:\n \nSyncKey\n,\n\n        \n'rr'\n:\n \n~\nint\n(\ntime\n.\ntime\n()),\n\n    \n}\n\n    \nheaders\n \n=\n \n{\n'content-type'\n:\n \n'application/json; charset=UTF-8'\n}\n\n\n    \nr\n \n=\n \nmyRequests\n.\npost\n(\nurl\n=\nurl\n,\n \ndata\n=\njson\n.\ndumps\n(\nparams\n))\n\n    \nr\n.\nencoding\n \n=\n \n'utf-8'\n\n    \ndata\n \n=\n \nr\n.\njson\n()\n\n\n    \n# print(data)\n\n\n    \ndic\n \n=\n \ndata\n\n    \nSyncKey\n \n=\n \ndic\n[\n'SyncKey'\n]\n\n\n    \nstate\n \n=\n \nresponseState\n(\n'webwxsync'\n,\n \ndic\n[\n'BaseResponse'\n])\n\n    \nreturn\n \nstate\n\n\n\n\ndef\n \nheartBeatLoop\n():\n\n    \nwhile\n \nTrue\n:\n\n        \nselector\n \n=\n \nsyncCheck\n()\n\n        \nif\n \nselector\n \n!=\n \n'0'\n:\n\n            \nwebwxsync\n()\n\n        \ntime\n.\nsleep\n(\n1\n)\n\n\n\n\ndef\n \nmain\n():\n\n    \nglobal\n \nmyRequests\n\n    \n    \nif\n \nhasattr\n(\nssl\n,\n \n'_create_unverified_context'\n):\n\n        \nssl\n.\n_create_default_https_context\n \n=\n \nssl\n.\n_create_unverified_context\n\n\n    \nheaders\n \n=\n \n{\n'User-agent'\n:\n \n'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'\n}\n\n    \nmyRequests\n \n=\n \nrequests\n.\nSession\n()\n\n    \nmyRequests\n.\nheaders\n.\nupdate\n(\nheaders\n)\n\n\n\n    \nif\n \nnot\n \ngetUUID\n():\n\n        \nprint\n(\n'获取uuid失败'\n)\n\n        \nreturn\n\n\n    \nprint\n(\n'正在获取二维码图片...'\n)\n\n    \nshowQRImage\n()\n\n\n    \nwhile\n \nwaitForLogin\n()\n \n!=\n \n'200'\n:\n\n        \npass\n\n\n    \nos\n.\nremove\n(\nQRImagePath\n)\n\n\n    \nif\n \nnot\n \nlogin\n():\n\n        \nprint\n(\n'登录失败'\n)\n\n        \nreturn\n\n\n    \nif\n \nnot\n \nwebwxinit\n():\n\n        \nprint\n(\n'初始化失败'\n)\n\n        \nreturn\n\n\n    \nMemberList\n \n=\n \nwebwxgetcontact\n()\n\n\n    \nthreading\n.\nThread\n(\ntarget\n=\nheartBeatLoop\n)\n\n\n    \nMemberCount\n \n=\n \nlen\n(\nMemberList\n)\n\n    \nprint\n(\n'通讯录共\n%s\n位好友'\n \n%\n \nMemberCount\n)\n\n\n    \nd\n \n=\n \n{}\n\n    \nimageIndex\n \n=\n \n0\n\n    \nfor\n \nMember\n \nin\n \nMemberList\n:\n\n        \nimageIndex\n \n=\n \nimageIndex\n \n+\n \n1\n\n        \nname\n \n=\n \n'/root/Desktop/friendImage/image'\n+\nstr\n(\nimageIndex\n)\n+\n'.jpg'\n\n        \nimageUrl\n \n=\n \n'https://wx.qq.com'\n+\nMember\n[\n'HeadImgUrl'\n]\n\n        \nr\n \n=\n \nmyRequests\n.\nget\n(\nurl\n=\nimageUrl\n,\nheaders\n=\nheaders\n)\n\n        \nimageContent\n \n=\n \n(\nr\n.\ncontent\n)\n\n        \nfileImage\n \n=\n \nopen\n(\nname\n,\n'wb'\n)\n\n        \nfileImage\n.\nwrite\n(\nimageContent\n)\n\n        \nfileImage\n.\nclose\n()\n\n        \nprint\n(\n'正在下载第：'\n+\nstr\n(\nimageIndex\n)\n+\n'位好友头像'\n)\n\n        \nd\n[\nMember\n[\n'UserName'\n]]\n \n=\n \n(\nMember\n[\n'NickName'\n],\n \nMember\n[\n'RemarkName'\n])\n\n        \ncity\n \n=\n \nMember\n[\n'City'\n]\n\n        \ncity\n \n=\n \n'nocity'\n \nif\n \ncity\n \n==\n \n''\n \nelse\n  \ncity\n\n        \nname\n \n=\n \nMember\n[\n'NickName'\n]\n\n        \nname\n \n=\n \n'noname'\n \nif\n \nname\n \n==\n \n''\n \nelse\n  \nname\n\n        \nsign\n \n=\n \nMember\n[\n'Signature'\n]\n\n        \nsign\n \n=\n \n'nosign'\n \nif\n \nsign\n \n==\n \n''\n \nelse\n  \nsign\n\n        \nremark\n \n=\n \nMember\n[\n'RemarkName'\n]\n\n        \nremark\n \n=\n \n'noremark'\n \nif\n \nremark\n \n==\n \n''\n \nelse\n \nremark\n\n        \nalias\n \n=\n \nMember\n[\n'Alias'\n]\n\n        \nalias\n \n=\n \n'noalias'\n \nif\n \nalias\n \n==\n \n''\n \nelse\n \nalias\n\n        \nnick\n \n=\n \nMember\n[\n'NickName'\n]\n\n        \nnick\n \n=\n \n'nonick'\n \nif\n \nnick\n \n==\n \n''\n \nelse\n \nnick\n\n        \nprint\n(\nname\n,\n'  ^+*+^  '\n,\ncity\n,\n'  ^+*+^  '\n,\nMember\n[\n'Sex'\n],\n' ^+*+^ '\n,\nMember\n[\n'StarFriend'\n],\n' ^+*+^ '\n,\nsign\n,\n' ^+*+^ '\n,\nremark\n,\n' ^+*+^ '\n,\nalias\n,\n' ^+*+^ '\n,\nnick\n \n)\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n\n    \nmain\n()\n\n    \nprint\n(\n'回车键退出...'\n)\n\n    \ninput\n()\n\n\n\n所返回的json结果如下图所示\n昵称、微信号、城市、性别、星标好友、头像、个性签名、备注。提取以上信息，对头像图片进行下载，并对数据进行简单的清洗等等，最后一列为微信号不方便显示。\n第二步：性别统计和地区分布\n使用python的pandas科学计算库进行简单的统计，如果你没有用过，可以转至如下链接进行安装学习：\n【原】十分钟搞定pandas\n只要掌握了非常简单的pandas只是就可以继续往下看做以下统计\n（1）、所有好友的男女比例\n（2）、所有好友的城市分布\n（3）、统计认识的朋友以及占所有朋友的百分比\n             统计方法：所有朋友  - 没有备注的朋友  - 备注与昵称相同的朋友\n（4）、统计认识的朋友中的男女比例\n             统计方法：对三的结果再进行男女划分即可得到结果\n#-*- coding: UTF-8 -*-  \n\n\nimport\n \npandas\n \nas\n \npd\n\n\ndf\n \n=\n \npd\n.\nread_csv\n(\n'/root/Desktop/friend02.csv'\n)\n\n\n\ndef\n \ncity\n():\n\n    \n'''微信朋友圈的城市'''\n\n    \naddress\n \n=\n \ndf\n[\n'city'\n]\n.\nvalue_counts\n()\n\n    \nprint\n \naddress\n\n    \n\ndef\n \ngender\n():\n\n    \n'''微信朋友的性别比例\n\n        1:男  2：女   3：未知\n\n    '''\n\n    \ngender\n \n=\n \ndf\n[\n'male'\n]\n.\nvalue_counts\n()\n\n    \nprint\n \ngender\n\n    \n\ndef\n \nstar\n():\n\n    \n'''星标好友\n\n        1:星标   0：非星标\n\n    '''\n\n    \nstar\n \n=\n \ndf\n[\n'star'\n]\n.\nvalue_counts\n()\n\n    \nprint\n \nstar\n\n    \n\ndef\n \nremark\n():\n\n    \nremark\n \n=\n \ndf\n[\n'remark'\n]\n\n    \nname\n \n=\n \ndf\n[\n'name'\n]\n\n    \n    \nremarkCount\n \n=\n \n0\n\n    \nmaleCount\n \n=\n \n0\n\n    \nfemaleCount\n \n=\n \n0\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n1\n,\nlen\n(\nremark\n)):\n\n        \nif\n \nstr\n(\nremark\n[\ni\n])\n.\nstrip\n()\n \n==\n \nstr\n(\nname\n[\ni\n])\n.\nstrip\n()\n \nor\n \nremark\n[\ni\n]\n \n==\n \n'  noremark  '\n:\n\n            \nremarkCount\n \n=\n \nremarkCount\n \n+\n \n1\n\n        \nelse\n:\n\n            \nif\n \njudgeGender\n(\ni\n)\n \n==\n \n'male'\n:\n\n                \nmaleCount\n \n=\n \nmaleCount\n \n+\n \n1\n\n            \nelif\n \njudgeGender\n(\ni\n)\n \n==\n \n'female'\n:\n\n                \nfemaleCount\n \n=\n \nfemaleCount\n \n+\n \n1\n\n    \nprint\n \n'微信总朋友人数：'\n,\nstr\n(\nlen\n(\nremark\n)),\n'\n\\n\n'\n\n    \nprint\n \n'预计认识的总人数：'\n,\nstr\n(\nlen\n(\nremark\n)\n-\nremarkCount\n),\n'\n\\n\n'\n\n    \nprint\n \n'认识的人中汉子人数：'\n,\nmaleCount\n,\n'妹子人数：'\n,\nfemaleCount\n\n\n\ndef\n \njudgeGender\n(\nindex\n):\n\n    \n'''判断传入的某个位置的用户的性别\n\n        参数：int行\n\n        返回结果：字符串\n\n    '''\n\n    \ngender\n \n=\n \ndf\n[\n'gender'\n]\n\n    \nif\n \ngender\n[\nindex\n]\n \n==\n \n'1'\n:\n\n        \nreturn\n \n'male'\n\n    \nelif\n \ngender\n[\nindex\n]\n \n==\n \n'2'\n:\n\n        \nreturn\n \n'female'\n\n    \nelse\n:\n\n        \nreturn\n \n'unknown'\n \n\n\nif\n \n__name__\n==\n'__main__'\n:\n\n    \nremark\n()\n把结果做成简单的图表（主要使用了百度的echarts作图）（不得不说百度其他产品虽然不怎么样，但是百度的echarts还是不错的哟，他的官网：\nhttp://\necharts.baidu.com/\n）\n使用地图慧江苏省好友分布，这个编码我不知怎么回事，可能是浏览器问题，回头我用其它浏览器查看一下。（地图汇比较傻瓜：\nhttp://www.\ndituhui.com/\n）\n最后再生成省份好友分布地图\n 最后运用opencv的图像识别进行人像识别，统计微信好友中用人像作为头像的好友人数。\nOpenCV的全称是：Open Source Computer Vision Library。OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。\n如果你对opencv不是很了解，你可以按照以下的链接进行学习。 \n你可以去它的官网：\nhttp://\nopencv.org/\n （需要有一定的英语知识）\n国内也有一些比较好的博客资源，比如以下两个\n【OpenCV入门指南】第一篇 安装OpenCV \n【OpenCV】入门教程\n如下开始是对抓取的朋友头像进行遍历识别是否含有人脸，代码如下。\n#!/usr/bin/env python\n\n'''\nface detection using haar cascades\n\nUSAGE:\n    facedetect.py [--cascade <cascade_fn>] [--nested-cascade <cascade_fn>] [<video_source>]\n'''\n\n# Python 2/3 compatibility\nfrom __future__ import print_function\n\nimport numpy as np\nimport cv2\n\n# local modules\nfrom video import create_capture\nfrom common import clock, draw_str\n\n\ndef detect(img, cascade):\n    rects = cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=4, minSize=(30, 30),\n                                     flags=cv2.CASCADE_SCALE_IMAGE)\n    if len(rects) == 0:\n        return []\n    rects[:,2:] += rects[:,:2]\n    return rects\n\ndef draw_rects(img, rects, color):\n    for x1, y1, x2, y2 in rects:\n        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)\n\nif __name__ == '__main__':\n    import sys, getopt\n    print(__doc__)\n    count = 0\n    for i in range(1,1192):\n        print(str(i))\n        args, video_src = getopt.getopt(sys.argv[1:], '', ['cascade=', 'nested-cascade='])\n        try:\n            video_src = video_src[0]\n        except:\n            video_src = 0\n        args = dict(args)\n        cascade_fn = args.get('--cascade', \"../../data/haarcascades/haarcascade_frontalface_alt.xml\")\n        nested_fn  = args.get('--nested-cascade', \"../../data/haarcascades/haarcascade_eye.xml\")\n\n        cascade = cv2.CascadeClassifier(cascade_fn)\n        nested = cv2.CascadeClassifier(nested_fn)\n        cam = create_capture(video_src, fallback='synth:bg=../data/friend/friendImage/image'+str(i)+'.jpg:noise=0.05')\n\n        ret, img = cam.read()\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        gray = cv2.equalizeHist(gray)\n\n        rects = detect(gray, cascade)\n        vis = img.copy()\n        draw_rects(vis, rects, (0, 255, 0))\n        \n        if not nested.empty():\n            if len(rects) == 0:\n                print('none')\n            else:\n                count = count + 1\n                print(str(count))\n    input()\n\n\n 执行以上代码统计出最后的结果\n使用人像做头像的好友：59    因此不使用人像的1133\n，看来使用人像的人还是很少的。 \n运行提取人像头像的代码最后提取出的头像如下所示 ，不得不说Python的库真是十分的有用。（因为涉及到隐私，所以这里不会展示过多的头像）\n 最近仍然在研究签名以及头像的可用之处，也是欢迎大家一起学习交流。同时希望以上的内容可以提升一下大家的学习兴趣。关于微信好友的更多挖掘会不断进行。\n（1）、人像头像与年龄之间的关系（由于微信没有年龄，于是想通过知乎进行推算）\n（2）、个性签名与年龄性格之间的关系\n（3）、微信号中所包含信息推算年龄层次，预测当前微信号年龄"},
{"title": "干货！python爬虫100个入门项目", "description": "拉钩模拟登录--已失效 Bilibili模拟登录 对于python爬虫初学者，可以先看看爬虫需要哪些知识：如何入门 Python 爬虫？ python网络爬虫知识架构 资源来源：interesting-python", "article": "爬取糗事百科\n爬取妹子图\nPython 岗位分析报告\nSelenium介绍\n抖音App视频抓包\n \nBilibili 用户\nBilibili 视频\nBilibili 小视频\nBing美图爬虫\nB站760万视频信息爬虫\n博客园(node.js)\n百度百科(node.js)\n北邮人水木清华招聘\n百度云网盘\n琉璃神社爬虫\nBoss 直聘\n贝壳网找房爬虫\n \n暗网爬虫(Go)\n \n豆瓣读书\n豆瓣爬虫集\n豆瓣害羞组\n豆瓣图书广度爬取\nDNS记录和子域名\nDHT网络磁力种子爬虫\n抖音\n爱丝APP图片爬虫\n \n京东\n京东搜索+评论\n京东商品+评论\n机票\n煎蛋妹纸\n煎蛋妹纸selenium版本\n今日头条，网易，腾讯等新闻\n计算机书籍控图书\n \nQQ空间\nQQ 群\n清华大学网络学堂爬虫\n去哪儿\n前程无忧Python招聘岗位信息爬取分析\n \nsoundcloud\nStackoverflow 100万问答爬虫\nShadowsocks 账号爬虫\nspider163 网易云音乐爬虫\n时光网电影数据和海报爬虫\n \ntumblr\n下载tumblr喜欢内容\nTuShare\n天猫双12爬虫\nTaobao mm\nTmall 女性文胸尺码爬虫\n淘宝直播弹幕爬虫(node)\n天涯论坛文章\n天眼查爬虫\n \n乌云公开漏洞\n微信公众号\n“代理”方式抓取微信公众号文章\n网易新闻\n网易精彩评论\n微博主题搜索分析\n网易云音乐\n新.网易热评\n唯品会商品\n \nZOL 手机壁纸爬虫\n知乎(python)\n知乎(php)\n知网\n知乎妹子\n自如实时房源提醒\n中国大陆高校列表爬虫\n \n游戏直播行业真的如你想象般暴利？\n \n五一不看人人人人人人，哪儿耍合适？\n \n大碗宽面 VS 律师函警告，情感分析吴亦凡自黑式圈粉！\n \n没经验没学历的外教为啥能拿1.4W+的高薪？\n \n大胆，都是哪些程序员在反对996？！\n \n儿科医生的眼泪，全被数据看见了\n \n用大数据扒一扒蔡徐坤的真假流量粉\n \n北上广深租房图鉴\n \n六万条数据全面解析，城市春节禁放烟花爆竹真的有用吗？\n \n十万条评论告诉你，给《流浪地球》评1星的都是什么心态？\n \n开年表情包局部富有指南，盘它！\n \n看完这篇分析，楼下的Tony和Kevin都改名了！\n \n回复“实习僧”CTO之换种姿势爬取实习僧网站\n \n【20G】Kaggle数据集强势分析“绝地求生”，攻略吃鸡！\n \n50行代码教你打造一个公众号文章采集器\n \n《我是大侦探》到底怎么了？(上：数据爬取篇)\n \n《我是大侦探》到底怎么了？（下：情感分析篇）\n \n帮了个小忙|破解“实习僧”网站字体加密\n \n“小忙”连载篇|实习僧网站数据分析\n \nFacebook模拟登录\n微博网页版模拟登录\n知乎模拟登录\nQQZone模拟登录\nCSDN模拟登录--已恢复\n淘宝爬虫--重构中\nBaidu模拟登录一\n果壳爬虫程序\nJingDong 模拟登录和自动申请京东试用\n163mail--已恢复\n拉钩模拟登录--已失效\nBilibili模拟登录\n \n对于python爬虫初学者，可以先看看爬虫需要哪些知识：\n如何入门 Python 爬虫？\npython网络爬虫知识架构\n资源来源：\ninteresting-python\n，\nawesome-spider\n，\nawesome-python-login-model\nEND！\n此资源持续更新~~欢迎点赞收藏关注！"},
{"title": "python新手必躺的5大坑", "description": "它真的能带来巨大的便利。 更多关于python文件读写和上下文管理器的使用，可以看下面的文章 一文搞懂Python文件读写 一文搞懂python错误和异常 新人躺坑之三：不喜欢使用标准库", "article": "对于Python新手来说，写代码很少考虑代码的效率和简洁性，因此容易造成代码冗长、执行慢，这些都是需要改进的地方。本文是想通过几个案列给新手一点启发，怎样写python代码更优雅。\n新人躺坑之一：不喜欢使用高级数据结构\nsets（集合）\n很多新手忽视sets（集合）和tuple（元组）的强大之处\n例如，取两个列表交集：\ndef\n \ncommon_elements\n(\nlist1\n,\n \nlist2\n):\n    \n    \ncommon\n \n=\n \n[]\n        \n    \nfor\n \nitem1\n \nin\n \nlist1\n:\n                \n        \nif\n \nitem1\n \nin\n \nlist2\n:\n                        \n            \ncommon\n.\nappend\n(\n \nitem1\n \n)\n        \n、\n\n    \nreturn\n \ncommon\n这样写会更好：\ndef\n \ncommon_elements\n(\nlist1\n,\n \nlist2\n):\n\n    \ncommon\n \n=\n \nset\n(\nlist1\n)\n.\nintersection\n(\nset\n(\nlist2\n))\n\n    \nreturn\n \nlist\n(\ncommon\n)\ndic（字典）\n新手枚举（访问和取出）字典的键和对应值，认为对应值必须通过键来访问，往往会这样做：\nmy_dict\n \n=\n \n{\n'a'\n:\n1\n,\n'b'\n:\n2\n}\n\n\nfor\n \nkey\n \nin\n \nmy_dict\n:\n        \n    \nprint\n(\nkey\n,\n \nmy_dict\n[\nkey\n])\n有一个更优雅的方法可以实现：\nmy_dict\n \n=\n \n{\n'a'\n:\n1\n,\n'b'\n:\n2\n}\n\n    \nfor\n \nkey\n,\n \nvalue\n \nin\n \nmy_dict\n.\nitems\n():\n    \n    \nprint\n(\nkey\n,\n \nvalue\n)\n对大部分项目来说，这样写会更加有效率。\ntuple（元组)\n元组一旦创建就无法更改元素，看似没有什么用处，其实元组的作用大着呢！很多函数方法都会返回元组，比如\nenumerate()\n和\ndict.items()\n，并且可以在函数中使用元组，返回多个值。还能够很方便地从元组中提取信息：\na\n,\nb\n \n=\n \n(\n'cat'\n,\n'dog'\n)\n上面元组中有两个元素，分别被赋给a，b。如果有多个值，同样可以提取：\na\n,\nb\n,\nc\n \n=\n \n(\n'cat'\n,\n'dog'\n,\n'tiger'\n)\n\n\nprint\n(\na\n,\nb\n,\nc\n)\n提取首、尾两个元素：\nfirst\n,\n*\n_\n,\nend\n \n=\n \n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n)\n\n\nprint\n(\nfirst\n,\nend\n)\n\n\n# 输出：1、6\n提取首、中、尾三部分：\nfirst\n,\n*\nmiddle\n,\nend\n \n=\n \n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n)\n\n\nprint\n(\nfirst\n,\nmiddle\n,\nend\n)\n\n\n# 输出：1、[2, 3, 4, 5]、6\n元组还可以用来交换变量：\n(\na\n,\nb\n,\nc\n)\n \n=\n \n(\nc\n,\na\n,\nb\n)\n上面a变成之前的c，b变成之前的a，c变成之前的b\n元组也能作为字典的键，所以如果你需要存储数据，可以使用带有元组键的字典，比如说经纬度数据。\n新人躺坑之二：不喜欢使用上下文管理器\n新手可能会习惯这样进行读取文件操作：\nif\n \nos\n.\npath\n.\nexists\n(\ndata_file_path\n):\n    \n    \ndata_file\n \n=\n \nopen\n(\ndata_file_path\n,\n'r'\n)\n\n\nelse\n:\n    \n    \nraise\n \nOSERROR\n\n\nprint\n(\n \ndata_file\n.\nread\n())\n\n\ndata\n.\nclose\n()\n这样写会有几个明显的问题：\n可能出现文件存在，但文件被占用，无法读取的情况\n可能出现文件可以被读取，但操作文件对象出现报错的情况\n可能出现忘记关闭文件的情况\n如果使用\nwith...语句\n，问题就迎刃而解了：\nwith\n \nopen\n(\ndata_file_path\n,\n'r'\n)\n \nas\n \ndata_file\n:\n\n    \nprint\n(\ndata_file\n.\nread\n)\n这样可以捕获任何打开文件或处理数据时的异常情况，并且在任务处理完后自动关闭文件。\npython初学者可能不太了解上下文管理器的神奇之处，它真的能带来巨大的便利。\n更多关于python文件读写和上下文管理器的使用，可以看下面的文章\n一文搞懂Python文件读写\n一文搞懂python错误和异常\n \n新人躺坑之三：不喜欢使用标准库\n标准库\nitertools\n和\ncollections\n仍然很少被初学者使用\nitertools\n如果你看到下面的任务：\nlist1\n \n=\n \nrange\n(\n1\n,\n10\n)\n\n\nlist2\n \n=\n \nrange\n(\n10\n,\n20\n)\n\n\nfor\n \nitem1\n \nin\n \nlist1\n:\n\n    \nfor\n \nitem2\n \nin\n \nlist1\n:\n\n        \nprint\n(\nitem1\n*\nitem2\n)\n这是一个嵌套循环操作，为提高代码效率，完全可以用\nproduct()\n函数替代嵌套循环：\nfrom\n \nitertools\n \nimport\n \nproduct\n\n\nlist1\n \n=\n \nrange\n(\n1\n,\n10\n)\n\n\nlist2\n \n=\n \nrange\n(\n10\n,\n20\n)\n\n\nfor\n \nitem1\n,\nitem2\n \nin\n \nproduct\n(\nlist1\n,\n \nlist2\n):\n\n    \nprint\n(\nitem1\n*\nitem2\n)\n这两段代码的结果完全一样，但使用标准库函数明显更加简洁高效。\nitertools\n还有很多方便操作迭代对象的函数，比如：\ncount()\n函数会创建一个无限迭代器\ncycle()\n函数会把传入的序列无限重复下去\nchain()\n可以把多个迭代对象串联起来\ngroup()\n函数可以把迭代其中相邻的重复元素挑出来，放在一起\n......\n有兴趣可以详细看看\nitertools\n库的各种神奇函数\ncollections\n新手对python集合模块了解的可能并不多，你可能会遇到这样的情形：\nconsolidated_list\n \n=\n \n[(\n'a'\n,\n1\n),(\n'b'\n,\n2\n),(\n'c'\n,\n3\n),(\n'b'\n,\n4\n)]\n\n\nitems_by_id\n \n=\n \n{}\n\n\nfor\n \nid_\n,\n \nitem\n \nin\n \nconsolidated_list\n:\n\n    \nif\n \nid_\n \nnot\n \nin\n \nitems_by_id\n:\n \n        \nitems_by_id\n[\nid_\n]\n \n=\n \n[]\n\n    \nif\n \nid_\n \nin\n \nitems_by_id\n:\n\n        \nitems_by_id\n[\nid_\n]\n.\nappend\n(\nitem\n)\n上面代码构建了一个字典，依次向字典中添加信息，如果某个键已经存在，则以某种方式修改该键的值；如果某个键不存在，则添加对应键值对。\n这种算法非常常见，你可以用\ncollects\n模块的\ndefaultdict()\n函数来实现同样效果：\nfrom\n \ncollections\n \nimport\n \ndefaultdict\n\n \n\nitems_by_id\n \n=\n \ndefaultdict\n(\nlist\n)\n\n\nconsolidated_list\n \n=\n \n[(\n'a'\n,\n1\n),(\n'b'\n,\n2\n),(\n'c'\n,\n3\n),(\n'b'\n,\n4\n)]\n\n\n\nfor\n \nid_\n,\n \nitem\n \nin\n \nconsolidated_list\n:\n\n    \nitems_by_id\n[\nid_\n]\n.\nappend\n(\nitem\n)\n在此列中，\ndefaultdict()\n接受一个list作为参数，当键不存在时，则返回一个空列表作为对应值。\n有时候我们会遇到统计词频的案例，比如：\n# 统计词频\n\n\ncolors\n \n=\n \n[\n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n]\n\n\nresult\n \n=\n \n{}\n\n\nfor\n \ncolor\n \nin\n \ncolors\n:\n\n    \nif\n \nresult\n.\nget\n(\ncolor\n)\n==\nNone\n:\n\n        \nresult\n[\ncolor\n]\n=\n1\n\n    \nelse\n:\n\n        \nresult\n[\ncolor\n]\n+=\n1\n\n\nprint\n \n(\nresult\n)\n\n\n# 输出 {'red': 2, 'blue': 3, 'green': 1}\n完全可以用\ndefaultdict()\n函数实现上面的计数功能：\ncolors\n \n=\n \n[\n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n]\n\n\nd\n \n=\n \ndefaultdict\n(\nint\n)\n\n\nfor\n \ncolor\n \nin\n \ncolors\n:\n\n    \nd\n[\ncolor\n]\n \n+=\n \n1\n\n\nprint\n(\nd\n)\n更简单的方法用\ncollections\n模块的\nCounter()\n函数：\nfrom\n \ncollections\n \nimport\n \nCounter\n\n\ncolors\n \n=\n \n[\n'red'\n,\n \n'blue'\n,\n \n'red'\n,\n \n'green'\n,\n \n'blue'\n,\n \n'blue'\n]\n\n\nc\n \n=\n \nCounter\n(\ncolors\n)\n\n\nprint\n \n(\ndict\n(\nc\n))\n对于备份文件，新人往往会用\nsystem\n模块：\nfrom\n  \nos\n \nimport\n \nsystem\n\n\nsystem\n(\n\"xcopy e:\n\\\\\nsample.csv  e:\n\\\\\nnewfile\n\\\\\n\"\n)\n其实\nshutil\n模块更好用：\nimport\n \nshutil\n\n\nshutil\n.\ncopyfile\n(\n'E:\n\\\\\nq.csv'\n,\n \n'e:\n\\\\\nmovie\n\\\\\nq.csv'\n)\n因为\nshutil\n会很详细地报告错误和异常。\n新人躺坑之四：不喜欢使用异常处理\n无论老手新手都应该在写代码的时候进行异常处理操作，这样可以使代码更加健壮。异常处理一般会用\ntry...except\n语句，具体使用方法可见：\n一文搞懂python错误和异常\n新人躺坑之五：不喜欢使用生成器\n除非你的list十分复杂，并且频繁调用，否则都建议使用生成器，因为它非常节省内存，举个例子：\ndef\n \npowers_of_two\n(\nmax\n=\n20000\n):\n\n    \ni\n \n=\n \n0\n\n    \npowers\n \n=\n \n[]\n\n    \nwhile\n \n2\n**\ni\n \n<\n \nmax\n:\n\n        \npowers\n.\nappend\n[\n2\n**\ni\n]\n\n        \ni\n \n+=\n \n1\n\n    \nreturn\n \npowers\n对于使用次数少、占据大量内存、且容易生成的数据，可以用生成器替代列表存储：\nfrom\n \nitertools\n \nimport\n \ncount\n,\n \ntakewhile\n\n\ndef\n \npowers_of_two\n(\nmax\n=\n20000\n):\n\n    \nfor\n \nindex\n \nin\n \ntakewhile\n(\nlambda\n \ni\n:\n \n2\n**\ni\n \n<\n \nmax\n,\n \ncount\n(\nstart\n=\n0\n)):\n\n        \nyield\n \n2\n**\nindex\n更多关于生成器的内容，请见：\n一文搞懂python迭代器和生成器\n \n注：本文翻译自Tony Flury在Quora的回答，节选部分内容"},
{"title": "有哪些 Python 经典书籍？", "description": "完整内容请访问原文： python 3.7极速入门教程9最佳python中文工具书籍下载 筛选了2年内优秀的python书籍，个别经典的书籍扩展到5年内。 python现在的主流版本是3", "article": "内容太长，完整内容请访问原文：  \npython 3.7极速入门教程9最佳python中文工具书籍下载\n筛选了2年内优秀的python书籍，个别经典的书籍扩展到5年内。\npython现在的主流版本是3.7(有明显性能提升，强烈推荐) 3.6, 不基于这两个或者更新版本的书，慎重选择。很多库已经不提供python2支持，请尽快从python迁移到python3.7。\n尽量只收集通用的书籍，专用的书籍只收集特别优秀者。国产的书很多虽然出名，但是实际写得并不好，为此这里收集得并不多。有英文能力的，尽量阅读英文原版。\n入门推荐在线书籍： \npython 3.7极速入门教程\npython专业书籍汇总\n2018最佳人工智能图像处理工具OpenCV书籍下载\n2018最佳selenium工具书籍汇总下载(持续更新)\n2018最佳人工智能机器学习工具书籍及下载(持续更新)\nPython编程：从入门到实践 - 2016.pdf\n亚马逊 4.5星 345评论 \nhttps://\ngithub.com/ehmatthes/pc\nc\n 1000左右星\n 图片.png\n本书是一本针对所有层次的Python读者而作的Python入门书。全书分两部分：首部分介绍用Python    编程所必须了解的基本概念，包括matplotlib、NumPy和Pygal等强大的Python库和工具介绍，以及列表、字典、if语句、类、文件与异常、代码测试等内容；第   二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python   2D游戏开发，如何利用数据生成交互式的信息图，以及创建和定制简单的Web应用，并帮读者解决常见编程问题和困惑。\n海报：\n image\n英文版：\nPython Crash Course - 2016.pdf\n流畅的python - 2017.pdf\n 中级\n 图片.png\n《流畅的Python》一书致力于帮助Python开发人员挖掘这门语言及相关程序库的优秀特性，避免重复劳动，同时写出简洁、流畅、易读、易维护，并且具有地道Python风格的代码。本书尤其深入探讨了Python语言的高级用法，涵盖数据结构、Python风格的对象、并行与并发，以及元编程等不同的方面。\n海报：\n image\nhttps://\ngithub.com/fluentpython\n/example-code\n 2000+ 星 强烈推荐\n英文版本：\nFluent Python - 2014.pdf\n简明 Python 教程 4nd - 2018.pdf\n 初级\n 图片.png\nhttps://\ngithub.com/LenKiMo/byte\n-of-python\n 近300星\nPython编程快速上手——让繁琐工作自动化 - 2016.pdf\n 图片.png\n如今，人们面临的大多数任务都可以通过编写计算机软件来完成。Python是一种解释型、面向对象、动态数据类型的高   级程序设计语言。通过Python编程，我们能够解决现实生活中的很多任务。   本书是一本面向实践的Python编程实用指南。本书的目的，不仅是介绍Python语言的基础知识，而且还通过项目实践教会读者如何应用这些知识和技能。本书的首部分介绍了基本Python编程概念，第   二部分介绍了一些不同的任务，通过编写Python程序，可以让计算机自动完成它们。第   二部分的每一章都有一些项目程序，供读者学习。每章的末尾还提供了一些习题和深入的实践项目，帮助读者巩固所学的知识。附录部分提供了所有习题的解答。    本书适合任何想要通过Python学习编程的读者，尤其适合缺乏编程基础的初学者。通过阅读本书，读者将能利用强大的编程语言和工具，并且会体会到Python编程的快乐。\n英文版：\nAutomate the Boring Stuff with Python Practical Programming for Total Beginners - 2015.pdf\nhttps://\ngithub.com/IFinners/aut\nomate-the-boring-stuff-projects\n 亚马逊4.5星 77评\n笨办法学_Python（第三版） - 2018.pdf\n 图片.png\n本书是一本Python入门书，适合对计算机了解不多，没有学过编程，但对编程感兴趣的读者学习使用。这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现，让初学者从基础的编程技术入手，最终体验到软件开发的基本过程。本书是基于Python   3.6版本编写的。\n本书结构非常简单，除“准备工作”之外，还包括52个习题，其中26个覆盖了输入/输出、变量和函数3个主题，另外26个覆盖了一些比较进阶的话题，如条件判断、循环、类和对象、代码测试及项目的实现等。每一章的格式基本相同，以代码习题开始，按照说明编写代码，运行并检查结果，然后再做附加练习。\n 图片.png\nPython基础教程（第3版) - 2017.pdf\n 初级\n 图片.png\n本书包括Python程序设计的方方面面：首先从Python的安装开始，随后介绍了Python的基础知识和基本概念，包括列表、元组、字符串、字典以及各种语句；然后循序渐进地介绍了一些相对高级的主题，包括抽象、异常、魔法方法、属性、迭代器；此后探讨了如何将Python与数据库、网络、C语言等工具结合使用，从而发挥出Python的强大功能，同时介绍了Python程序测试、打包、发布等知识；最后，作者结合前面讲述的内容，按照实际项目开发的步骤向读者介绍了10个具有实际意义的Python项目的开发过程。\n海报：\n image\nPython基础教程(第3版) - 2018 Beginning Python: From Novice to Professional - 2017 \nhttps://\ngithub.com/Apress/begin\nning-python-3ed\n 100左右星\n《Python Cookbook》第三版中文.pdf\n 中级\n 图片.png\n《Python    Cookbook（第3版）中文版》介绍了Python应用在各个领域中的一些使用技巧和方法，其主题涵盖了数据结构和算法，字符串和文本，数字、日期和时间，迭代器和生成器，文件和I/O，数据编码与处理，函数，类与对象，元编程，模块和包，网络和Web编程，并发，实用脚本和系统管理，测试、调试以及异常，C语言扩展等。\n本书覆盖了Python应用中的很多常见问题，并提出了通用的解决方案。书中包含了大量实用的编程技巧和示例代码，并在Python   3.3环境下进行了测试，可以很方便地应用到实际项目中去。此外，《Python   Cookbook（第3版）中文版》还详细讲解了解决方案是如何工作的，以及为什么能够工作。\n《Python Cookbook（第3版）中文版》非常适合具有一定编程基础的Python程序员阅读参考。\nPython Cookbook(第3版)(中文版) - 2015 Python Cookbook, 3rd Edition - 2013 \nhttps://\ngithub.com/dabeaz/pytho\nn-cookbook\n 2000左右星\nPython学习手册（原书第4版）- 2011.pdf\n《Python学习手册(第4版)》内容简介：学习Python的主要内建对象类型：数字、列表和字典。使用Python语句创建和处理对象，并且学习Python的通用语法模型。使用函数构造和重用代码，函数是Python的基本过程工具。学习Python模块：封装语句、函数以及其他工具，以便构建较大的组件。学习Python的面向对象编程工具，用于组织程序代码。学习异常处理模型，以及用于编写较大程序的开发工具。了解高级Python工具，如装饰器、描述器、元类和Unicode处理等。\n 图片.png\n英文版 \nLearning Python 5th - 2013.pdf\n参考资料\n讨论qq群144081101 591302926 567351477 钉钉免费群21745728\n本文最新版本地址\n本文涉及的python测试开发库\n 谢谢点赞！\n本文相关海量书籍下载\nhttps://\nwsvincent.com/best-pyth\non-books/\n像计算机科学家一样思考Python - 2013.pdf\n 图片.png\n本书以培养读者以计算机科学家一样的思维方式来理解Python语言编程。贯穿全书的主体是如何思考、设计、开发的方法，而具体的编程语言，只是提供了一个具体场景方便介绍的媒介。   全书共21章，详细介绍Python语言编程的方方面面。本书从基本的编程概念开始讲起，包括语言的语法和语义，而且每个编程概念都有清晰的定义，引    领读者循序渐进地学习变量、表达式、语句、函数和数据结构。书中还探讨了如何处理文件和数据库，如何理解对象、方法和面向对象编程，如何使用调试技巧来修正语法错误、运行时错误和语义错误。每一章都配有术语表和练习题，方便读者巩固所学的知识和技巧。此外，每一章都抽出一节来讲解如何调试程序。作者针对每章所专注的语言特性，或者相关的开发问题，总结了调试的方方面面。   本书的第 2版与第 1版相比，做了很多更新，将编程语言从Python 2升级成Python   3，并修改了很多示例和练习，增加了新的章节，更全面地介绍Python语言。   这是一本实用的学习指南，适合没有Python编程经验的程序员阅读，也适合高中或大学的学生、Python爱好者及需要了解编程基础的人阅读。对于首   次接触程序设计的人来说，是一本不可多 得的佳作。\n亚马逊 4星 90评\n英文版 \nThink Python - How to Think Like a Computer Scientist 2nd - 2016.pdf\nEffective Python.编写高质量Python代码的59个有效方法 -2016.pdf\n 图片.png\n本书作者BrettSlatkin以使用场景为主导的精练教学方式，汇聚了59条优秀的实践原则、开发技巧和便捷方案，并以实用的代码范例来解释它们。作者根据自己在Google公司多年开发Python基础架构所积累的经验，揭示了Python语言中一些鲜为人知的微妙特性，并给出了能够改善代码功能及运行效率的习惯用法。通过本书，你能够了解到解决关键编程任务所用的最佳方式，并学会编写易于理解、便于维护且利于改进的代码。\n亚马逊 英文 4.5星 80+评\nEffective Python 59 Specific Ways to Write Better Python - 2015.pdf\n编写高质量代码：改善Python程序的91个建议 - 2014.pdf\n 国产的书，不过是基于python2的，慎重考虑。\nSelenium自动化测试 基于 Python 语言 - 2018.pdf\n 初级\n 图片.png\nhttps://\ngithub.com/upgundecha/l\nearnsewithpython\n 星级 低于100\nSelenium是一个主要用于Web应用程序自动化测试的工具集合，在行业内已经得到广泛的应用。本书介绍了如何用Python语言调用Selenium   WebDriver接口进行自动化测试。主要内容为：基于Python 的 Selenium WebDriver 入门知识、Selenium   Python脚本、使用unittest 编写单元测试、生成HTML格式的测试报告、元素定位、Selenium Python API   介绍、元素等待机制、跨浏览器测试、移动端测试、编写一个iOS测试脚本、编写一个Android测试脚本、Page   Object与数据驱动测试、Selenium WebDriver的特性、第三方工具与框架集成等核心技术。\n《Selenium自动化测试 基于Python语言》适合任何软件测试人员阅读，也适合作为大专院校师生的学习用书和培训学校的教材。\n-- 本书虽然为2018年翻译，但是实际基于selenium2和python2，已经过时，很多实例已经不能运行。阅读时可参考 \nselenium自动化测试工具python笔试面试项目实战5键盘操作\n，尽管有点过时，依旧是selenium书籍中的佳品。\n对应的英文版：\nLearning Selenium Testing Tools with Python - 2014.pdf\nPython网络数据采集  初级\n 图片.png\n 图片.png\nPython网络数据采集 - 2016.pdf\n本书采用简洁强大的Python语言，介绍了网络数据采集，并为采集新式网络中的各种数据类型提供了全面的指导。第    1部分重点介绍网络数据采集的基本原理：如何用Python从网络服务器请求信息，如何对服务器的响应进行基本处理，以及如何以自动化手段与网站进行交互。第   二部分介绍如何用网络爬虫测试网站，自动化处理，以及如何通过更多的方式接入网络。\nWeb Scraping with Python 2nd - 2018.pdf\nhttps://\ngithub.com/REMitchell/p\nython-scraping\n 2000左右星\n其他书籍\nHead First Python 2nd 暂时没找到文字的电子书 初级\n 图片.png\nPython Tricks A Buffet of Awesome Python Features - 2016.pdf\n 中级\n暂时没有中文版\n 图片.png\nPython 201 Intermediate Python - 2016.pdf\n 中级\nhttps://\ngithub.com/driscollis/p\nython201bookcode"},
{"title": "如何学习Python爬虫[入门篇]？", "description": "1. Python爬虫入门一之综述 2. Python爬虫入门二之爬虫基础了解 3. Python爬虫入门三之Urllib库的基本使用 4. Python爬虫入门四之Urllib库的高级用法", "article": "这篇文章已经过去很久了，有一些学习资源链接已经失效了，还一直有小伙伴在Python的路上摸索。所以我根据自己的学习和工作经历整理了一套Python学习电子书，在公众号「路人甲TM」后台回复关键词「1」可以免费获得！\n想写这么一篇文章，但是知乎社区爬虫大神很多，光是整理他们的答案就够我这篇文章的内容了。对于我个人来说我更喜欢那种非常实用的教程，这种教程对于想直接上手爬虫做一些小东西的朋友来说是极好的。\n用一个精彩的回答作为开头：\n如何入门 Python 爬虫？ - 谢科的回答\n如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：\n学习编程\n \n第一：Python爬虫学习系列教程（来源于某博主：\nhttp://\ncuiqingcai.com/1052.htm\nl\n）\nPython版本：2.7 \n整体目录： \n一、爬虫入门\n1. \nPython爬虫入门一之综述\n2. \nPython爬虫入门二之爬虫基础了解\n3. \nPython爬虫入门三之Urllib库的基本使用\n4. \nPython爬虫入门四之Urllib库的高级用法\n5. \nPython爬虫入门五之URLError异常处理\n6. \nPython爬虫入门六之Cookie的使用\n7. \nPython爬虫入门七之正则表达式\n二、爬虫实战\n1. \nPython爬虫实战一之爬取糗事百科段子\n2. \nPython爬虫实战二之爬取百度贴吧帖子\n3. \nPython爬虫实战三之实现山东大学无线网络掉线自动重连\n4. \nPython爬虫实战四之抓取淘宝MM照片\n5. \nPython爬虫实战五之模拟登录淘宝并获取所有订单\n6. \nPython爬虫实战六之抓取爱问知识人问题并保存至数据库\n7. \nPython爬虫实战七之计算大学本学期绩点\n8. \nPython爬虫实战八之利用Selenium抓取淘宝匿名旺旺\n三、爬虫利器\n1. \nPython爬虫利器一之Requests库的用法\n2. \nPython爬虫利器二之Beautiful Soup的用法\n3. \nPython爬虫利器三之Xpath语法与lxml库的用法\n4. \nPython爬虫利器四之PhantomJS的用法\n5. \nPython爬虫利器五之Selenium的用法\n6. \nPython爬虫利器六之PyQuery的用法\n四、爬虫进阶\n1. \nPython爬虫进阶一之爬虫框架概述\n2. \nPython爬虫进阶二之PySpider框架安装配置\n3. \nPython爬虫进阶三之爬虫框架Scrapy安装配置\n4. \nPython爬虫进阶四之PySpider的用法\n第二（第一的姊妹篇）：\nPython爬虫入门教程\n（来源于博主：blog.csdn.net/column/details/why-bug.html）\nPython版本：2.7\n教程目录：\n[Python]网络爬虫（一）：抓取网页的含义和URL基本构成\n[Python]网络爬虫（二）：利用urllib2通过指定的URL抓取网页内容\n[Python]网络爬虫（三）：异常的处理和HTTP状态码的分类\n[Python]网络爬虫（四）：Opener与Handler的介绍和实例应用\n[Python]网络爬虫（五）：urllib2的使用细节与抓站技巧\n[Python]网络爬虫（六）：一个简单的百度贴吧的小爬虫\n[Python]网络爬虫（七）：Python中的正则表达式教程\n[Python]网络爬虫（八）：糗事百科的网络爬虫（v0.3）源码及解析(简化更新)\n[Python]网络爬虫（九）：百度贴吧的网络爬虫（v0.4）源码及解析\n[Python]网络爬虫（十）：一个爬虫的诞生全过程（以山东大学绩点运算为例）\n[Python]网络爬虫（11）：亮剑！爬虫框架小抓抓Scrapy闪亮登场！\n[Python]网络爬虫（12）：爬虫框架Scrapy的第一个爬虫示例入门教程\n第三：你已经看完上面（第一或者第二）的教程：再推荐知乎用户\n@陈唯源\n 的实战练习博客 \nPython爬虫学习记录（1）——Xiami全站播放数\nPython爬虫学习记录（2）——LDA处理歌词\n百度音乐带标签，作曲，演唱者，类别的歌词数据\nPython爬虫学习记录（4）——传说中的足彩倍投法。。好像也不是那么靠谱\n2011~2013.5全球所有足球比赛比分数据以及足彩各公司盘口\nPython爬虫学习记录（3）——用Python获取虾米加心歌曲，并获取MP3下载地址\nPython爬虫学习记录（5）——python mongodb + 爬虫 + web.py 的acfun视频排行榜\n \nPython爬虫学习记录（0）——Python 爬虫抓站 记录（虾米，百度，豆瓣，新浪微博）\n第四：最后推荐知乎用户\n@gaga salamer\n 的实战练习博客\n爬虫教程（1）基础入门\n爬虫教程（2）性能进阶 \n知乎用户信息爬虫（规模化爬取）\n用scrapy爬取豆瓣电影新片榜\n用scrapy对豆瓣top250页面爬取（多页面爬取）\n用scrapy自动爬取下载图片\n用scrapy自动下载石原sama的豆瓣影人图集(727张图片，自动下载）\n \n希望以上的教程可以帮助到大家。\n如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：\n学习编程\n \n如何一步一步的学Java - 知乎专栏\nC、C++语言学习资料 - 知乎专栏\n学好Python的11个优秀资源 - 知乎专栏\n程序员把妹指南之修电脑篇  - 知乎专栏\n编程教程资源整理汇总- 知乎专栏\n免费实用的API接口 - 知乎专栏\n零基础如何开发游戏 - 知乎专栏\n代码编辑器的配色方案 - 知乎专栏"},
{"title": "Python与R、Matlab的对比", "description": "MATLAB OR Python中文，年代越近，由Matlab全面转向Python的建议就越多，更多人直言Python是未来的编程语言，在Python与Matlab的选择之上", "article": "作为一枚程序员，想要研究Python编程语言与数学学习（教学）的结合，就不能不了解以及比对一下其他数学学习与应用的解决方案，比如R语言、Matlab等数学软件。经过广泛的搜索了解了一下国外的反馈与趋势之后，最终的结论就是\nPython确实是未来\n。 \nPython与R语言的对比\nPython与R语言在数据分析领域的对比，DataCamp上有一篇引用率非常高的文章，\n数据分析选择R还是Python\n，不过这篇文章是2015年写的，我们先大致总结一下文章内容： \nR主要用于学术与研究，也开始迅速进入企业市场，越是接近统计学、研究、数据科学，你就会越偏爱R，而Python主要用于程序员想进入数据分析领域、掌握统计技能，以及其他开发人员进入数据科学领域。如果你的工作越接近工程环境，你会越偏爱Python。 \nR的社区生态主要是研究员，数据科学家、统计学家和量化研究员，而Python主要是程序员和开发者。 \nR学习门槛比较高，但是当你掌握了基础之后就学起来比较容易，R对程序员来说不难；Python可读性强，入门非常容易，被公认为非常不错的入门编程语言。\n在2015年前的Tiobe编程语言的排名上Python排名在第4或第5，R排在第17到13。而据2015数据分析领域，用R的研究员占58%，Python占42%，两者都用的占23.45%； \n在2013年，R转Python的有26%，Python转R的有18%，而新进入数据分析领域的有44%的人选择R，23%的人选择Python.\n从2015年之前的情况看来，正如作者所说，R和Python在数据分析领域确实平分秋色，难分伯仲，从数据中我们可以看出，虽然Python相比R更流行，在编程方面更有优势，但是在数据科学领域，选择使用R的人更多。\n但是翻到\n2018年的文章\n里看到2016、2017年的数据，情况下发生了逆转。在数据科学领域，2016年有34%的人选择Python，42%的人选择R，而到了2017年41%的人选择Python，36%的人选择R。在2017年的调查统计里数据科学家和工程师最流行的编程语言分别是JavaScript(58.7%，令人惊讶啊，可能与数据可视化有关？)、SQL（58%）、Python(45%)，而R（11.2%），Python在商业领域领域比较火，而R在学术和研究领域比较多，所以不那么流行吧。而在最近的Tiobe的排行榜上，与数据科学相关的编程语言Python、R、SQL、Matlab等涨幅都比较大，Python在整个编程语言的流行度也由2014年的2%猛增到2019年8.26%，跃居第3，成为2018年年度语言。\nPython、R、Scala在数据科学领域的流行包\n \nPython与Matlab的对比\n虽然不是学数学的，但是Matlab的大名可是如雷贯耳，与数学相关专业、相关行业的学生、工程师们基本一定会使用到它。MathWorks公司跟设计公司Adobe、三维软件公司Autodesk一样都是极其硬核的存在，旗下的产品不仅是学习必备，而且是工程（比工作听起来霸气）必备。我个人对Matlab的了解极其有限，Python与Matlab的对比我也只能像一个产品经理去广泛查阅专业意见来权衡利弊。我所得出的结论也只是基于掌握了Python的前提，断不敢用偏颇的立场去亵渎神器。 我们来看一下美国相关专业人员对两者的对比，只是粗略而不精准的翻译一下。\n 我是一名工程师，之前长期使用Matlab来处理复杂的数学运算都没有遇到什么大的问题，就在几个月前因为岗位需要学习了Python之后，我才意识到Matlab相比Python是多么的糟糕。之前需要我用Matlab花一整天处理的问题用Python只需数小时，Python的表现、流畅度让我惊讶。而且使用Python我可以做之前用Matlab做的任何事情，而且更优秀。因此我非常建议Matlab使用者转向Python。Python编程语言比Matlab更强大，能够联合非常多的外部工具模块，只需一个文件就可以调用非常多的库、函数、类，语法也更加简单，面向对象开发也更加方便，还能非常方便地调用C、C++、Fortran。Python是免费的，而且可以运行在更多平台上面。    ---Stackoverflow某工程师\n经过调查Matlab与Python的宿命之争在2011年就开始了，而且网上Matlab与Python的对比文章、评论非常之多。Matlab官方在2013年就开始拿Matlab和Python进行对比\n官方对比最是致命：MATLAB OR Python中文\n，年代越近，由Matlab全面转向Python的建议就越多，更多人直言Python是未来的编程语言，在Python与Matlab的选择之上，看了非常多的建议，已成一边倒的趋势。 有人列出了\nPython相对于Matlab的8大优势\n,我只粗略翻译一下这8大优势，详情大家可以去查看原文：  \nPython的代码相比于Matlab更简洁，可读性更强； \n和其他编程一样，Python都是从0开始计数，而Matlab不是； \nPython可以更好的支持哈希字典；\n面向对象开发让Python更简单、更优雅； \nPython免费且开源；  \nPython一个文件、模块里可以包含非常多的函数； \nPython支持import声明； \nPython支持更多图像处理的包和工具集  \n在PyCon 2017年的大会上，多位大佬提出科学家应该全面拥抱Python，在2015年开始Python在NASA的地位就开始遥遥领先IDL、Matlab和Fortran。由于这里我们只讨论Python和Matlab在数学上的对比，至于科学家转型Python的优势的细节，大家可以看\nDataCamp的雄文\n。    \n小结\n其实在写这篇文章之前，我就问过一下包括清华在内的学校以及一些数学专业的学生，Matlab和R还是占主流，但是经过一番调查发现在美国Python在数据科学、数学等方面好像渐成压倒性的优势。这也激励我要把用Python学数学的专栏给写下去。"},
{"title": "我裸辞去面试python岗位了", "description": "除了他是内存型数据库外，还有什么原因 22、python2和python3的区别？ 23、你觉得python2的项目如果迁移到python3，困难会在哪里？", "article": "最近换工作了，坐标上海，裸辞，之前早有前辈们说过，\"裸辞一时爽,一直裸辞一直爽\"，这话一点不假，裸辞你要面临没有收入来源，但是每天眼睁睁看着各种花销不断支出的煎熬，我主要是觉得一边在上家公司工作一边去下家面试可能要经常请假，不太方便（事实证明也确实是这样的，面试并不是每次面试都能通过，即使有些一面通过，但还会邀约二面），并且还有点自己的事情需要处理，所以才裸辞，我非常不建议在目前的大环境下裸辞，能好好待还是好好待着。\n说一些面试的心得体会：\n1、简历制作\n我做了两份简历，用两个手机账号，两个简历名字，分别在各个招聘网站投了双份简历，一个是数据分析的简历、一个是web全栈开发的简历，我真正接触python快2年，不管是学习还是工作学到的东西，这两年大概掌握了（前端+django+爬虫+数据分析+机器学习+NLP+Linux）技术，技术水平自我评价一般，够日常一般使用，基于自己掌握的技术可以分成2方面，web和数据分析，所以为了尽快找到工作，就做了web全栈开发+数据分析（含爬虫）2份简历，同时投递\n2、面试安排\n疯狂投简历，2个账号多个平台同时投，每天接到2-4个面试邀约电话，每天安排2到3家面试，一般上午1家，下午的话一般我尽量安排离得近的公司面试，2点一家，4.30一家，基本时间上都还来得及，只不过这样确实比较赶\n3、公司及面试情况\n邀约面试的电话，从数量来看，涵盖web开发（和web开发+数据分析算法建模）的面试邀约更多，纯数据分析/算法的面试较少，数据分析面试少的原因，一方面可能自己简历写的项目不多，而且学历本科也没多大优势，另一方面可能实际需求上确实web岗位多，纯分析岗位少，5天面试了11家公司，拿到offer有2家，等最终复试的还有2家（已经通知要五一过后再面了，不过我这边可能会选择下方第7家公司入职，后面的最终面试不一定会去）一般的话，面试要经过2-4轮，技术和人事是必须的，当然也有些技术面完了人家都已经觉得不合适了，但是公司也会假装客套邀约人事也跟你谈谈，谈完大部分也都是不了了之了，如果面试严格的话，2轮之外，可能还会有第三/四轮技术/人事/老板等leader再继续约时间面试，下面简单介绍下每家公司用到的技术和面试结果\n1、数据分析算法工程师\n公司技术：机器学习+大数据\n 技术总监面试，提到用Hive，我不懂，另外数据分析经验可能比较少，没通过\n2、算法工程师 \n公司技术：图像识别\n面试我的是总经理，不是技术，对技术不懂，给他普及了web、爬虫、数据分析、机器学习、深度学习、图像识别都是怎么回事，后来他介绍他们的业务，我说属于图像识别领域，需要专门招聘懂图像识别算法的工程师，这家公司就不提了，招聘需求没搞清楚，我也白跑一趟\n3、生物系统开发工程师 （offer）\n公司技术：django+docker+数据分析\n小公司，老板不太懂IT技术，平台已经搭建好，带admin后台，后期偏重更新维护，有新需求要做，主要用到django+数据分析  ，后期涉及Docker技术，可以边工作边学习，这个面试通过\n4、python全栈开发\n公司技术：django+前端\n小公司，上面只批准招1个人，进来需要前后端都做，之前的python团队全部离职，没人交接的烂尾项目，用的django框架，面试官是老乡，也是技术大牛，旁敲侧击跟我说不建议我来上班，他自己来不到一个月都打算离职了，这公司入职的话也能入职，说不定我入职了，他走了，后面我就是这个公司python面试官了\n5、python开发\n公司技术：django+数据分析\n公司业务较多，项目也很多，20多个产品经理，偏重web开发，也有算法岗，技术--人事--CTO三轮面试，大部分问题比较常见，问到cerely、深浅拷贝、redis的使用等等，整体面试过程沟通都还好，与CTO电话面试沟通也还好，等结果中\n6、爬虫+数据分析\n公司技术：爬虫+数据分析\n一个做java的面试官面试的，他就介绍了公司业务，主要是爬电商平台数据，技术问题一个没问，总监不在，他自己也不当家，留了简历信息就走了，应该没戏\n7、web全栈开发（offer）\n公司技术：django+flask+bootstrap+echarts.js\n大公司，目前项目用django搭建的运维网站，后面要用flask搭建另外一个网站，需要我一个人来做，前后端都要搞，不过需求不会很复杂，主要是前端最终能展示一些图表之类的，前端用到的库主要是bootstrap、echarts.js，我说以前学习过flask，不过还不熟练，可能需要现学下，那边同意，面试通过\n8、测试开发/服务器自动化开发\n公司技术：python+测试技术\n聊天过程还好，技术基本是测试方面的，如果去的话都是现学，相当于开发转测试，具体需要实现的是用python写脚本，程序来控制测试几百台手机，估计看出来我没打算做测试，后面走了没再约了\n9、python开发工程师\n公司技术：django+数据分析\n猎头介绍的，公司结构比较复杂，很多股东，上午两轮技术总监和人事总监都面了，面到12点，说可能还会有一个股东的技术老大再面下，等最后一轮面试\n10、web+数据分析\n公司技术：vue.js+tornado+数据分析+异步(前后端分离）\n初面技术问的很详细，这家公司做的项目十分类似我上家离职的公司的项目，都是做一个数据分析可视化的web网站，等待二面，需要做一个PPT，介绍自己觉得做的最好的项目，讲15分钟\n11、web+数据分析\n公司技术：vue.js+flask（前后端分离）\n项目总监熟悉python，而且很多项目以python为主要语言开发做的，不过预算不足，本来聊得还挺嗨，后来问了我期望薪资后，估计把他吓住了，直接说按我这期望的话他们这边成本太高，留了微信就走了\n面试体会：\n1、多看看招聘网站的招聘要求，你会发现那些很流行的技术，比如vue.js、restful风格、node.js、docker、前后端分离等等，我就不一个个提了，这些是很多公司在面试经常问你会不会的技术，多了解这些框架为什么这么流行，学会了在就业市场就会有很强的竞争力\n2、目前技术人员要会的技术要求越来越高，对python web开发来说，不少公司要求要懂前端vue.js、 node.js，反正我个人觉得，目前以及往后的就业行情来看，公司招聘人员在满足主要业务的需要下，会更倾向于招多元化的人，不光小公司如此，大公司亦如此，并且从个人最近面试的情况来看，后期较好就业的方向应该会侧重下面几个方向：\nweb全栈开发：django/flask/tornado + vue.js/node.js （前后端分离、restful风格），最好在懂bootstrap、图表之类的前端框架\nweb+数据分析：不少公司其实是有很多数据的，而且在研究数据分析/算法建模的公司确实比较多，而数据分析/算法的研究，很多公司都是想要将研究成果落地，而落地最容易实现的方式一般是web网站，基于这个现状，如果你熟悉web，又在数据科学领域有一定经验，后期就业竞争力也会很强，当然如果再会爬虫，也是更加锦上添花\n开发测试岗：很多公司有测试人员，经常用测试工具，但是开发能力偏弱，编写一些复杂的自动化脚本的能力不足，不少公司希望招聘那些又懂开发又懂测试的人才，但是这样的人才确实很难招，我遇到几家公司，沟通过程中，他们也提到，对于开发转测试的，可以给予一定学习期，可见这方面的复合人才是不少公司青睐的\n纯爬虫/纯分析与算法岗：如果单纯做这方面，往后公司招聘要求会越来越高，爬虫可能更多要求项目经验与反爬技术能力，分析算法可能要求学历+项目经验 + 数据结构与算法的底层功底，具体是不是这样的情况，可以向一些从事这方面的朋友了解\n3、面试题好好记下来，每次面试完，没回答上来的问题，都要多方找资料学习，面试多了，你就会发现怎么有些问题经常被问到，要善于总结，总结好了，你就会觉得面试就像开车，车开的多了，就稳了\n最近的面试题：不少问题各个公司都有问到\n1、TCP/UDP/HTTP协议区别？\n2、深拷贝浅拷贝\n3、简述一个前端请求的处理流程，在uwsgi/nginx/django之间的处理流程\n4、redis用过哪些数据结构？怎么保存的\n5、celery队列\n6、modelfirst   dbfirst区别？\n7、线程/进程/协程区别\n8、tornado框架\n9、向量化--one-hot编码/数据分箱\n10、栈、堆\n11、你知道的排序算法\n12、MySQL优化、多表查询\n13、Linux下找文件\n14、闭包\n15、Django模型类继承\n16、时间更新模型类\n17、Settings里面设置东西\n18、ajax请求的csrf解决方法\n19、机器数据分析/建模有什么感悟？\n20、爬虫原理\n21、redis为什么快？除了他是内存型数据库外，还有什么原因\n22、python2和python3的区别？\n23、你觉得python2的项目如果迁移到python3，困难会在哪里？"},
{"title": "5个酷毙的Python工具", "description": "jupyter 写的 Python 教程。 地址：http://jupyter.org/ Anaconda Python 虽好，可总是会遇到各种包管理和 Python 版本问题", "article": "工欲善其事必先利其器，一个好的工具能让起到事半功倍的效果，Python社区提供了足够多的优秀工具来帮助开发者更方便的实现某些想法，下面这几个工具给我的工作也带来了很多便利，推荐给追求美好事物的你。\nPython Tutor\nPython Tutor 是由 Philip Guo 开发的一个免费教育工具，可帮助学生攻克编程学习中的基础障碍，理解每一行源代码在程序执行时在计算机中的过程。通过这个工具，教师或学生可以直接在 Web 浏览器中编写 Python 代码，并逐步可视化地运行程序。如果你不知道代码在内存中是如何运行的，不妨把它拷贝到Tutor里可视化执行一遍，加深理解。\n地址：\nhttp://www.\npythontutor.com/\nIPython\nIPython 是一个 for Humans 的 Python 交互式 shell，用了它之后你就不想再用自带的 Python shell 了，IPython 支持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多实用功能和函数，同时它也是科学计算和交互可视化的最佳平台。在公众号【Pyhon之禅】回复 “ipython” 获取《IPython交互式编程和数据可视化教程》。\n地址：\nhttps://\nipython.org/\nJupyter Notebook\nJupyter Notebook 就像一个草稿本，能将文本注释、数学方程、代码和可视化内容全部组合到一个易于共享的文档中，以 Web 页面的方式展示。它是数据分析、机器学习的必备工具。在公众号【Pyhon之禅】回复 “jupyter” 给你看一个基于 jupyter 写的 Python 教程。\n地址：\nhttp://\njupyter.org/\nAnaconda\nPython 虽好，可总是会遇到各种包管理和 Python 版本问题，特别是 Windows 平台很多包无法正常安装，为了解决这些问题，Anaconda 出现了，Anaconda 包含了一个包管理工具和一个Python管理环境，同时附带了一大批常用数据科学包，也是数据分析的标配。之前在公众号有介绍过 Anaconda\n地址：\nhttps://www.\nanaconda.com/\nSkulpt\nSkulpt 是一个用 Javascript 实现的在线 Python 执行环境，它可以让你轻松在浏览器中运行 Python 代码。使用 skulpt 结合 CodeMirror 编辑器即可实现一个基本的在线Python编辑和运行环境。\n地址：\nhttp://www.\nskulpt.org/"},
{"title": "Python 的开发效率真的比 Java高吗？", "description": "则动态语言维护起来可能反而更加省心。 实际上，Python开发的中型、大型项目很多，包括各类底层库、框架、大型系统等等。Python的系统库自然也是用Python开发的。Python的生态系统非常优秀", "article": "多说一句，用Python开发项目的，可以试试pylint之类的工具，还是能检查出一些常见的问题的，当然还是那句话，测试（TDD）为主\n======================================================\n统计了一下两个主要负责的项目的行数，只计.py文件，不计空行，计注释和docstring\n一个是开源的VLCP\nhubo1016/vlcp\n源代码约45000行，单元测试约3500行，集成测试1411行，开发三年左右了，最近升到了Python 3.5+\n另一个是公司内部使用的项目，代码约23000行，集成测试7000行，单元测试700行左右，Python 3.6+，这个项目包括web前端、Python后端等多个组件，CI相关的shell脚本有一千行左右\n这两个项目个人认为都是很成功的，也不难维护，以后一个为例，小的新需求一般2小时到一天就能上线，大的功能版本有时候要开发一个月，后端是两到三人的小团队。\n======================================================\n总是看到说Python不能开发大型项目的说法，对这个问题我是这样理解的：\n从结论上来说，觉得Python开发项目不好维护，可能有两个方面的原因：1. 不熟悉Python的特性，沿用了Java等静态语言的开发模式和思路 2. 设计水平还不到家，走了弯路\n尤其是，我们后面会提到，\n如果设计水平不够，或者开发时没有严守设计，动态语言代码劣化得会比静态语言快得多。但反过来，如果设计优秀，开发时严守设计，则动态语言维护起来可能反而更加省心。\n实际上，Python开发的中型、大型项目很多，包括各类底层库、框架、大型系统等等。Python的系统库自然也是用Python开发的。Python的生态系统非常优秀，其实也是Python工程能力出众的表现。\n再比如说有人举Google的例子，Guido亲自编写的项目后来用Java重写了，我们来看一下官方的说法（来自Gerrit官方网站）：\nGoogle Mondrian\nGoogle developed \nMondrian\n, a Perforce based code review tool to facilitate peer-review of changes prior to submission to the central code repository. Mondrian is not open source, as it is tied to the use of \nPerforce\n and to many Google-only services, such as \nBigtable\n. Google employees have often described \nhow useful Mondrian and its peer-review process is\n to their day-to-day work.\n……\nThe Rietveld fork\nGerrit Code Review started as a simple set of patches to Rietveld, and was originally built to service AOSP. This quickly turned into a fork as we added access control features that \nGuido van Rossum did not want to see complicating the Rietveld code base. As the functionality and code were starting to become drastically different\n, a different name was needed. Gerrit calls back to the original namesake of Rietveld, \nGerrit Rietveld\n, a Dutch architect.\nGerrit 2.x rewrite\nGerrit 2.x is a complete rewrite of the Gerrit fork, changing the implementation from Python on Google App Engine, to Java on a J2EE servlet container and a SQL database.\n以及一个第三方的资料（引用自\nGerrit: Google-style code review meets git\n）\nMondrian \nhas been a huge success inside Google\n, Pearce said. \"Almost every engineer uses this as their daily thing.\" But Mondrian is heavily dependent on Google's internal infrastructure, including the in-house \nBigtable\n non-relational table store and the proprietary \nPerforce\n revision control system. Google is a huge Perforce shop, and has built its own highly-customized IT infrastructure, including Perforce-dependent tools.\n……\nShawn Pearce, who \npreviously reimplemented git in Java\n as JGit, and is now at Google, took on the project; the result is \nGerrit Code Review\n, now used to track \npublic proposed changes to Android\n. Android's applications are \nwritten in Java\n, so writing the new tool in that language should make it more accessible to would-be contributors among Android developers.\n也就是说：\nGuido用Python开发了这个项目，并且取得了巨大的成功\n后来这个项目被一个显然是Java专家的人接手了\n大量的业务逻辑发生了变更，后来整个用Java重写了一遍\n这个我认为显然不是Python的问题，而是项目leader的个人差异的问题，后来接手的人并不认可Guido的思路，重新按自己的思路发展了这个项目，导致了一些难以解决的设计冲突，最终决定重写将它理顺。如果Python开发大型项目有问题，为什么这个项目在Guido在的时候就是好好的，从Google内部迁移到Google App Engine的时候也没有出什么问题？将这个一个结果归到语言的身上，显然是看Guido走了之后的甩锅行为。\n对于我个人来说，我最近几年的所有的项目都是用Python开发的，开源的有VLCP，不开源的有公司的若干内部系统，在上线之后的迭代中，从没有产生过动态语言难以重构的感想。事实上，因为我很少开发Java，我本身也很少使用IDE的refactoring功能，以前编写C++的时候也没有用过，有些代码是直接用没有装额外插件的vim（只有语法高亮）编写的。\n可以先配合阅读我以前写过的几篇文章：\n灵剑：Python函数接口的一些设计心得\n灵剑：语言特性与对设计的影响\n在做程序员的道路上，你掌握了什么概念或技术使你感觉自我提升突飞猛进？\n对于一个项目来说，\n能用\n的代码很多，\n正确\n的代码往往只有一种或者少数几种。\n什么是正确的代码？\n代码的逻辑结构精确反映了业务的结构。代码的逻辑层级精确反映了业务在不同层次上的抽象。\n业务中的不变性成为框架性的基础；业务中灵活多变的部分成为顶层代码、DSL、配置或者插件，从而能够方便地修改\n代码有非常好的一致性，相同的业务对象用相同的类型表示，同类的业务对象用相同的接口表示，相同的业务逻辑用同一段代码实现，相似的业务逻辑用相同的抽象模型+不同的参数实现，独立的业务逻辑用独立的接口和模块实现。\n业务模型中的保证和约束与代码中的假定完全一致，比如说，永远不假定某个网络请求一定会成功，永远不传入一个哪怕只是理论上可能超出允许范围的值。\n可以看出，正确代码的定义和语言没有什么关系，它完全取决于代码与业务的结构关系，取决于代码是否与业务的抽象同构。因此，要写出正确的代码，首先必须要能正确地理解业务，做出对业务的优秀的抽象模型，然后基于模型做出代码模块、类和接口的设计，关键在于建模，而建模本质上来说是个数学问题。许多人可能推崇用编程语言思考，比如Thinking in Java，Thinking in C++，在我看来，其实应该首先Thinking in Mathematics，然后思考相应的数学模型如何用编程语言最佳地表示。国内常见的产品经理不懂技术，架构设计不懂业务的情况，对于做出正确的设计来说是非常糟糕的。\n实际上，用任何常见的语言都能写出正确的代码，但这些正确的代码的设计不尽相同，有时候会跟语言特性有关，并不是Java所有的语言特性Python都支持，那么Java中正确的代码并不是逐字翻译过来就是Python中正确的代码，那只能叫做\n能用\n的代码。原因在于虽然数学建模是相似的，但编程语言的表意方式不同，有时候需要将相应的模型转化为不同的编程概念。\n对于正确的代码来说，使用动态类型语言和静态类型语言开发效率是接近的，静态类型语言的某些\n限制\n会轻微地成为写出和维护正确代码的障碍。\n注意我用限制而不是功能来描述静态类型。\n举个例子来说，一个接口有三个成员函数，某个过程A使用其中前两个，而某个过程B使用其中后两个。实际上我们可以发现，实际过程A需要的并不是这个接口，而是只包含前两个成员函数的某个“子接口”，类似地，过程B需要的也是另一个不同的子接口。但是像Java这样的语言因为接口必须声明，所以通常为了方便，将它们合成一个接口来使用。但未来，真的不会出现只有前两个成员函数、而没有第三个成员函数的类型吗？这就是类型与抽象捆绑在一起导致的限制。相对来说，Go将类型与接口彻底分开，就是一个很有用的设计，虽然接口仍然要明确定义出来才能使用，不如动态语言方便，但因为提供了类型检查，算是一个权衡过的方案。而对动态语言来说，用到的就是接口限制的一部分，没有用到的就不是，也就是duck type，这个duck type是跟着代码实现一起变化的，优势就在于实现变更时，duck type随着实现一起变更，而不用单独维护；甚至，同一个参数可以在不同条件下依赖不同的成员函数，例如某个接口可以自动检测传入的参数是哪一个接口版本，从而自动实现兼容老版本的代码。\n对于正确的代码来说，业务模型已经理清，需要的只是将业务模型映射到接口，然后分别实现每个接口。任何编程语言都可以轻易做到这个。对于动态语言来说，因为不需要写出类型，也可以充分利用动态特性，编码量会小一些，但静态语言也可以靠自动补全来弥补这个劣势。动态语言没有静态类型检查，但如果业务逻辑清晰，接口定义明确，类型检查的作用并不是不可或缺的：比如，某个接口传入的参数是用户名，一个熟悉业务逻辑的人一定会知道用户名的类型是字符串；调用这个接口的人也一定会把某个用户名传进去，如果他传了用户ID，那肯定是编码的时候很不认真才会犯这种错误。这种错误也不是光靠类型系统就能纠正的，如果用户有UUID，UUID也是字符串，类型检查就发现不了问题了。\n在业务逻辑发生变化（需求变更）的时候，动态语言在维护正确的代码时有一定优势\n有几方面的原因：\n通过充分利用动态特性和duck type，能更容易将新的业务逻辑融合到老的框架中，而尽量不变更老的业务代码。\n比如说，在上层代码不变的情况下，将底层实现迁移到新的库或者组件，比如从ZooKeeper迁移到etcd，在这个过程中，许多由上层业务逻辑保存的对象的类型都会发生改变，如果以前没有做好依赖倒置的设计，现在可能就需要重新修改许多代码。反过来，如我们以前说过的，动态语言的duck type天生就是一种接口依赖，只要保存的对象和以前有相同的接口，就完全不需要修改代码，我们只需要在新的etcd适配层上，实现和以前zookeeper接口完全相同的功能即可。\n业务逻辑发生整体调整的时候，有时需要将某一段实现从一个模块移动到另一个模块中，在静态语言中一般通过IDE的refactoring功能进行。而在动态语言中，直接将类和函数复制到另一个文件中就可以了。\n有人可能会问，那调用方怎么办，调用老的位置的模块的代码不就不能用了吗？但实际上，如果是因为功能迁移导致的实现移动，老的代码仍然调用这个接口本来就是有问题的，因为业务上这段逻辑应该已经发生变化了，要么这时候不应该调用了，要么这时候应该调用的是一个新接口，然后从新接口中再来调用这个迁移过的功能。如果只是无脑将调用方都改到新的地址，可能会导致代码的调用层次与业务逻辑不同构，让正确的代码降格为能用的代码。\n不过，因为静态语言有IDE加持，可以充分利用refactoring的功能，大部分问题也都是可以弥补的，但必须要看到：对于动态语言来说，在维护正确的代码的时候，这些工作本身就是不必须的。\n开发出正确的代码是很困难的\n实际上，由于优秀的架构师很少，大部分架构师根本不合格，许多公司并没有正确的代码，只有能用的代码，这些项目也有一些特征：\n设计里充满了各种因为主观喜好而添加进去的设计模式和接口，完全对应不上实际的业务；实际的业务中本来清晰的逻辑，被拆到了各种乱七八糟的地方，通过奇奇怪怪的hack完成\n找不出一个能用简洁、一致的语言，清晰描述出业务逻辑模型的人。有的人只知道自己做的一点点东西，有的人能列举出一堆业务场景，但是形成不了模型\n代码依赖很多实际业务中并不一定成立的假定（客户一定不会同时访问XXX和XXX，输入的XXX都是XXX），许多假定已经被证明是无效的，然后通过调用者的代码逻辑hack过去\n三天两头出业务逻辑bug，修修补补，谁也没法保证代码运行的效果和需求一致，甚至拿出一个输入，有可能每个人理解它“应该”的输出都是不一样的\n经常要在推倒重写和把代码修改得更丑之间艰难抉择\n代码里有一大堆谁也说不上是什么用，就是不敢删的东西\n如果有的人一直都在维护这样的代码，那他就会以为动不动就重构是理所当然的事情，就无法理解为什么动态语言也可以用来开发项目。\n要开发出正确的代码，以下的条件都必须具备：\n要有一个精确的业务模型和分层级的业务抽象\n要有清晰的业务模型映射到代码实现的方案，并在组员中达成一致\n必须有精通前两点的人为代码质量把关，严格拒绝所有与设计不符的代码\n发现设计错误的时候，要勇于改正，哪怕会因此变动大量代码\n为了让第四点有底气，必须有自动化的测试系统来提高开发测试的效率，保障代码正确率和测试覆盖率，\n这一点对于动态语言尤为重要\n。\n实际上，即使是静态语言，如果你只在上线之前才简单手工测一下，你根本就是在撞大运。没有时间根本不是借口，无非就是懒惰而已。\n动态语言较容易改对，但更容易改错\n我们前面分析了动态语言在修改维护上实际上有一定的优势，但是反过来，如果没有一个优秀、强大的leader来为代码质量把关，动态语言劣化起来会比静态语言快得多，这一般来自于一些缺乏自律的程序员：\n动态语言普遍没有访问级别检查（private，protected），一个缺乏自律的程序员为了实现逻辑，会轻易选择调用没有开放的内部接口和成员，而不是仔细设计外部接口，从而严重破坏设计\n动态语言改变接口很容易，一个缺乏自律的程序员会在没有经过批准的情况下，擅自为设计好的接口添加额外的参数，以不符合设计的方式实现某些逻辑，从而严重破坏设计\n动态语言一般不需要明确定义类的成员字段，可以随意为对象添加字段。一个缺乏自律的程序员会擅自通过自己新添加的字段来传递某些数据，而不通过接口参数，或者将不属于某个对象的数据保存在对象上，从而严重破坏设计\n动态语言一般可以通过一些高级的动态特性实现特殊的效果。一个缺乏自律的程序员可能会在没有必要的情况下，仅仅因为个人的兴趣而擅自使用这些动态特性实现一些破坏可读性和接口假设的特性，从而严重破坏设计\n为了图方便，一个缺乏自律的程序员可能会将新增加的逻辑添加在比较顺手的地方，而不是与设计层级相符的地方，从而严重破坏设计。这一点静态语言也难以避免。\n我们可以注意到，这些全部都是主观原因、故意操作，完全可以通过自律和code review来避免。如果这样的破坏没有得到遏制，代码就会迅速劣化，从正确的代码变成能用的代码，从能用的代码变成难用的代码，从难用的代码变成不可用的代码。\n能用的代码，如果不积极改造为正确的代码，往往会被迫进一步劣化，因为设计错误，某些需求无法实现，就会做出更奇怪、错得更离谱的设计，这一点在动态语言上也尤为明显。\n静态类型语言代码也会劣化，但由于语言本身的限制，一般劣化得比较慢而不明显，但如果仔细研究那些能用的代码，通常早就已经千疮百孔了，这些劣化往往是下一次需求变动时候引起重大困难的原因。所以某种意义上来说，静态语言更适合维护那些能用的代码，减缓他们劣化的速度。\n总结\n无论是静态语言还是动态语言，项目是否可维护，都主要取决于业务模型、设计、代码是否正确\n动态语言在维护正确代码时略有优势，但静态语言经过IDE加持之后差别不大\n如果没有强有力的leader控制局面，动态语言进火葬场的速度的确非常快，但不是动态语言的错\n多说一句Java，我认为Data Class、getter、setter这些真的是特别糟糕，原生的Array和Map又不给力，开发效率上要提上来，可能还是需要有一套行之有效的开发规范和开发工具的，说实话，我是有点用不来这玩意。Go，除了没有异常恶心点，其他还可以。"},
{"title": "30 个惊艳的Python开源项目", "description": "是该拿出时间来玩玩过去一年中可能错过的Python项目啦！ Python开源项目排行榜 第一名 家庭助理（v0.6+）：开源家庭自动化平台 在Python 3上运行[Github上11357颗星]", "article": "在过去的一年里，Mybridge AI 比较了近15000个开源Python项目，选择了前30名（概率只有0.2%）。\n这是一个竞争异常激烈的名单，精挑细选了2017年1月到12月之间发布的最佳开源Python库、工具和应用程序。Mybridge AI 通过考量受欢迎程度、参与度和新近度等指标来评估这些参选项目的质量。这些项目在\nGithub上得星的数量平均为3,707个\n。\n开源项目对于程序员来说可能大有裨益。通过阅读源代码并在现有项目之上构建一些东西。是该拿出时间来玩玩过去一年中可能错过的Python项目啦！\nPython开源项目排行榜\n第一名\n家庭助理（v0.6+）：开源家庭自动化平台\n在Python 3上运行\n[Github上11357颗星]\n。由Paulus Schoutsen提供\n第二名\nPytorch：强GPU加速Python中的Tensor和动态神经网络\n[Github上11019颗星]\n。由Adam Paszke 和pytorch团队其他成员提供\n第三名\nGrumpy：一个Python源代码反编译和运行\n[Github上8367颗星]\n。由Dylan Trotter和Google的其他成员提供\n第四名\nSanic：异步Python3.5+Web服务器加速\n[Github上8028颗星]\n。由Channel Cat和Eli Uriegas提供\n第五名\nPython—fire：从任意Python对象中自动生成命令行接口（CLIs）的库\n[Github上7775颗星]\n。由David Bieber和来自Google Brain（Google Brain是Google内部用于训练大规模深度神经网络的构架，它为用户提供了方便的API）的其他成员提供\n第六名\nspaCy(v2.0)：用Python和Cython实现工业强度的自然语言处理（NLP）\n[Github上7663颗星]\n。由Matthew Honnibal提供\n第七名\nPipenv：人类的Python开发工作流\n[Github上7273颗星]\n。由Kenneth Reitz提供\n第八名\nMicroPython：简单和高效的Python实现微控制和约束系统\n[Github上5728颗星]\n第九名\nProphet：生成具有线性或非线性增长的多重季节性的时间序列数据的高质量预测工具\n[Github上4369颗星]\n。由Facebook提供\n第十名\nSerpentAI：用Python编写的游戏代理框架。帮助创建Ais/Bots，可以玩任意游戏\n[Github上3411颗星]\n。由Nicholas Brochu提供\n第十一名\nDash：用纯Python编写的交互的、实时响应的Web应用程序\n[Github上3281颗星]\n。由Chris P提供\n第十二名\nInstaPy：Instagram Bot. Like/Comment/Follow自动化脚本。\n[Github上3179颗星]\n。由TImG提供\n第十三名\nApistar：一个快速的和有表现力的API框架。用于Python\n[Github上3024颗星]\n。由Tom Christie提供\n第十四名\nFaiss：有效相似性搜索和密集向量集群的库\n[Github上2717颗星]\n。由Matthijs Douze和来自Facebook研究院的其他成员提供\n第十五名\nMechanicalSoup：一个与网站自动化交互的Python库\n[Github上2244颗星]\n。\n第十六名\nBetter-exceptions：用Python编写的自动地漂亮的和有用的异常处理\n[Github上2121颗星]\n。由Qix提供\n第十七名\nFlashtext：从句子中提取关键词或替换句子中的关键词\n[Github上2019颗星]\n。由Vikash Singh提供\n第十八名\nMaya：用Python实现人类的日期时间\n[Github上1828颗星]\n。由Kenneth Reitz提供\n第十九名\nMimesis (v1.0)：Python库，有助于为不同的目的以不同的语言生成模拟数据。这些数据在软件开发和测试的不同阶段特别有用\n[Github上1732颗星]\n。由Líkið Geimfari 提供\n第二十名\n开放式无纸化：扫描、索引和归档所有的纸质文档。一个文档管理系统\n[Github上1717颗星]\n。由Tina Zhou提供\n第二十一名\nFsociety：黑客工具包。渗透测试框架\n[Github上1585颗星]\n。由Manis Manisso提供\n第二十二名\nLivePython：实时可视化跟踪Python代码\n[Github上1577颗星]\n。由Anastasis Germanidis提供\n第二十三名\nHatch：用于Python的现代项目、包和虚拟环境管理器\n[Github上1537颗星]\n。由Ofek Lev提供\n第二十四名\nTangent:用纯Python实现源到源的可调试导数\n[Github上1433颗星]\n。由Alex Wiltschko和来自Google Brain其他成员提供\n第二十五名\nClairvoyant：识别和监控短期股票走势的历史线索的Python程序\n[Github上1159颗星]\n。由Anthony Federico提供\n第二十六名\nMonkeyType：Python通过收集运行时类型生成静态类型注释的系统\n[Github上1143颗星]\n。由Instagram工程组的Carl Meyer提供\n第二十七名\nEel：一个小的Python库，用于制作简单的电子类HTML / js GUI应用程序\n[Github上1137颗星]\n。\n第二十八名\nSurprise v1.0：建立和分析推荐系统的Python scikit\n[Github上1103颗星]\n。\n第二十九名\nGain：获取每个人的Web爬行框架\n[Github上1009颗星]\n。由高久力提供\n第三十名\nPDFTabExtract: 一组从PDF文件中提取表的工具，有助于对扫描文档进行数据挖掘\n[Github上722颗星]\n。"},
{"title": "这些是 Python 官方推荐的最好书籍（推荐）", "description": "其他自己看吧） 五：有经验的程序员学 Python 可以看 六：孩子看的 Python 书 七：免费下载资源 Free Python books - pythonbooks", "article": "简评：Python 官方有一个推荐书单「\nPythonBooks.org\n 」，这里面涵盖了从初学到入门再到精通（并没有到放弃）的各个阶段，最好的学习书籍。园长整理了列表方便查找对应的中文版。\nPython 官方书单列表：\nPythonBooks.org\n \n这个列表中有七大类书籍：\n一：编程初学者的书籍\n二：中级 Python 程序员书籍\n掌握语言\n程序实操\n三：参考书\n四：专题书籍\n算法和数据结构\n生物学\n计算机安全\n工程学\n金融学\n地理信息系统\nGUI 开发\n计算机视觉和图形学\n计算机高性能\n机器学习和 AI\n微控制器\n网络编程\n自然语言处理\n数值编程和数据挖掘\n树莓派\n网络爬虫\nweb 开发\n五：刚接触 Python 的老程序员\n六：给孩子看的 Python 书\n七：可免费下载的书籍\n因为每一个表单很长，我只放上这个类目前三的书籍（我\n会附上上京东中文版书籍的截图\n）。\n如果想看完整列表，请访问 \nFind the best Python books - pythonbooks.org\n。\n无水印版请在公众号「极光开发者」，回复「python书单」\n一：初学编程，这些书籍适合你（前三名）\n：\n二：中级 Python 程序员：\n掌握语言：\n实践：\n三：相关书籍\n四：专项书籍（这个分类太多我就贴机器学习和 AI 了，其他自己看吧）\nPython 的机器学习和 AI\n五：有经验的程序员学 Python 可以看\n六：孩子看的 Python 书\n七：免费下载资源 \nFree Python books - pythonbooks.org\n很多免费的 python 学习书籍，都是英文版。\n以上。\n没有原文，只有官网：\nFind the best Python books - pythonbooks.org\n园长：\n我整理的那个中文版书单，有个别几个还没中文版，就直接贴上了英文版的图。\n另外，想要高清无水印书单的原图，请关注公众号「\n极光开发者\n」，回复关键字「\npython书单\n」。\n极光日报，\n极光开发者\n旗下媒体。\n每天导读三篇英文技术文章。"},
{"title": "一行Python代码能做什么？", "description": "原文在：一行 Python 代码 自从08年接触Python，就有爱不释手的感觉，逐渐地，有些不忍地疏远了Perl 和Shell编程，因为python 的优雅么？", "article": "很典型的文章，基本可以展示Python代码到底有多黑魔法。虽然文中有些案例连我都觉得走火入魔，但真的很值得一看。。。\n原文在：\n一行 Python 代码\n自从08年接触Python，就有爱不释手的感觉，逐渐地，有些不忍地疏远了Perl 和Shell编程，因为python 的优雅么？ 不全是，主要是可以高效开发吧。\n那一行代码可以干什么呢？\n有趣\n我孩子的英文名叫andy，也许当初教他写程序的时候，如果先秀一下这行代码，可能就更能激起他对代码的兴趣了。\n>>> print'\\n'.join([''.join([('AndyLove'[(x-y)%8]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3<=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)])\n再python 里执行它，会输出一个字符拼出的心形。\n字符图形还是很有趣的，有一个著名的图像叫mandelbrot。Mandelbrot图像中的每个位置都对应于公式N=x+y＊i 中的一个复数，高中学过复数的都还应该有印象。每个位置用参数N来表示，它是x＊x+y＊y的平方根。如果这个值大于或等于2，则这个数字对应的位置值是0。如果参数N的值小于2，就把N的值改为N*N-\nN（N=（x*x-y*y-x）+（2*x*y-y）*i）），并再次测试这个新N值。wiki百科给出的图像是这样的：\n让我们用一行代码画一个Mandelbrot：\n>>> print'\\n'.join([''.join(['*'if abs((lambda a:lambda z,c,n:a(a,z,c,n))(lambda s,z,c,n:z if n==0else s(s,z*z+c,c,n-1))(0,0.02*x+0.05j*y,40))2 else' 'for x in range(-80,20)])for y in range(-20,20)])\n高效\n对于随手小工具而言，更是Python的拿手好戏。\n一行代码打印九九乘法表:\nprint '\\n'.join([' '.join(['%s*%s=%-2s' % (y,x,x*y) for y in range(1,x+1)]) for x in range(1,10)])\n输出：\n一行代码计算出1-1000之间的素数\nprint(*(i for i in range(2, 1000) if all(tuple(i%j for j in range(2, int(i**.5))))))  \n一行代码可以输出前100项斐波那契数列的值：\nprint [x[0] for x in [ (a[i][0], a.append((a[i][1], a[i][0]+a[i][1]))) for a in ([[1,1]], ) for i in xrange(100) ]]\n一行代码实现阶乘，而且还带交互：\n>>> reduce ( lambda x,y:x*y, range(1,input()+1))\n10\n3628800\n一行代码实现摄氏度与华氏度之间的转换器：\n>>> print((lambda i:i not in [1,2] and \"Invalid input!\" or i==1 and (lambda f:f<-459.67 and \"Invalid input!\" or f)(float(input(\"Please input a Celsius temperature:\"))*1.8+32) or i==2 and (lambda c:c<-273.15 and \"Invalid input!\" or c)((float(input(\"Please input a Fahrenheit temperature:\"))-32)/1.8))(int(input(\"1,Celsius to Fahrenheit\\n2,Fahrenheit to Celsius\\nPlease input 1 or 2\\n\"))))\n1,Celsius to Fahrenheit\n2,Fahrenheit to Celsius\nPlease input 1 or 2\n1\nPlease input a Celsius temperature:28\n82.4\n>>>\n至于字符串排序和快速排序更是手到擒来。\n\"\".join((lambda x:(x.sort(),x)[1])(list(‘string’)))\n\nqsort = lambda arr: len(arr) > 1 and qsort(filter(lambda x: x<=arr[0], arr[1:] )) + arr[0:1] + qsort(filter(lambda x:x>arr[0], arr[1:] )) or arr\n内涵\n看一看下面一行python代码，可能就要晕了：\n这是原来为了激发孩子编程兴趣，让孩子练习的代码，它的真实面貌是大致这样的：\ndef guess_my_number(n):\nwhile True:\nuser_input = raw_input(\"Enter a positive integer to guess: \")\nif len(user_input)==0 or not user_input.isdigit():\nprint \"Not a positive integer!\"\nelse:\nuser_input = int(user_input)\nif user_input > n:\nprint \"Too big ! Try again!\"\nelif user_input < n:\nprint \"Too small ! Try again!\"\nelse:\nprint \"You win!\"\nreturn True\nguess_my_number(42)\n实际上，只要理解了函数式编程，使用神奇的Lambda，配合列表推导以及复杂一点的判断语句，任何的python 代码都可以转换成一行代码的。\n例如，取一个列表里的随机数\nimport random as rnd\nprint rnd.choice([2,3, 5,7, 11,13,17])\n转换成Lambda 可以是：\nprint (lambda rnd: rnd.choice([1, 2, 3, 10]))(__import__('random'))\n这些代码出了觉得好玩，主要是可以\n帮助我们了解某些Python的雕虫小记，尤其是神奇的Lambda 用法。\n延展\n当然，还有其他好玩的地方，输入下面这一行\nimport antigravity\n它打开了浏览器，展示网站上的漫画和相关内容：\n我们可以把python的文件打包，做成库的形式，然后import进来，是一种偷换概念和前提的一行代码。例如，为了与windows 传输文件，再Mac上临时搭个ftp：\n$ python -m pyftpdlib\n这当然要依赖pyftpdlib 这个库了，机器上没有，pip install pyftpdlib 就可以了。\n如果一行代码中允许分号存在，那就只是牺牲可读性而已了，那就基本上无所不能。\n在连网的前提下，获取公网IP地址\npython -c \"import socket; sock=socket.create_connection(('ns1.dnspod.net',6666)); print sock.recv(16); sock.close()\"\n一行代码就可以轻易写个小游戏了，来模拟一下golf击球。\npython -c \"import math as m;a,v=eval(input());[print('%03d'%x+' '*m.floor(0.5+x*m.tan(a)-x*x/(v*m.cos(a)))+'o') for x in range(102)]\"\n输入角度和力量大小如（0.8,80)，就能得到一条字符描画的抛物线了。\n增加上while 等语句，画一个没完没了的\npython -c \"while 1:import random;print(random.choice('╱╲'), end='')\"\n最后，一行代码以python 的哲学结束吧。\n$ python -c \"import this\"\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n你想更深入了解学习Python知识体系，你可以看一下我们花费了一个多月整理了上百小时的几百个知识点体系内容：\n【超全整理】《Python自动化全能开发从入门到精通》笔记全放送"},
{"title": "闲话Python, Go, Java", "description": "2019年6月加入字节跳动（Python & go），Python & go 还处于入门阶段，所以笔者的见解只能当闲话听听。 入职字节跳动一个多月了，现在每天在 python 和 go之间切换", "article": "简要介绍下笔者从业经历，2017年5月加入饿了么（Java），2019年6月加入字节跳动（Python & go），Python & go 还处于入门阶段，所以笔者的见解只能当闲话听听。\n入职字节跳动一个多月了，现在每天在 python 和 go之间切换，偶尔也会用Java。线上服务是在往golang迁移，和饿了么一样Python已经被无情的抛弃了。\nPython\n这条「蟒蛇」语言的确足够简单，上手会非常快，业界的支持程度和使用率也是非常高，特别在机器学习，数据处理的领域。\n但是我是在业务代码开发中使用Python，从我个人使用它的感觉而言，这个语言的自由明显是一把双刃剑，写代码时候节约的时间在后面debug的时候，都会还回去，甚至要付出更多，这种解释型语言不会给你的错误予以提醒，直到运行崩溃为止；另外在团队协作的时候，稍微不注意就有点不可控，别人的函数返回个啥，完全不知道，甚至要通过 print 的方式才能知道里面内容，使用这个语言需要团队里大家都能按规矩办事，如果所有人都图自己方便，后果将非常可怕。\n饿了么早期是Python大厂，在2017年决定放弃Python，迁移Go，只不过这件事才刚起步，就被阿里收购，收购后当然要拥抱阿里集团技术体系，所以是将Python迁移Java，而这件事做的过程也是波折万分。加入字节跳动，发现字节跳动也在Python迁移Go。\n放弃这个语言的最重要原因，还是效率。\n如果你个人开发者或者是一个小APP，只用一台或者几台机器部署，效率不会当成第一要素；但是如果的服务部署在成千上万台机器上的时候，因语言效率而节约的成本就非常明显了。众所周知 Python并不是真正的多线程语言，存在全局的GIL导致同时只能有一个线程能运行，无论你拥有多么牛掰的多核CPU，一个时刻工作的只能有一个，其他核也只能空闲。\n而放弃Python后，无论是使用Go或者Java都能节约掉2/3左右的机器。\nGo\n再来说说go语言吧，这个语言最近很热，很多后起之秀的互联网大厂都用了这个语言作为主要语言，包括三年上市的趣头条，字节跳动也在执行go语言化，很多知名的区块链项目也采用go语言。\nGo的优势很多，语言层面原生对协程的支持，让它在效率上备受追捧；含着金钥匙出生的名门贵族，从一出生就备受瞩目！但是，当你使用它的时候，和Java比起来，还是会觉得这个语言不够完善。\n首先包管理上踩过一些坑，早期我们使用 go vendor 管理依赖，把依赖的代码库到放到项目的vendor目录下，但是这会导致项目非常臃肿并且在协作中也容易出现代码冲突的情况。后来使用了 go mod 情况有所好转。go mod 的方式类似maven，把所有依赖的项目按照版本号放在一个本地仓库中，项目中使用go mod 文件来配置依赖的项目。\n虽然go语言执行速度和编译速度都很快，但是，但是，go要编译它依赖的代码。我们在使用 Java的时候，依赖都是通过jar的方式集成到最后的发布包中，jar里面提供的是编译好的class文件，不需要再次编译。所以每次发布只需要编写我们项目的代码。但是 go 不是运行在虚拟机上的语言，它不存在类似 java class 这种状态，所以当项目大了以后，编译非常耗时。目前我开发的项目，编译一次要15分钟以上，在debug阶段真是非常痛苦。除非大家都把项目精简，模块直接合作通过rpc，一旦依赖变多，编译会成为让开发者难受的痛点。\n目前它还不支持范型，它的作者们还在考虑给语言支持范型，在没有范型的go里，如果你要写支持各种类型的 min 函数，你要像如下动图一样：\ngo语言的已经开始规划方案要支持范型，但是听闻支持范型的版本可能无法兼容之前的版本，是不是让我联想到python2 -> python3，如果语言最后不能向下兼容，恐怕对于想使用新特性的开发者来说，真的是巨坑。\nJava（喝杯咖啡，轻松一下）\nWrite Once，Run Everywhere！（刚提到Go语言里需要编译依赖非常耗时的事情，在Java里是不存在的，因为 class 这种字节码编译一次后，真的可以Run Eveywhere）\n可以看下下面的统计数据，Java在后端开发领域应该是当之无愧的“王”。这个语言可以多年稳居第一，一定是有原因的。\n首先我觉得它是最完整的语言，完整表现在它语言本身和社区， Go使用者痛点的范型，错误处理都相对完善；包管理Mava，Gradle等工具也是相当成熟；社区里，只要Java能做的事，终将都会被实现；并且这个语言迭代的也足够快，可以看下这个总结，关于 Java 各个版本支持的特性：\nJava各个版本特性\nJava 8 支持 lamda 表达式和 stream api 的时候，就让我觉得这个语言演化很大，似乎不像Java了，Java 10 居然还支持 var 局部变量类型推断，这岂不是要和Go站上一个台阶的节奏！从我个人的感受角度，Java 的确是在吸收各种语言的精华，记得第一次见stream api还是在swift 语言里，当时苹果发布swift的时候好奇就去自学了一点点，结果不久java 就支持了stream api；var局部变量类型推断，目测也是看了例如go之类的语言如此便捷的声明变量的方式后，自惭形秽搞出来的东西。\n相比于 Go ，它只是在第三方框架层面支持了协程，如果只从调度效率和开销的角度而言，Java的协程实现不如Go，具体可以通过文章了解：\nhttps://\nblog.csdn.net/zdy0_2004\n/article/details/51323583?utm_source=blogxgwz0\n但是要说这个语言有什么特别不爽的地方，还真感觉不到；相比于 Python 它足够快，相比于Go它的语言更完善，即使从效率角度说，如果是 web 开发，它的效率也丝毫不差，因为大多数的 web 开发都是同步模型——即，需要即时反馈（用户点要立即相应），处理流程有上下文依赖的串行的状态下，而在这种同步模型中，并发所带来的效率提升，其实非常有限。\n结论\n当然，也没有什么结论，语言之争一直是程序员们非常喜欢津津乐道的话题，只是一点建议。\n如果是在数据处理，机器学习等很多离线场景，感觉Python还是非常合适的，从协作上往往需要参与的人更少，语言自由的好处可以得到更好的发挥，并且业界也在这方面给予足够的支持；\n如果是一些中间件系统，需要特别高的并发和吞吐，很多处理可以转化成异步方式，这里应该更合适用Go；\n而业务系统，不管是线上服务，还是后台系统，都可以完全使用Java。这个领域需要一起参与的人很多，语言过于自由会提高沟通成本，啰嗦的语言本省是一种嘱咐，让你不会忽略细节；同时语言足够完整，各种生态的支持（例如用Spring Boot，就可以几行代码弄一个服务器出来）会让所有工作上手更快，大家可以把更多精力放在业务上；同时这个Java容易招人，业界人才储备足够，业务发展起来后，无论是解决复杂问题，还是需要大规模扩充人马，都可以非常迅速！"},
{"title": "python操作Excel实现自动化报表", "description": "io/en/latest/ 二、安装 python -m pip install xlrd xlwt xlutils 三、基本用法 python操作excel的相关工具包可以具体到操作指定单元格的填充样式、数值类型、数值大小等等", "article": "Excel作为日常办公最广泛使用的工具之一，学好它可以帮助我们节约时间，提升工作效率，学会灵活高效的使用excel有着十分重要的意义。\n本人觉得会使用大部分excel内置公式和以及VBA的就是高手了。\n不过比这更高级的是用程序操作excel，针对相似性很高或者重复性、繁琐的excel任务用一个程序可以实现一劳永逸，夸张的说：可以节省你的生命  哈哈。\n以下是python操作excel的介绍：\n一、工具包\n1.xlrd：从Excel电子表格中提取数据  doc地址：https://xlrd.readthedocs.io/en/latest/\n2.xlwt：将数据写入Excel电子表格   doc地址：https://xlwt.readthedocs.org/en/latest/\n3.xlutils：提供一组处理Excel文件的实用程序  doc地址：https://xlutils.readthedocs.io/en/latest/\n二、安装\npython -m pip install xlrd xlwt xlutils\n三、基本用法\npython操作excel的相关工具包可以具体到操作指定单元格的填充样式、数值类型、数值大小等等。然而python操作excel需要一定pandas数据处理功底，后续将补上章节：pandas数据处理技能\n1.从指定文件路径读取excel表格，进行一定操作，然后保存到另一个excel文件：result.xlsx\nimport xlwt\nimport xlrd\nfrom xlutils.copy import copy\nimport pandas as pd\nfrom pandas import DataFrame,Series\nimport os\nos.chdir('./')\n# 从指定文件路径读取excel表格\ndf = pd.read_excel('D:/mypaper/data/data.xlsx')\n# 查看df内容\n# 根据age算出出生年份，增加一列\nimport datetime\nimport os\nyear = datetime.datetime.now().year#获取当前系统时间对应的年份\ndf['birth'] = year-df['age']\ndf.to_excel('result.xlsx')#保存到当前工作目录，可以用os.getcwd()查看\n#查看下此时df的内容，可以看到已经生成了birth这一列\n乍看好像只用到了pandas，还没有用到上面介绍的三个工具包，下面介绍利用python操作excel底层\n2.单元格操作\n# 定义方法：读取指定目录下Excel文件某个sheet单元格的值\ndef excel_read(file_path,table,x,y):\n     data = xlrd.open_workbook(file_path)\n     table = data.sheet_by_name(table)\n     return table.cell(y,x).value\n\n# 定义方法：单元格值及样式\nwrite_obj_list = []\ndef concat_obj(cols,rows,value):\n    write_obj_list.append({'cols':cols,'rows':rows,'value':value,\\\n'style':xlwt.easyxf('font: name 宋体,height 280;alignment: horiz centre')})\n\n# 定义方法：合并单元格\ndef merge_unit(srows,erows,scols,ecols,value):\n    write_obj_list.append({'id':'merge','srows':srows,'erows':erows,'scols':scols,\\\n'ecols':ecols,'value':value,'style':xlwt.easyxf('font: name 宋体,height 280;alignment: horiz centre')})\n\n# 定义方法：更新excel\nexcel_update(file_path,write_obj_list,new_path):\n    old_excel = xlrd.open_workbook(file_path, formatting_info=True)\n    #管道作用\n    new_excel = copy(old_excel)\n    '''\n    通过get_sheet()获取的sheet有write()方法\n    '''\n    sheet1 = new_excel.get_sheet(0)\n    '''\n    1代表是修改第几个工作表里，从0开始算是第一个。此处修改第一个工作表\n    '''\n    for item in write_obj_list:\n        if 'id' not in item.keys():\n            if 'style' in item.keys():\n                sheet1.write(item['rows'], item['cols'], item['value'],item['style'])\n            else:\n                sheet1.write(item['rows'], item['cols'], item['value'])\n        else:\n            if 'style' in item.keys():\n                sheet1.write_merge(item['srows'],item['erows'],item['scols'], item['ecols'], item['value'],item['style'])\n            else:\n                sheet1.write_merge(item['srows'],item['erows'],item['scols'], item['ecols'], item['value'])\n    '''\n    如果报错 dict_items has no attributes sort\n    把syle源码中--alist.sort() 修改为----> sorted(alist) \n    一共修改2次\n    '''\n    new_excel.save(file_path)\n\n#参数详解\n# srows:合并的起始行数\n# erows:合并的结束行数\n# scols:合并的起始列数\n# ecols:合并的结束列数 \n# value:合并单元格后的填充值\n# style:合并后填充风格：\n#     font: name 宋体\n#     height 280;\n#     alignment: horiz centre\n#     ... 与excel操作基本保持一致\n\n注意:该方法仅仅是将需要直行的动作保存到一个list中，真正的动作还未执行,执行动作是发生在excel_update方法中\n最终调用excel_update方法，传入每个单元格需要进行的操作和填充值的write_obj_list以及文件保存路径file_path\n就可以在当前工作目录下生成想要的Excel结果文件。\n注意：\n1.write_obj_list支持用户自定义\n2.write_obj_list也可以是根据excel_read方法读取现有待修改的excel文件（可以维持原有表格的格式）而生成\npython操作excel还有很多其他的基本方法，因篇幅的限制不再陈述和演示，想要深入研究的可以点击上面的doc地址。\n学会python操作excel的单元格、并掌握上面的方法就可以基本实现excel的自动化报表操作了。\n如果您觉得有帮助的话，可以扫码，赞赏鼓励一下！谢谢！"},
{"title": "python之父：学习Python，从入门到精通，只需要两个月就够了", "description": "你就已经开始具备成为一名程序员的正确特征了。 2019年最新python教程 如果你处于想学python或者正在学习python，python的教程不少了吧，但是是最新的吗？ 说不定你学了可能是两年前人家就学过的内容", "article": "前言\n毫无疑问，Python 是当下最火的编程语言之一。对于许多未曾涉足计算机编程的领域「小白」来说，深入地掌握 Python 看似是一件十分困难的事。其实，只要掌握了科学的学习方法并制定了合理的学习计划，Python 从 入门到精通只需要两个月就够了！\n要知道，一个月是一段很长的时间。如果每天坚持用 6-7 小时来做一件事，你会有意想不到的收获。\n作为初学者，第一个月的月目标应该是这样的：\n熟悉基本概念（变量，条件，列表，循环，函数）\n练习超过 30 个编程问题\n利用这些概念完成两个项目\n熟悉至少 2 个框架\n开始使用集成开发环境（IDE），Github，hosting，services 等\n整体计划\n现在，我们先将月计划细化成周计划。\n第一周：熟悉 Python\n要积极探索 Python 的使用方法，尽可能多的完成下面这些任务：\n第一天：基本概念（4 小时）：print，变量，输入，条件语句\n第二天：基本概念（5 小时）：列表，for 循环，while 循环，函数，导入模块\n第三天：简单编程问题（5 小时）：交换两个变量值，将摄氏度转换为华氏温度，求数字中各位数之和，判断某数是否为素数，生成随机数，删除列表中的重复项等等\n第四天：中级编程问题（6 小时）：反转一个字符串（回文检测），计算最大公约数，合并两个有序数组，猜数字游戏，计算年龄等等\n第五天：数据结构（6 小时）：栈，队列，字典，元组，树，链表。\n第六天：面向对象编程（OOP）（6 小时）：对象，类，方法和构造函数，面向对象编程之继承\n第七天：算法（6 小时）：搜索（线性和二分查找）、排序（冒泡排序、选择排序）、递归函数（阶乘、斐波那契数列）、时间复杂度（线性、二次和常量）\n别急着安装 Python 环境！\n这看起来很矛盾，但是你一定要相信我。我有几个朋友，他们因为语言工具包和 IDE 安装的失败而逐渐失去了学习下去的欲望。因此，我的建议是先使用一些安卓 app 来探索这门语言，比如编程英雄（\nhttps://\nplay.google.com/store/a\npps/details?id=com.learnprogramming.codecamp\n）或者在线代码游乐场 Repl（\nhttps://\nrepl.it/\n）等等。如果你是个技术小白，安装 Python 环境可不是你的首要任务。\n第二周：开始软件开发（构建项目）\n接下来，让我们朝着软件开发任务进军吧！不妨尝试综合你学到的知识完成一个实际的项目：\n第一天：熟悉一种 IDE（5 小时）: IDE 是你在编写大型项目时的操作环境，所以你需要精通一个 IDE。在软件开发的初期，我建议你在 VS code 中安装 Python 扩展或使用 Jupyter notebook。\n第二天：Github（6 小时）：探索 Github，并创建一个代码仓库。尝试提交（Commit）、查看变更（Diff）和上推（Push）你的代码。另外，还要学习如何利用分支工作，如何合并（merge）不同分支以及如何在一个项目中创建拉取请求（pull request）。\n第三天：第一个项目——简单计算器（4 小时）：熟悉 Tkinter，创建一个简单的计算器\n第四、五、六天：个人项目（每天 5 小时）：选定一个项目并完成它。如果你不知道你该做什么，可以查看下面的清单（\nhttps://www.\nquora.com/what-some-goo\nd\n pythonprojects -for-an- middle - programmer/answer/jhankar - mahbub2）\n第七天：托管项目（5 小时）：学习使用服务器和 hosting 服务来托管你的项目。创建一个 Heroku 设置并部署你构建的应用程序。\n为什么要写项目？\n如果仅仅按部就班地学习课堂上或视频中的内容，你无法拥有独立思考能力。所以，你必须把你的知识应用到一个项目中。当你努力寻找答案时，你也在慢慢地学会这些知识。\n第三周：让自己成为一名程序员\n第 3 周的目标是熟悉软件开发的整体过程。你不需要掌握所有的知识，但是你应该知道一些常识，因为它们会影响你的日常工作。\n第一天：数据库基础（6 小时）：基本 SQL 查询（创建表、选择、Where 查询、更新）、SQL 函数（Avg、Max、Count）、关系数据库（规范化）、内连接、外连接等\n第二天：使用 Python 数据库（5 小时）：利用一种数据库框架（SQLite 或 panda），连接到一个数据库，在多个表中创建并插入数据，再从表中读取数据。\n第三天：API（5 小时）：如何调用 API。学习 JSON、微服务（micro-service）以及表现层应用程序转换应用程序接口（Rest API）。\n第四天：Numpy（4 小时）：熟悉 Numpy（\nhttps://\ntowardsdatascience.com/\nlets-talk-about-\n Numpy -for- datascies-beginners-b8088722309f）并练习前 30 个 Numpy 习题（\nhttps://\ngithub.com/rougier/nump\ny-\n 100/blob/master/100_numpy_excercises.md)\n第五、六天：作品集网站（一天 5 小时）：学习 Django，使用 Django 构建一个作品集网站（\nhttps://\nrealpython.com/get-\n start-with-django -1/），也要了解一下 Flask 框架。\n第七天：单元测试、日志、调试（5 小时）：学习单元测试（PyTest），如何设置和查看日志，以及使用断点调试。\n真心话时间（绝密）\n如果你非常「疯狂」，并且非常专注，你可以在一个月内完成这些任务。你必须做到：\n把学习 Python 作为你的全职活动。你需要从早上 8 点开始学习，一直到下午 5 点。在此期间，你可以有一个午休时间和茶歇时间（共 1 小时）。\n8 点列出你今天要学的东西，然后花一个小时复习和练习你昨天学过的东西。\n从 9 点到 12 点：开始学习，并进行少量练习。在午饭后，你需要加大练习量，如果你卡在某个问题上，可以在网上搜索解决方案。\n严格保持每天 4-5 小时的学习时间和 2-3 小时的练习时间（每周最多可以休息一天）。\n你的朋友可能会认为你疯了。走自己的路，让别人去说吧！\n如果你有一份全职工作，或者你是一名学生，完成这些流程可能需要更长的时间。作为一名全日制学生，我花了 8 个月的时间来完成这份清单。现在我是一名高级开发人员。我妻子在美国一家大银行工作。她花了 6 个月才完成本文中提到的任务。所以，不管花多长时间，一定要完成它们。\n第四周：认真考虑工作（实习）问题\n第 4 周的目标是认真思考如何才能被录用。即使你现在不想找工作，你也可以在探索这条道路的过程中学到很多东西。\n第一天：准备简历（5 小时）：制作一份一页的简历。把你的技能总结放在最上面，必须在写项目的同时附上 Github 链接。\n第二天：作品集网站（6 小时）：写几个博客，将它们添加到你之前开发的作品集网站中。\n第三天：LinkedIn 简介（4 小时）：创建一个 LinkedIn 个人简介，把简历上的所有内容都放到 LinkedIn 上。\n第四天：面试准备（7 小时）：准备一些谷歌常见的面试问题，练习白皮书中的 10 个面试编程问题。在 Glassdoor、Careercup 等网站中查看前人遇到的面试问题。\n第五天：社交（~小时）：走出房门，开始参加聚会、招聘会，与其他开发人员和招聘人员见面。\n第六天：工作申请（~小时）：搜索「Python Job」，查看 LinkedIn Job 和本地求职网站。选择 3 个工作岗位并发送工作申请。为每个工作定制你的简历。在每个工作要求中找出 2 到 3 件你不知道的事情，并在接下来的 3-4 天里学会它们。\n第七天：在拒绝中学习（~小时）：每次你被拒绝的时候，找出两件为了获得这份工作你应该知道的事情，然后花 4-5 天 的时间来掌握它们。这样，每次拒绝都会让你成为更好的开发人员。\n为工作做准备\n现实情况是，你永远不可能百分之百地为工作做好准备。你所要做的就是精通一两件事，并且熟悉其它的事情，最终通过面试。一旦你开始工作了，你会在工作过程中学到很多。\n享受学习的过程\n学习是一个过程，只要学习就会有挑战。天道酬勤，你越努力，就会成为越优秀的开发人员。\n如果你能在 60天内完成所有的任务，那你堪称天才。然而，如果你能完成 60-70% 的内容，你就已经开始具备成为一名程序员的正确特征了。\n2019年最新python教程\n如果你处于想学python或者正在学习python，python的教程不少了吧，但是是最新的吗？\n说不定你学了可能是两年前人家就学过的内容，在这小编分享一波2019最新的python全套教程\n最后小编为大家准备了6月份新出的python自学视频教程，共计约200G，免费分享给大家！\n2019Python自学教程全新升级为《Python+数据分析+机器学习》，七大阶段能力逐级提升，打造技能更全面的全栈工程师。\n获取方式：转发此文，关注并私信小编“学习”即可免费领取"},
{"title": "70个Python练手项目列表", "description": "你也可以从中寻找灵感去做自己的项目。 70个Python项目列表： 1、【Python 图片转字符画】 2、【200行Python代码实现2048】 3、【Python3 实现火车票查询工具】", "article": "开始的话：\n文章是实验楼投稿文章，文章有大量的Python项目，所以对Python感兴趣的可以看看。\n---------------------------------------------\n前言：\n不管学习哪门语言都希望能做出实际的东西来，这个实际的东西当然就是项目啦，不用多说大家都知道学编程语言一定要做项目才行。\n这里整理了70个Python实战项目列表，都有完整且详细的教程，你可以从中选择自己想做的项目进行参考学习练手，你也可以从中寻找灵感去做自己的项目。\n70个Python项目列表：\n1、\n【Python 图片转字符画】\n2、\n【200行Python代码实现2048】\n3、\n【Python3 实现火车票查询工具】\n4、\n【高德API+Python解决租房问题 】\n5、\n【Python3 色情图片识别】\n6、\n【Python 破解验证码】\n7、\n【Python实现简单的Web服务器】\n8、\n【pygame开发打飞机游戏】\n9、\n【Django 搭建简易博客】\n10、\n【Python基于共现提取《釜山行》人物关系】\n11、\n【基于scrapy爬虫的天气数据采集(python)】\n12、\n【Flask 开发轻博客】\n13、\n【Python3 图片隐写术】\n14、\n【Python 实现简易 Shell】\n15、\n【使用 Python 解数学方程】\n16、\n【PyQt 实现简易浏览器】\n17、\n【神经网络实现手写字符识别系统 】\n18、\n【Python 实现简单画板】\n19、\n【Python实现3D建模工具】\n20、\n【NBA常规赛结果预测——利用Python进行比赛数据分析】\n21、\n【神经网络实现人脸识别任务】\n22、\n【Python文本解析器】\n23、\n【Python3 &amp;amp; OpenCV 视频转字符动画】\n24、\n【Python3 实现淘女郎照片爬虫 】\n25、\n【Python3实现简单的FTP认证服务器】\n26、\n【基于 Flask 与 MySQL 实现番剧推荐系统】\n27、\n【Python 实现端口扫描器】\n28、\n【使用 Python 3 编写系列实用脚本】\n29、\n【Python 实现康威生命游戏】\n30、\n【川普撞脸希拉里(基于 OpenCV 的面部特征交换) 】\n31、\n【Python 3 实现 Markdown 解析器】\n32、\n【Python 气象数据分析 -- 《Python 数据分析实战》】\n33、\n【Python实现键值数据库】\n34、\n【k-近邻算法实现手写数字识别系统】\n35、\n【ebay在线拍卖数据分析】\n36、\n【Python 实现英文新闻摘要自动提取 】\n37、\n【Python实现简易局域网视频聊天工具】\n38、\n【基于 Flask 及爬虫实现微信娱乐机器人】\n39、\n【Python实现Python解释器】\n40、\n【Python3基于Scapy实现DDos】\n41、\n【Python 实现密码强度检测器】\n42、\n【使用 Python 实现深度神经网络】\n43、\n【Python实现从excel读取数据并绘制成精美图像】\n44、\n【人机对战初体验:Python基于Pygame实现四子棋游戏】\n45、\n【Python3 实现可控制肉鸡的反向Shell】\n46、\n【Python打造漏洞扫描器 】\n47、\n【Python应用马尔可夫链算法实现随机文本生成】\n48、\n【数独游戏的Python实现与破解】\n49、\n【使用Python定制词云】\n50、\n【Python开发简单计算器】\n51、\n【Python 实现 FTP 弱口令扫描器】\n52、\n【Python实现Huffman编码解压缩文件】\n53、\n【Python实现Zip文件的暴力破解 】\n54、\n【Python3 智能裁切图片】\n55、\n【Python实现网站模拟登陆】\n56、\n【给Python3爬虫做一个界面.妹子图网实战】\n57、\n【Python 3 实现图片转彩色字符】\n58、\n【自联想器的 Python 实现】\n59、\n【Python 实现简单滤镜】\n60、\n【Flask 实现简单聊天室】\n61、\n【基于PyQt5 实现地图中定位相片拍摄位置】\n62、\n【Python实现模板引擎】\n63、\n【Python实现遗传算法求解n-queens问题】\n64、\n【Python3 实现命令行动态进度条】\n65、\n【Python 获取挂号信息并邮件通知】\n66、\n【Python实现java web项目远端自动化更新部署】\n67、\n【使用 Python3 编写 Github 自动周报生成器】\n68、\n【使用 Python 生成分形图片】\n69、\n【Python 实现 Redis 异步客户端】\n70、\n【Python 实现中文错别字高亮系统】\n最后：\n以上项目列表希望可以给你在Python学习中带来帮助~"},
{"title": "Python IDE之 pycharm的十大奇技淫巧", "description": "说到Python的IDE，可能大家都会想到一个非常有名的工具，就是pycharm，他是最受欢迎的一个Python开发工具，其原因就是因为功能强大，适合构建大型项目", "article": "说到Python的IDE，可能大家都会想到一个非常有名的工具，就是pycharm，他是最受欢迎的一个Python开发工具，其原因就是因为功能强大，适合构建大型项目，当然啦，功能强大同时也就意味着操作复杂，如果能掌握一些奇技淫巧的话，那就会达到一个事半功倍的效果。\n0 无法找到python解析器及安装需要的包\n首先从解析器入手，这个东西在初学者阶段很容易遇到问题，就是说没有解析器，那这种情况怎么办呢？\n我在安装pycharm之前安装了anaconda，因为anaconda对于科学计算方面是十分方便的，在一些包的安装上面也方便很多，那安装了anaconda之后要做什么呢？\n在这个地方选择conda，这样都话就会自动用anaconda里面的python解释器了，那这个又有什么好处呢？配置好了anaconda可以自动导入anaconda里面的包进来哦.\n下面我们做个测试，这个是新建的项目，那我们看看在pycharm里面安装包容易不容易呢？\n看到了一个红色感叹号，这个代表什么呢？我们运行一下看看\n说我们没有安装这个包，我们给鼠标单击红色感叹号的灯泡\n瞧，第一个单击一下就可以安装了，是不是很方便呢？\n下面看下结果:\n成功执行！相对于别的IDE来说，pycharm这方面是十分的好用啦!\n那除了这个办法之外还有没有别的方法呢？我要是记不得库的准确名字怎么办呢？还能不能安装啦？答案是当然能！\n在settings里面找到这个\n然后点击右边的+号\n我们就可以看到下面的结果：\n那我们想安装requests库，就搜索一下看看\n看和requests库相关的所有库都在里面了，妈妈再也不用担心我不记得库名字了\n1. 快速查看库源码\n刚才说到如何快速安装库，那pycharm的里另外一个神奇功能就是可以快速的查看库的源码（不过友情提示，小白千万不要到库的源码那边乱改啊，改完了就用不了了）\n怎么操作呢？\n在库所在行，按下ctrl+B就可以看到源码了\n2. 快速换行\n在任何位置，我们在pycharm里面都可以通过shift+enter键来快速换行，而且不仅仅是换行而已，还会按照原来的缩进来换哦~这就让我们方便不少。\n3. 万能提示键\n所谓的万能提示键就是快速的代码补全，这个需要设置一下，原来默认的是ctrl+空格组合键，但是这个在windows系统下面是中英文输入法的切换，如果不设置的话，就只能看到你的输入法从英文变成中文，从中文变回英文，而不会得到补全，这里先打开设置，点击keymap，在里面输入basic。如下图\n将ctrl+空格改成所需要的按键即可。然后就有提示了。\n输入的，按下组合键之后就出现了提示\n是不是很美妙呢？\n4. 粘贴的进阶版工具-历史粘贴板\n什么叫做历史粘贴板呢？就是它可以给你之前几次复制的东西都显示出来，让你还能重复用！从此妈妈再也不用担心我复制A之后还没粘贴就复制B给覆盖掉了。\n那这个高级的历史粘贴版怎么召唤出来呢？快捷键 Ctrl+shift+v就召唤出来了（我不会说这个东西是我之前在改万能提示键的时候偶然按出来的，用它的时候多多尝试，就会发现新功能哦）\n5. 快速运行代码\n快速运行代码这个就不用多说了，一般来说我们都是直接快捷键执行的，那Ctrl+shift+f10来进行程序的运行，那除了这个之外还有别的执行方法么？\n看到这个了么？它就可以让我们快速运行，除了这个地方之外，还有下面也有\n除了这两个地方之外还有\n鼠标右键也能运行。四种运行代码的方法，现在会了吧？\n6. 切分窗口\n我们在用excel的时候，知道可以将多个文件簿并排看（一般来说是两个，如果屏够大的话，可能三个也可以）\n就像这样\n那pycharm能不能呢？可以的\n在settings里面设置切分的快捷键可以快速切分哦。那这个要怎么找呢？\n输入切分的英文 split，就可以看到这里面有一个横切分和竖着切分的，这对于大屏的程序猿兄弟们来说，那真的是爽！\n7. 快速展开和合并函数\n当一个项目有很多函数的时候，那如果函数都展开看起来就很长很长，我们可以通过点击这个小减号让它缩短，作为一个懒人的我又去研究有没有快速的方法呢？答案还是有！！！\nCtrl+shift++就可以让它快速展开，ctrl+shift+ -就可以让它全部缩回去。快捷方便！\n8. 快速注释\nPython的注释要用#来注释，那我们在写短的代码的时候，我们可以一个一个的注释掉，但是如果我们想注释一大段的代码，那还能一个一个的注释么？显然不能，所以我又去找了快捷键看看，发现真的有！！！！（这pycharm就像百宝箱一样，你想给用啥快捷键它都能找到啊！良心IDE）\n只要选中代码块，之后按住Ctrl+/ 就能快速的注释掉选中的整个代码块。\n那有盆友说了，那我还需要用它，我怎么给它去掉注释呢？不能一个一个再删掉吧？这个问题问的就非常好了，再按一次ctrl+/,快速回原来的可以用的代码块。\n9．超级搜索\n 快速搜索是这个pycharm的一个很方便的快捷键，双击shift即可召唤出来，超级搜索，为什么叫这个呢？因为它可以搜索的东西实在是太多了，函数名，方法名，类名，文件名，目录名你想到的东西它都能搜索到！简直就是全能啊！激活它的名字也叫做search everywhere，\n这里面搜索啥东西都行！是不是很厉害！！\n好了，今天的十大奇技淫巧已经讲完了，小伙伴们可能会有疑问？诶？不是九个吗？为什么是十大奇技淫巧呢？因为我们程序猿or未来的程序猿都是从0开始数数的！！"},
{"title": "13位Python大牛历时一个月打造的Python系统学习流程图，超详细！", "description": "大道理就不多说了，先上基础部分展示给大家。 一、初识Python真面目 Python的安装及配置：到官网上下载Python，然后安装。安装后还要进行PATH变量的配置。同时安装2和3的环境变量配置", "article": "对于刚开始接触Python的小伙伴来说，没有思路方法，不知道从何开始学习，把软件环境安装好后就不知所措了！接下来我给大家分享下多位大牛倾力打造的python系统学习流程，一个月才设计完的！\n Python础部分：\n 老话说的好，“万丈高楼平地起！”不管你做什么都一样，何况编程；或许初学的时候很是枯燥乏味，但是都是你之后的项目、案例的核心！\n 好了，大道理就不多说了，先上基础部分展示给大家。\n \n \n \n \n一、初识Python真面目\n Python的安装及配置：到官网上下载Python，然后安装。安装后还要进行PATH变量的配置。同时安装2和3的环境变量配置，在cmd命令行中输入Python对安装的结果进行检验。\n \n二、全面了解Python\n 对Python有一个整体的认知，知道他能做什么，搞清楚自己想学哪个方向，这里方向我就不多介绍了，大家可以自行百度。\n \n三、操作系统\n Python是可以跨平台操作的，Windows、Linux、Mac等等很多系统都可以，流程图上教的是Linux。\n \n四、重中之重的基本数据类型\n 1、数字\n \n整形\n浮点数\n定点数\n 2、字符串\n \nstr\nbytes\nbytearray\nstring模块\n五、不可或缺的基本数据结构\n 1、序列\n \n字符串\n列表\n元祖\n 2、散列\n \n集合\n字典\n六、常用运算符与优先级\n \n七、流程控制\n 1、选择结构\n \n条件判断\n三目运算\n逻辑运算\n 2、循环结构\n \n条件循环\n迭代循环\n 3、推导表达式\n \n列表推导\n集合推导\n字典推导\n八、函数\n 1、常用内置函数\n 2、自定义函数\n 3、函数参数\n ①、定义参数\n \n必要参数\n默认参数\n不定参数\n ②、调用参数\n \n位置参数\n关键字参数\n 3、作用域规则\n \n全局与局部\n查找规则\n嵌套函数的闭包\n全局声明与非本地声明\n 4、递归\n 5、匿名函数表达式\n \n九、random/math模块、模块及包、文件\n \n打开与关闭\n写入与读取\nStringlO\nByteslO\n十、实用工具\n \nsys.argv\nsys.path\nos.path\n十一、异常及错误排查\n \n常见错误及异常\n错误回溯栈\n异常层级\nlogging模块\nPython****进阶：\n 我们大多数人在学习的时候会在各种论坛网站上去找资源，东学一点西学一点，感觉自己学的还不错了，真正遇到项目的时候问题多多，才发现自己只学会了基础（绝大多数是连基础都没学好，而且学的很杂乱，基本等于没学），不知道下一步该如何进行深入的学习了！下面我们以Python  web开发为例来看看进阶部分需要学些什么知识！\n \n \n \n \n一、面向对象（oop）\n 1、基本概念\n ①、封装\n \n属性\n方法\n ②、继承\n \n继承\n多继承\nMix-in\n ③、重写\n 2、魔术方法与对象协议\n \n字符串表示协议\n迭代协议\n上下文协议\n调用协议\n 3、描述器\n \n获取器\n设置器\n删除器\n装饰器\n二、生成器、常用模块、套接字编程\n 常用模块\n \ntime与datetime模块\njson模块\nre模块\n三、关系型数据库（MySQL）\n 1、基本概念\n 2、四层结构\n ①、库\n \n建库\n删库\n ②、表\n \n建表\n删表\n修改表结构\n ③、列\n \n列类型\n修改列属性\n ④、记录（增删改查）\n \n插入\n删除\n更细\n查询\n 3、约束与索引\n ①、约束\n \n主键（非空约束）\n外键（唯一约束）\n ②、索引及其意义\n 4、表关系\n \n一对多\n一对一\n多对多\n 5、高级查询\n \nMySQL函数\n子查询\n链接查询\n分组与聚合\n 6、会话与事务\n 7、Python操作MySQL\n \n四、键值型数据库（Redis）\n 1、键命令\n \n设置\n获取\n删除\n类型\n过期\n查找键\n 2、基本值类型\n \n字符串\n列表\n集合\n有序集合\n哈希\n3、发布订阅\n \n4、Python操作Redis\n \n进阶部分到这里就学完了，由于时间有限今天就先到这里，往后还有前端部分、web框架部分、开发实战部分、并发补充部分等等\n成长离不开与优秀的同伴共同交流，如果你需要好的学习环境，好的学习资源，这里欢迎每一位热爱Python的小伙伴，Python学习圈"},
{"title": "请教下 Python 高手，如何用 Python 自动化操作 Excel？", "description": "那些公众号和培训机构无论在什么问题下都无脑向你推python基础知识，python的视频，pdf的。既蠢且坏。因为他们除了会无脑吹捧python，并没有给出问题相关的任何实质性内容。python并非万能的", "article": "一、写在前面的话\n那些公众号和培训机构无论在什么问题下都无脑向你推python基础知识，python的视频，pdf的。既蠢且坏。因为他们除了会无脑吹捧python，并没有给出问题相关的任何实质性内容。python并非万能的，更并非始终是最优解。他们拿出100G的资源的时候，这些视频他们看过100P以上吗？书籍他们看过哪怕50页吗？他们仔细的辨别过好坏吗？\n二、题主的问题解析\n首先来看题主问题，我想这也是非常非常多的人关注的：\n 目前需要自动化完成一些\nexcel的重复性工作\n，涉及\n排序，插入数据，数据透视表\n等等，是学\nvba简单，还是用python\n容易，python的话需要用到什么样的模块呢，如果有文档可否提供下链接，谢谢。\n解析一下：\n重复性工作\n。vba和python的区别在于**vba因为有宏的存在。入门简单。**1天就能上手开发一些筛选，插入，排序的小脚本。\npython相对vba而言入门难，但是难得有限，后期无论在效率还是灵活度上都是vba比不上的。\n实现排序，插入数据，\n数据透视表\n——这个条件很关键了。因为数据透视表好用，强大，\n但是目前python的包除了xlwings能支持数据透视表的vba底层函数调用，或者说在python语法中调用vba脚本外\n，pandas，openpyxl等其他包都是不行的。\n并且pandas连读出excel的格式都做不到，即单元格的长宽，颜色，合并单元格等等。所以如果你想要做数据透视表，那么意味着你得pandas不是最好的选择。\n 你可能会说pandas的pivot_table函数。但是当你拿出你用pandas做出来的没有任何筛选功能的数据透视表给老板、给同事，说这就是数据透视表。我想这一定会让对方很难受。\nvba简单，还是用python容易。不是容易不容易的问题，而是合适的问题。至于为什么写在后面。\n三、对比分析\n没有能治任何病的药，也没有万能的语言。\n1.只需插入，赋值，公式等简单操作\n1.1. VBA\n当我们只想实现插入，赋值，公式计算等简单功能的时候，时间短，一两天就得干活，选VBA。\n1.2. python\n当我们只想实现插入，赋值，公式计算等简单功能的时候，时间长，后面想做更复杂的事，选python pandas包，简单易学。\n1.2.1必须保留格式，合并单元格等\n当你的报表需要保留颜色，单元格长宽，合并单元格等，那么pandas不合适。\n2.需要实现如数据透视表等复杂功能\n2.1 VBA\n还是vba。vba唯一不足的就是\n比python效率低很多，数据量较大时才能体现出来\n。。\n2.2 python xlwings包\n加入数据透视表这一条件，那么只有vba和xlwings可选。\n xlwings优点：\n①xlwings能调用vba底层函数，实现vba的功能。\n ②能与pandas，matplotlib交互，\n ③能运行vba 脚本。\n四、学习文档\n看到有点赞和收藏，就多写点吧。\n有不对请大家指正，有其他说的不好的也请大家指教\n。\n谢谢大家。\n1.vba\n我推荐\n王佩丰\n的vba教程。\n王佩丰的教学思想是\n“面向问题”\n教学。都是现实中很常见的问题，并且体系也很完善。\n资源的话，在网易云有免费的Excel函数课程和付费的VBA课程。盗版的话B站也有。\n2.python\n如果你暂时\n只想做数据处理分析\n相关的话，\n配置环境+基本的数据类型+控制和判断(if,while,for等)+容器（list,tuple,array,dataframe)\n。然后就立即开始\nos,numpy,pandas,学起来\n。边学边用。不用去学线程，进程，生成器之类的。\n面向问题编程\n。眼前面临什么问题就学什么知识点。\nPython的资源多如牛毛，我是在实际应用中逐渐学会的。\n2.1 pandas\npandas推荐《\n利用python进行数据分析》\n《十分钟入门pandas》\n10 Minutes to pandas\n2.2\n目前openpyxl和xlwings的资料都很少。\n openpyxl官方网站：\nopenpyxl\nxlwings：\nxlwings\n因为都是英文的。所以我写了一些文章：\n李鑫：python xlwings excel报表自动化 系列文章精讲 （一）\n李鑫：python xlwings excel报表自动化 系列文章精讲 （二）\n                     希望你们早日从大量重复性的体力劳动中解放出来！\n                              如果对你有帮助点个赞再走吧！"},
{"title": "工欲善其事必先利其器：用什么写Python？", "description": "自带的记事本！） ════ 其他文章及回答： 如何自学Python | 新手引导 | 精选Python问答 | Python单词表 | 区块链 | 人工智能 | 双11", "article": "通常来说，每个程序员都有自己趁手的兵器：\n代码编辑器\n。你要是让他换个开发环境，恐怕开发效率至少下降三成。然而，每个人对编辑器的喜好各不相同，甚至引发出诸如“神的编辑器”与“编辑器之神”这种信仰之争。但也正由此可见，个性化的编辑器对于一个程序员的重要性。\n对编程新手来说，开发环境的选择常常成为入门后的第一道坎。因为捣鼓了半天没能成功运行代码而被迫从入门到放弃的情景并不少见。初上手时选择的编辑器是否易用也会直接影响你的学习热情。\n今天就来讲讲\n我对 Python 编辑器的经验\n。\n我们用来写 Python 的工具有两类：\n一种是被称为 \nIDE\n 的\n集成开发环境\n，它们为开发而生。如 IDLE、PyCharm、Spyder 等。\n另一种更像是\n文本编辑器\n，只不过比较强大，可以支持编写和运行代码。如 SublimeText、Emacs、Vim 等。在此我主要介绍下我个人平常用的几款。\n1. IDLE\n讲真，再怎么降低标准，IDLE 恐怕也算不上一个“好”的编辑器。不论是自动补全、语法提示，还是项目文件管理，甚至是高亮提示，它要么不支持，要么支持得很勉强。“用户体验”基本没有，更要命的是，经常在某些系统或某些版本下无法运行或无法输入。\n但没办法，人是亲儿子啊！安装完 Python 什么配置都不用做（甚至不用理会环境变量），就可以用它来编写和运行代码了。对一个没什么计算机基础的新人来说，还要啥自行车要啥手表呢？直接写就完啦！\n所以在我的零基础教程，以及其他不少入门级教程里，都把 IDLE 当做了一开始的演示开发环境。但我不得不强调下，\nIDLE 仅仅是编程世界的敲门砖\n，它让你快速上手，但不可能陪你走下去。尽早去寻找属于你的工具吧。\n2. SublimeText\nSublime 是一个功能丰富的文本编辑器。除了写 Python 外，我也会拿它写一写其他代码如 JS、HTML、CSS，并且它也是我日常使用的记事本和文本编辑器。你们看到的大多数微信推送文章，最初的草稿都是是用 Sublime 写成的。\n默认安装后，如果你的电脑上已装好 Python，Sublime 就可以运行 .py 文件，并且具有语法提示、补全的功能。不支持更复杂的语法检查，也不支持控制台输入（input），但可以通过安装额外插件来补充功能。如果你电脑上有多个版本的 Python，选择起来也稍复杂。因此\n我常年打开着 Sublime，写一些代码片段\n，或者审核学员提交的作业时使用。\nSublime 是收费软件，但可以免费使用。\n3. PyCharm\n这是我在课程中和答疑群里主要推荐的开发工具。除了一开始配置可能会遇到点麻烦，以及启动时间略慢以外，真的是很好用。PyCharm 在项目内部提供了对编码、第三方库的管理，形成一个小的沙盒，避免系统中其他的配置对开发环境造成的干扰，让新手少踩点坑。不过有点不幸的是：如果你没有按照它设想的那样配置好，有可能因此踩到新的坑。\n我个人用 PyCharm 做的开发主要是课程和演示项目\n。如果你在使用其他编辑器时遇到问题，不妨同我的例子保持一致试试，减少不必要的折腾。\nPyCharm 也是收费软件，但有免费的社区版和教育版（需申请）。我用的就是社区版，功能足够学习了。如果你一定需要汉化版或者专业版，可自行网上搜索。\n4. IPython\nIPython 是一个交互式的开发环境，也就是我们课程一开始用过的 Python Shell 的加强版。通过 pip install ipython 即可安装。主要是增加了自动补全和历史命令记录，语法高亮也看着舒服点。但新手可能不太会用到。如果你到了上服务器运行代码的阶段，那一定得装一个。\n同 Sublime 一样，IPython 我也一直开着。因为\n交互式的环境很适合调试几句代码，测试一下某个语法的特性，看看某个模块里方法的调用，甚至用 help() 命令去看文档\n。看过我答疑的同学也知道，我经常是针对问题在 IPython 里运行一段代码贴过去。我强烈建议大家养成运行代码的习惯，尤其是在你看书看教程的时候，不要光顾着看，一定把编辑器开着随时敲一敲代码跑一跑。很多问题通过几次尝试自然就领会了。\n5. Jupyter\n也就是 IPython Notebook。它相当于是把上面提到的 IPython 做成了网页版，但又不仅仅是网页版。\n我之前很少用，但最近有点爱上它：因为\n用它来写爬虫或数据分析实在太舒服了！\n写爬虫的时候免不了反复尝试，有了交互式的 Jupyter，你可以步步为营，逐步修正你的代码，而不用每次都从头抓。数据分析则是因为它和 matplotlib 以及 echarts 都结合得很好，无需弹窗，页面上直接显示绘图结果。\n对于想深入数据分析的同学，拿一本《利用 Python 进行数据分析》，再就着一个开着的 Jupyter 页面，一个个例子去玩吧。\n另外，因为是网页版的，所以如果你有服务器的话，甚至可以用它做一个随时随地写代码的在线版 Python 工具。不过自己用用就好，千万不要直接对外公布，它会把你的服务器环境暴露在外。\n5.Emacs\n终于来了，神的编辑器。\n这是多年开发的老习惯。你们看到的编程教室网站就是在 Emacs 上写成的。但这个门槛较高，也不存在推荐了，大家看看就好。\n为了用 Emacs 我都改了自己的键位。最近手指有点疼，考虑是不是再加个脚踏板。🤦‍\n以上是我常用的编辑器。算是有点分裂，不过确实各有各的优势。所以没必要争论哪个更好，按自己的需要选择用着顺手的就好。\n对于初学，我还是建议用 PyCharm\n，功能比较完善，各方面相对均衡。之前写过两篇关于 PyCharm 的介绍文章，\n公众号（Crossin的编程教室）里回复 \nPyCharm\n 可以看到。\n不过似乎最近的版本又做了一些改动，可能我又得再写一篇新的了。\n而其他还有不少优秀的编辑器，如评价很好的 \nVSCode、Atom、Vim、Spyder\n 等（不推荐 PyScripter），因我自己并无长期使用经验，就不搬运网上的介绍了。如果你在使用或者有兴趣，搜索下会有很多教程。有推荐的欢迎留言。但仅我上述提及的几个其实也足够用了。\n正如标题所说：工欲善其事，必先利其器。选个好的编辑器，学习效率大增，起码像少半个括号少半个引号这种错误就不太会出现了。\n不过最终嘛，工具还是看谁来用。只要你写得够多，记事本也能成就大牛。（但认真地说：如果你还不是大牛，任何开发相关的事情都不要用 Windows 自带的记事本！）\n════\n其他文章及回答：\n如何自学Python\n | \n新手引导\n | \n精选\nPython\n问答\n | \nPython单词表\n | \n区块链\n | \n人工智能\n | \n双11\n | \n嘻哈\n | \n爬虫\n | \n排序算法\n | \n我用Python\n | \n高考\n | \n世界杯\n | \nrequests\n欢迎搜索及关注：\nCrossin的编程教室"},
{"title": "python如何画出漂亮的地图？", "description": "推荐一个超好用的python包folium, 专门用于地理数据可视化，官方英文教程教程点击这里，查看本文源代码请点击这里。 使用方法很简单，操作如下： 导入包，创建一副世界地图import", "article": "推荐一个超好用的python包\nfolium\n, 专门用于\n地理数据可视化\n，官方英文教程教程\n点击这里\n，查看本文源代码请\n点击这里\n。\n使用方法很简单，操作如下：\n导入包，创建一副世界地图\nimport folium\nimport pandas as pd\n\n# define the world map\nworld_map = folium.Map()\n\n# display world map\nworld_map\n2. 输入经纬度，尺度，在这里我们以旧金山（37.7749° N, 122.4194° W）为例。\n# San Francisco latitude and longitude values\nlatitude = 37.77\nlongitude = -122.42\n\n# Create map and display it\nsan_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# Display the map of San Francisco\nsan_map\n更改地图显示，默认为'OpenStreetMap'风格，我们还可以选择'Stamen Terrain', 'Stamen Toner'等。\n# Create map and display it\nsan_map = folium.Map(location=[latitude, longitude], zoom_start=12,tiles='Stamen Toner')\n3. 读取数据集（旧金山犯罪数据集）\n# Read Dataset \ncdata = pd.read_csv('https://cocl.us/sanfran_crime_dataset')\ncdata.head()\n4. 在地图上显示前200条犯罪数据\n# get the first 200 crimes in the cdata\nlimit = 200\ndata = cdata.iloc[0:limit, :]\n\n# Instantiate a feature group for the incidents in the dataframe\nincidents = folium.map.FeatureGroup()\n\n# Loop through the 200 crimes and add each to the incidents feature group\nfor lat, lng, in zip(cdata.Y, data.X):\n    incidents.add_child(\n        folium.CircleMarker(\n            [lat, lng],\n            radius=7, # define how big you want the circle markers to be\n            color='yellow',\n            fill=True,\n            fill_color='red',\n            fill_opacity=0.4\n        )\n    )\n\n# Add incidents to map\nsan_map = folium.Map(location=[latitude, longitude], zoom_start=12)\nsan_map.add_child(incidents)\n5. 添加地理标签\n# add pop-up text to each marker on the map\nlatitudes = list(data.Y)\nlongitudes = list(data.X)\nlabels = list(data.Category)\n\nfor lat, lng, label in zip(latitudes, longitudes, labels):\n    folium.Marker([lat, lng], popup=label).add_to(san_map)    \n    \n# add incidents to map\nsan_map.add_child(incidents)\n6. 统计区域犯罪总数\nfrom folium import plugins\n\n# let's start again with a clean copy of the map of San Francisco\nsan_map = folium.Map(location = [latitude, longitude], zoom_start = 12)\n\n# instantiate a mark cluster object for the incidents in the dataframe\nincidents = plugins.MarkerCluster().add_to(san_map)\n\n# loop through the dataframe and add each data point to the mark cluster\nfor lat, lng, label, in zip(data.Y, data.X, cdata.Category):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label,\n    ).add_to(incidents)\n\n# add incidents to map\nsan_map.add_child(incidents)\n7. 读取geojson文件，可视化旧金山市10个不同Neighborhood的边界\nimport json\nimport requests\n\nurl = 'https://cocl.us/sanfran_geojson'\nsan_geo = f'{url}'\nsan_map = folium.Map(location=[37.77, -122.4], zoom_start=12)\nfolium.GeoJson(\n    san_geo,\n    style_function=lambda feature: {\n        'fillColor': '#ffff00',\n        'color': 'black',\n        'weight': 2,\n        'dashArray': '5, 5'\n    }\n).add_to(san_map)\n\n#display map\nsan_map\n8. 统计每个区域的犯罪事件数目\n# Count crime numbers in each neighborhood\ndisdata = pd.DataFrame(cdata['PdDistrict'].value_counts())\ndisdata.reset_index(inplace=True)\ndisdata.rename(columns={'index':'Neighborhood','PdDistrict':'Count'},inplace=True)\ndisdata\n9. 创建Choropleth Map （颜色深浅代表各区犯罪事件数目）\nm = folium.Map(location=[37.77, -122.4], zoom_start=12)\nfolium.Choropleth(\n    geo_data=san_geo,\n    data=disdata,\n    columns=['Neighborhood','Count'],\n    key_on='feature.properties.DISTRICT',\n    #fill_color='red',\n    fill_color='YlOrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    highlight=True,\n    legend_name='Crime Counts in San Francisco'\n).add_to(m)\nm\n10. 创建热力图\nfrom folium.plugins import HeatMap\n\n# let's start again with a clean copy of the map of San Francisco\nsan_map = folium.Map(location = [latitude, longitude], zoom_start = 12)\n\n# Convert data format\nheatdata = data[['Y','X']].values.tolist()\n\n# add incidents to map\nHeatMap(heatdata).add_to(san_map)\n\nsan_map\n本文源代码Jupyter notebook地址：\nJupyter Notebook Viewer\nGitHub下载地址：\ngaonanlee/Visualization-Practice\n最后，folium还可以用来创建动态热力图，动态路径图等，具体可参考Medium上的\n这篇文章。\n实现效果如下图所示 (直接从Medium上抱过来的图，详细代码请点击上述链接）。\n我的其他回答\n哪些 Python 库让你相见恨晚？\n时间序列数据如何插补缺失值？\n机器学习中的因果关系: 从辛普森悖论（常见的统计学谬误）谈起\n让我们跑一个最简单的GAN网络吧！（附Jupyter Notebook 代码）\n欢迎大家关注我的\n机器学习笔记\n专栏，我将用小白也能听懂的语言，为大家讲述机器学习中那些有趣好玩的知识 (●'◡'●)"},
{"title": "Python 应该怎么学？", "description": "猜出题目意思 还可以做一个Python机器人 用Python控制机器人自动杀怪！！ 从贪心算法，DFS搜索算法，到动态规划算法 Python只是一个表达方式，重要的是编程和算法思维", "article": "通过玩游戏学！！\n打匹配上分！！\n补充1：\n文章最后介绍了5分钟，从安装Python到做游戏的全过程\n补充2：\n编程语言和框架太多：纯小白，如何规划，成为高手_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili\n我录了视频，讲编程语言和学习路线的选择，零基础到编程高手\n会了条件 循环 变量 等基本概念\n就可以用Python这把工具\n直接做有趣的事的鸭\n做中学什么的最有成就感了呢\n首先是codingame这个网站\n来一场打匹配上分吧！！！\n来一场两分钟的代码对决\n一道题出来\n十个人PK\n结束了还可以看别人代码学习\n啊啊啊啊啊！！\n太棒了！！\n匹配队伍，开始代码对决\n三种模式：\n比谁最快\n比谁代码最短\n比谁能根据数据，猜出题目意思\n还可以做一个Python机器人\n用Python控制机器人自动杀怪！！\n从贪心算法，DFS搜索算法，到动态规划算法\nPython只是一个表达方式，重要的是编程和算法思维\n随着你的Python机器人不断通关，你的编程水平突飞猛进\n推荐第二款Python游戏\n极客战记codecombat\n一关一关打\n从啥都不会\n通关就会Python语法了\n通过写代码来玩游戏哦！\n一关一关打，循序渐进\n还有网页制作，游戏开发的拓展关卡"},
{"title": "用 Python 进行数据分析，不懂 Python，求合适的 Python 书籍或资料推荐？", "description": "1、首先你要了解Python语言的整个架构和一些基本概念，也就是所说的Python入门，这里推荐资料：简明 Python 教程，很适合初学者，概念的讲解简单明了", "article": "1、首先你要了解Python语言的整个架构和一些基本概念，也就是所说的Python入门，这里推荐资料：\n简明 Python 教程\n，很适合初学者，概念的讲解简单明了。还有大量的练习，跟着做会有很快的提高。\n2、基本了解了python后，还要学习一些用于数据分析的工具，也就是一些基于python的科学计算库。\n赞同 \n@杜客\n答案中提到的\nSciPy\n系列工具，尤其是\nNumPy\n工具包，可以说是用Python进行数据分析的最常用的。另外对于数据分析，少不了数据的可视化（也就是画图），首选\nmatplotlib: python plotting\n，在Linux下非常好用，画出来的图很漂亮。\n还有一个工具包\nscikit-learn: machine learning in Python\n，这个工具包主要针对机器学习领域进行数据分析的，里面大量的实例。几乎各种数据分析方法在里面都能找到相应的实现，一些程序有针对性的修改一下就可以了。\n3、以下是一些不错的参考资料：\nNumPy的详细教程\n，官方文档的中文翻译，适合快速入门；\nMatplotlib Tutorial(译)\n，适合matplotlib快速入门；\nPython Programming Tutorials\n，这个人手把手教你用python做Data  Analysis；有视频（只不过视频是放在YouTube上的，需要梯子），有代码，\n强烈推荐。\nPython教程 - 廖雪峰的官方网站\n，\nPython 入门教程\n，另外两个Python教程。\n---------------------------7月11日更---------------------------\n考虑到numpy的重要性，然而学习的时候，光看一些文档真的很难记住和理解一些对象的操作方法，这里提供给大家一个练习numpy的资料：\n100 numpy exercises (83/100 actually)\n，一共80多个小例子，常见的数组操作和一些编程小技巧，这里都会涉及到，跟着做能学到很多。\n安利给大家一个学习Python的网站：\nLearn | Codecademy\n。这是一个在线学习编程知识的网站（不光可以学Python），有了它，即使你没有在电脑上配置Python环境，仍然可以学习Python编程，很方便。重要的是它的交互做的也很好，概念的讲解和配套的联系都有。它的界面是这样："},
{"title": "参加数学建模用 MATLAB，还是 Python？", "description": "当时在Google只搜到了相关的matlab程序，完全搜不到python程序(我当时主要就是用python，所以肯定优先用python的程序，可惜搜不到（=´口｀=）)于是只好拿MATLAB源程序过来修改了一下跑了一遍数据完成了工作", "article": "在最开始引用一下我之前在挑战杯答辩上的回答吧，这个挑战杯项目实际上是一个云端求解量子力学问题的项目。是的，我就这么直白的拿着数学建模的东西去水挑战杯´∀`\n教授：我看你这个工作是基于python的，我记得在建模这一块还有一个软件MATLAB比较常用，你为什么没有使用MATLAB呢？\n我：其实在行业认可度上，MATLAB被业内公认是一个非常优秀的建模软件，但是我们的项目使用过程中，需要涉及到云端的计算过程，使用MATLAB将会带来一系列的授权问题(我校并无MATLAB授权)，而且我这个属于公益项目，前期并无资金投入，无法购买昂贵的正版授权。因此，我们采用了和MATLAB功能相似又完全免费的python语言，配合其优秀的第三方库的适配性，完成了这个工作。\n可以看出，我在这个回答中避免了一些坑，我并没有直说MATLAB跟python哪个更好(我相信他们有很多理由怼我说MATLAB更好，既然他们问了这个问题)，并成功的将话题转移到了\n授权\n的问题上，并希望这帮大佬能帮忙跟学校争取到MATLAB正版授权。\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n下面开始正文部分\n1.python还是MATLAB\n只有小孩子才做选择，我选择全要，开个玩笑。\n你可能在互联网上搜索python和MATLAB会有人给你分析两者的优缺点，我这里不打算阐述两者的优缺点。我觉得对于数学建模而言，两者都应该学习，这是因为关键时候两者可以及时互补。他们虽然功能相似，但是针对某一个问题，你可能只能在互联网上搜索到一个解决方案，如果你选择在一棵树上吊死，很可能你需要自己研究整个代码并且将其移植，这在有限的数模比赛时间内是极其不可取的。\n举个例子，不算数学建模领域的，去年就在我师兄一篇论文的修改意见是对其中的声音分析做一定修正(为什么找到我了呢，因为我们课题组是物理课题组，大部分人对于编程不太敏感，我又正好拿了几个数学建模的奖)，当时在Google只搜到了相关的matlab程序，完全搜不到python程序(我当时主要就是用python，所以肯定优先用python的程序，可惜搜不到（=´口｀=）)于是只好拿MATLAB源程序过来修改了一下跑了一遍数据完成了工作。从此以后我电脑里的matlab从来都是最新版本。\n2.学习MATLAB和python的先后顺序\n以一个过来人的角度来说，我建议你先学MATLAB，这是因为它的中文教程相对于python要多很多，这对于新手是有利的。等到熟练操作MATLAB以后，只需要简单看一看python的基本操作，就能够上手像numpy这一类的科学计算的库，因为它们的操作方法是模仿MATLAB的。\n3.python的推荐配置\n我最早学习的全是基于python的非线性物理计算，这是学校开设的本科课程。当时推荐的python发行版是Anaconda，它的好处就是预装了大量的你能用的上的库而且自带大量的编译器的支持，无需手动配置，一键启动。\n如上图就是anaconda的启动界面，其中默认提供8种编辑器，其中不乏有VS code这种大牌编辑器，你可以一个一个尝试直到找到自己喜欢的。\n上图就是大名鼎鼎的VS code，来自微软，提供大量的扩展支持，只有你想不到没有他办不到，配合第三方扩展，你甚至可以用代码编辑器来听音乐和看漫画，详情见 \n@GitHub Daily\n 的文章\nGitHub Daily：装上这几个 VSCode 插件后，上班划水摸鱼不是梦\n如果你不喜欢这种类型的编辑器，还有提供matlab类交互支持的编辑器——spyder，题主可自行体验。\n4.最后一点建议\n编程语言说到底只是零件，好的零件的确可以造出好的产品，但是设计师的设计更为重要，与其纠结语言，不如多看看算法，毕竟，算法是支撑一个建模的核心，你程序写的再好看评委也是看不到的。"},
{"title": "Python库大全，建议收藏留用！", "description": "一个简单的、极具Python风格的Python库，无需独立的浏览器即可浏览网页。 MechanicalSoup -一个与网站自动交互Python库。 mechanize", "article": "学Python，想必大家都是从爬虫开始的吧。毕竟网上类似的资源很丰富，开源项目也非常多。\nPython学习网络爬虫主要分3个大的版块：抓取，分析，存储\n当我们在浏览器中输入一个url后回车，后台会发生什么？\n简单来说这段过程发生了以下四个步骤：\n查找域名对应的IP地址。\n向IP对应的服务器发送请求。\n服务器响应请求，发回网页内容。\n浏览器解析网页内容。\n那么学习爬虫需要掌握哪些库呢？\n通用：\nurllib -网络库(stdlib)。\nrequests -网络库。\ngrab – 网络库（基于pycurl）。\npycurl – 网络库（绑定libcurl）。\nurllib3 – Python HTTP库，安全连接池、支持文件post、可用性高。\nhttplib2 – 网络库。\nRoboBrowser – 一个简单的、极具Python风格的Python库，无需独立的浏览器即可浏览网页。\nMechanicalSoup -一个与网站自动交互Python库。\nmechanize -有状态、可编程的Web浏览库。\nsocket – 底层网络接口(stdlib)。\nUnirest for Python – Unirest是一套可用于多种语言的轻量级的HTTP库。\nhyper – Python的HTTP/2客户端。\nPySocks – SocksiPy更新并积极维护的版本，包括错误修复和一些其他的特征。作为socket模块的直接替换。\n网络爬虫框架\n功能齐全的爬虫\ngrab – 网络爬虫框架（基于pycurl/multicur）。\nscrapy – 网络爬虫框架（基于twisted），不支持Python3。\npyspider – 一个强大的爬虫系统。\ncola – 一个分布式爬虫框架。\n其他\nportia – 基于Scrapy的可视化爬虫。\nrestkit – Python的HTTP资源工具包。它可以让你轻松地访问HTTP资源，并围绕它建立的对象。\ndemiurge – 基于PyQuery的爬虫微框架。\nHTML/XML解析器\n通用\nlxml – C语言编写高效HTML/ XML处理库。支持XPath。\ncssselect – 解析DOM树和CSS选择器。\npyquery – 解析DOM树和jQuery选择器。\nBeautifulSoup – 低效HTML/ XML处理库，纯Python实现。\nhtml5lib – 根据WHATWG规范生成HTML/ XML文档的DOM。该规范被用在现在所有的浏览器上。\nfeedparser – 解析RSS/ATOM feeds。\nMarkupSafe – 为XML/HTML/XHTML提供了安全转义的字符串。\nxmltodict – 一个可以让你在处理XML时感觉像在处理JSON一样的Python模块。\nxhtml2pdf – 将HTML/CSS转换为PDF。\nuntangle – 轻松实现将XML文件转换为Python对象。\n清理\nBleach – 清理HTML（需要html5lib）。\nsanitize – 为混乱的数据世界带来清明。\n文本处理\n用于解析和操作简单文本的库。\n通用\ndifflib – （Python标准库）帮助进行差异化比较。\nLevenshtein – 快速计算Levenshtein距离和字符串相似度。\nfuzzywuzzy – 模糊字符串匹配。\nesmre – 正则表达式加速器。\nftfy – 自动整理Unicode文本，减少碎片化。\n自然语言处理\n处理人类语言问题的库。\nNLTK -编写Python程序来处理人类语言数据的最好平台。\nPattern – Python的网络挖掘模块。他有自然语言处理工具，机器学习以及其它。\nTextBlob – 为深入自然语言处理任务提供了一致的API。是基于NLTK以及Pattern的巨人之肩上发展的。\njieba – 中文分词工具。\nSnowNLP – 中文文本处理库。\nloso – 另一个中文分词库。\n浏览器自动化与仿真\nselenium – 自动化真正的浏览器（Chrome浏览器，火狐浏览器，Opera浏览器，IE浏览器）。\nGhost.py – 对PyQt的webkit的封装（需要PyQT）。\nSpynner – 对PyQt的webkit的封装（需要PyQT）。\nSplinter – 通用API浏览器模拟器（selenium web驱动，Django客户端，Zope）。\n多重处理\nthreading – Python标准库的线程运行。对于I/O密集型任务很有效。对于CPU绑定的任务没用，因为python GIL。\nmultiprocessing – 标准的Python库运行多进程。\ncelery – 基于分布式消息传递的异步任务队列/作业队列。\nconcurrent-futures – concurrent-futures 模块为调用异步执行提供了一个高层次的接口。\n异步\n异步网络编程库\nasyncio – （在Python 3.4 +版本以上的 Python标准库）异步I/O，时间循环，协同程序和任务。\nTwisted – 基于事件驱动的网络引擎框架。\nTornado – 一个网络框架和异步网络库。\npulsar – Python事件驱动的并发框架。\ndiesel – Python的基于绿色事件的I/O框架。\ngevent – 一个使用greenlet 的基于协程的Python网络库。\neventlet – 有WSGI支持的异步框架。\nTomorrow – 异步代码的奇妙的修饰语法。\n队列\ncelery – 基于分布式消息传递的异步任务队列/作业队列。\nhuey – 小型多线程任务队列。\nmrq – Mr. Queue – 使用redis & Gevent 的Python分布式工作任务队列。\nRQ – 基于Redis的轻量级任务队列管理器。\nsimpleq – 一个简单的，可无限扩展，基于Amazon SQS的队列。\npython-gearman – Gearman的Python API。\n云计算\npicloud – 云端执行Python代码。\nhttp://\ndominoup.com\n – 云端执行R，Python和matlab代码\n网页内容提取\n提取网页内容的库。\nHTML页面的文本和元数据\nnewspaper – 用Python进行新闻提取、文章提取和内容策展。\nhtml2text – 将HTML转为Markdown格式文本。\npython-goose – HTML内容/文章提取器。\nlassie – 人性化的网页内容检索工具\nWebSocket\n用于WebSocket的库。\nCrossbar – 开源的应用消息传递路由器（Python实现的用于Autobahn的WebSocket和WAMP）。\nAutobahnPython – 提供了WebSocket协议和WAMP协议的Python实现并且开源。\nWebSocket-for-Python – Python 2和3以及PyPy的WebSocket客户端和服务器库。\nDNS解析\ndnsyo – 在全球超过1500个的DNS服务器上检查你的DNS。\npycares – c-ares的接口。c-ares是进行DNS请求和异步名称决议的C语言库。\n计算机视觉\nOpenCV – 开源计算机视觉库。\nSimpleCV – 用于照相机、图像处理、特征提取、格式转换的简介，可读性强的接口（基于OpenCV）。\nmahotas – 快速计算机图像处理算法（完全使用 C++ 实现），完全基于 numpy 的数组作为它的数据类型。\nweb开发的一些框架\n1.Django\nDjango是一个开源的Web应用框架，由Python写成，支持许多数据库引擎，可以让Web开发变得迅速和可扩展，并会不断的版本更新以匹配Python最新版本，如果是新手程序员，可以从这个框架入手。\n2.Flask\nFlask是一个轻量级的Web应用框架, 使用Python编写。基于 WerkzeugWSGI工具箱和 Jinja2模板引擎。使用 BSD 授权。\nFlask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。然而，Flask保留了扩增的弹性，可以用Flask-extension加入这些功 能：ORM、窗体验证工具、文件上传、各种开放式身份验证技术。\n3.Web2py\nWeb2py是一个用Python语言编写的免费的开源Web框架，旨在敏捷快速的开发Web应用，具有快速、可扩展、安全以及可移植的数据库驱动的应用，遵循LGPLv3开源协议。\nWeb2py提供一站式的解决方案，整个开发过程都可以在浏览器上进行，提供了Web版的在线开发，HTML模版编写，静态文件的上传，数据库的编写的功能。其它的还有日志功能，以及一个自动化的admin接口。\n4.Tornado\nTornado即是一个Web server（对此本文不作详述），同时又是一个类web.py的micro-framework，作为框架Tornado的思想主要来源于Web.py，大家在Web.py的网站首页也可以看到Tornado的大佬Bret Taylor的这么一段话（他这里说的FriendFeed用的框架跟Tornado可以看作是一个东西）：\n“[web.py inspired the] Web framework we use at FriendFeed [and] the webapp framework that ships with App Engine…”\n因为有这层关系，后面不再单独讨论Tornado。\n5.CherryPy\nCherryPy是一种用于Python的、简单而非常有用的Web框架，其主要作用是以尽可能少的操作将Web服务器与Python代码连接，其功能包括内置的分析功能、灵活的插件系统以及一次运行多个HTTP服务器的功能，可与运行在最新版本的Python、Jython、Android上。\n关于框架的选择误区\n在框架的选择问题上，许多人很容易就陷入了下面两个误区中而不自知：哪个框架最好——世上没有最好的框架，只有最适合你自己、最适合你的团队的框架。编程语言选择也是一个道理，你的团队Python最熟就用Python好了，如果最熟悉的是Ruby那就用Ruby好了，编程语言、框架都只是工具，能多、快、好、省的干完活就是好东西。\n过分关注性能——其实大部分人是没必要太关心框架的性能的，因为你开发的网站根本就是个小站，能上1万的IP的网站已经不多了，上10万的更是很少很少。在没有一定的访问量前谈性能其实是没有多大意义的，因为你的CPU和内存一直就闲着呢。\n成长离不开与优秀的同伴共同交流，如果你需要好的学习环境，好的学习资源，这里欢迎每一位热爱Python的小伙伴"},
{"title": "给伸手党的福利：Python 新手入门引导", "description": "Head First Python Dive Into Python Python 核心编程 深入理解 Python Python 标准库 Python 编程指南 我们搜集了一些网上的电子书版本", "article": "这是一篇 Python 入门指南，针对那些没有任何编程经验，从零开始学习 Python 的同学。不管你学习的出发点是兴趣驱动、拓展思维，还是工作需要、想要转行，都可以此文作为一个参考。\n在这个信息爆炸的时代，以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。\n结合自身的学习经验以及与很多自学者的沟通了解，我们整理出一条可操作性较强的自学路线，同时收集了多种形式的 Python 优质学习资源，供诸位尚未入门或刚入门不久的同学参考。\n0. 心态准备\n编程是一门技术，也可说是一门手艺。如同书法、绘画、乐器、雕刻等，技艺纯熟的背后肯定付出了长时间的反复练习。编程的世界浩瀚无边，所以请保持一颗敬畏的心态去学习，认真对待写下的每一行代码，甚至每一个字符。收拾好自己的心态，向着编程的世界出发。\n1. 入门阶段\n第一步至关重要，是关系到初学者从入门到精通还是从入门到放弃。选一条合适的入门道路，并坚持下去。\n1.1 配置 Python 学习环境\nPython2 还是 Python3？\n很多人都在纠结入门应该学 Python2 还是 Python3。这其实不是个问题。我从没听过某个人是 Python2 程序员或 Python3 程序员。二者只是程序不兼容，思想上并无大差别，语法变动也并不多。选择任何一个入手，都没有大影响。\n如果你仍然无法抉择，那请选择 Python3，毕竟这是未来的趋势，参考知乎回答\nPython2 还是 Python3？\n \n应该学习最新版本的 Python 3 还是旧版本的 Python 2？\n编辑器该如何选？\n我推荐 \npycharm 社区版\n，配置简单、功能强大、使用起来省时省心，对初学者友好。并且还是完全免费的！\n社区版地址：\nPyCharm\n其他可以尝试的编辑器：\nidle\n： Python 自带编辑器。如果只是想尽快写出几行代码来，这是最简便的方式。\nvs code\n： \nVisual Studio Code - Code Editing. Redefined\natom\n： \nA hackable text editor for the 21st Century\nSublimeText\n： \nSublime Text - Download\nnotepad++\n： \nNotepad++ Home\n为了让初学者集中更多的精力在写代码这件事情上，所以我们就不推荐 vim 和 Emacs 了。\n操作系统？\nPython 支持现有所有主流操作平台，不管是 windows 还是 mac 还是 linux，都能很好的运行 Python。并且后两者都默认自带 Python 环境。\n1.2 入门教程\n《Crossin的编程教室 - Python 入门》\nCrossin的编程教室 - Python入门\n自认为算得上是最浅显易懂的入门教程，很适合没有任何编程基础的人上手。\n74篇图文教程，从最简单的 Python 安装到基本语法、数据结构、函数、文件操作、网络请求、面向对象等逐步深入。\n对于如何加深对一个知识点的印象，最好的办法就是自己写代码实现一遍。如果还是不懂，那就再来一遍。所以无论你使用什么教程，都请将其中的示例代码全部在电脑上输入并运行，learning by doing！\n配套练习\nCrossin的编程教室 - 基础练习\nCrossin的编程教室 - 在线练习\n课外练习\n《笨办法学Python》\n序言 - [ 笨办法学Python ] - 看云\n这是本很有名的 Python 书籍，但并不适合纯零基础自学。因为其中重实践但不解释，新手很容易看得一头雾水。作为学习同时的辅助倒更合适。\n其他推荐教程\n《父与子的编程之旅》\n 又名 \n《与孩子一起学编程》\n这也是一本非常适合零基础的 Python 入门书籍。喜欢阅读纸质书的同学可以买一本，不少在线书店有售。\n《简明 Python 教程》\n在线阅读：\n简明 Python 教程\n这是一本言简意赅的 Python 入门教程，简单直白，没有废话。适合有过其他语言基础的人快速了解 Python 语法。\n以上是我们推荐的学习材料，主要偏重没有太多编程基础的纯新手。其他也有一些不错的资源，可供不同需求的学习者使用：\n在线文字教程：\n廖雪峰的Python教程\nPython教程\n廖先生的教程涵盖了 Python 知识的方方面面，内容更加系统，有一定深度，有一定基础之后学习会有更多的收获。\n其他入门书籍：\nHead First Python\nDive Into Python\nPython 核心编程\n深入理解 Python\nPython 标准库\nPython 编程指南\n我们搜集了一些网上的电子书版本，放在了网盘里：\n​\nhttps://\npan.baidu.com/s/1ECLky\n交互式学习网站：\ncodecademy\nPython\ncodeschool\n：\nLearn to code by doing | Code School\ncodecademy 与 codeschool 这两个通过互联网学习 Python 的网站均备受好评。不妨去体验一下。\n在线视频课程：\n在线教育网站（Coursera网易云edx课堂腾讯课堂等）有哪些值得推荐的 Python 教程？\n在线教育网站（Coursera、网易云课堂、腾讯课堂等）有哪些值得推荐的 Python 课程？\n2. 提升阶段\n完成入门阶段的基础学习之后，常会陷入一个瓶颈期，通过看教程很难进一步提高编程水平。这时候，需要的是练习，大量的练习。\n可以从书上的例程开始写，再写小程序片段，然后写完整的项目。\n我们收集了一些练习题和网站。可根据自己阶段，选择适合的练习去做。建议最好挑选一两个系列重点完成，而不是到处浅尝辄止。\nCrossin的编程教室 - 每周一坑\n：\n编程教室的公众号每周会放出一道题目供练习，并在下一周讲解。欢迎关注微信公众号，和大家一起提交解答。\n往期题目：\n【每周一坑】三门问题\n【每周一坑】双色球选号器\n【每周一坑】统计英文小说词频\n【每周一坑】特殊回文数\nCrossin的编程教室 - 编程实例\nCrossin的编程教室 - 编程实例\n相对于编程教室基础练习着重于单一知识点，编程实例更注重对知识的融会贯通。\n实验楼\n 提升编程水平从做项目开始\n实验楼 - 在线做实验，高效学编程\nhackerrank\n Python 部分难度循序渐进，符合学习曲线\nhttps://www.\nhackerrank.com/domains/\npython/py-introduction\ncodewar\n 社区型编程练习网站，内容由易到难\nhttps://www.\ncodewars.com/?\nlanguage=python\nleetcode\n 为编程面试准备，对初学者稍难\nLeetCode\n牛客网\n 提供 BAT 等大厂笔试题目\n牛客网-专业IT笔试面试备考平台,最全C++JAVA前端求职题库,全面提升IT编程能力\ncodecombat\n 一边游戏一边编程\nCodeCombat中国 - 中国爱好者的 CodeCombat！在游戏中学习编程\nprojecteuler\n 纯粹的编程练习网站\nhttps://\nprojecteuler.net/archiv\nes\n菜鸟教程100例\n 基于 py2 的基础练习\nhttp://www.\nrunoob.com/python/pytho\nn-100-examples.html\n知乎：Python3.x基础学习资料整理\n \nhttps://\nzhuanlan.zhihu.com/p/24\n249743\n知乎：Python学习路径及练手项目合集\nhttps://\nzhuanlan.zhihu.com/p/23\n561159\n知乎：Python 的练手项目有哪些值得推荐？\nhttps://www.\nzhihu.com/question/2937\n2574\n \n3. 遇到问题怎么办？\n学习的过程中或多或少都会有各种问题出现，不要试着逃避，真的勇士敢于直面惨淡的 BUG。\n第一步肯定是利用好搜索引擎，怎么用也是一门技术活：\n编程初学者如何使用搜索引擎\n第二步，求助于各大同性交友网站（大雾）：\nStackOverflow\nhttp://\nstackoverflow.com/\nv2ex\nhttps://www.\nv2ex.com/\nsegmentfault\nhttps://\nsegmentfault.com/\n4. 过来人的建议\n在初学编程的过程中，你会有各种各样的疑惑，你会遇到各种各样的坑。这时，前人的经验尤为重要，我们整理了一些知乎问题供参考：\n你是如何自学Python的？\nhttps://www.\nzhihu.com/question/2070\n2054\n怎么用最短时间高效而踏实地学习 Python？\nhttps://www.\nzhihu.com/question/2853\n0832\n对于编程零基础，第一个语言是 Python 的人有什么建议？\nhttps://www.\nzhihu.com/question/2278\n5587\nPython 编程，应该养成哪些好的习惯？\nhttps://www.\nzhihu.com/question/2896\n6220\n如何处理 Python 入门难以进步的现象？\nhttps://www.\nzhihu.com/question/2796\n9262\n5. 写在最后\n经过第一步和第二步训练，相信一般的小程序都难不倒你了，你已经在编程的世界里已经迈出了关键的一步。接下来就可以去挑战具体的项目了，爬虫、web开发、数据分析、机器学习等等丰富的世界已经向你敞开，选择一个方向重新出发吧！\n记住：在编程的道路上，没有捷径。\n【\n公众号（Crossin的编程教室）里回复 \n新手\n，获取脱水版资源链接汇总页面。\n】\n教程及练习将持续更新，欢迎关注我们。\n其他文章及回答：\nCrossin：如何用100行Python代码做出魔性声控游戏“八分音符酱”\n学习编程的过程中可能会走哪些弯路，有哪些经验可以参考？\n你是如何自学 Python 的？\nCrossin的编程教室\n微信公众号ID：crossincode\n网站：\ncrossincode.com"},
{"title": "选Python还是Java？", "description": "这已经是月经贴了。其中关于Python和Java的问题大抵如下： Python和Java该如何选择 ？ 将来Python(Java)会不会替代Java(Python) ？ 零基础应该选择学习Python还是Java", "article": "抱歉啦，整个9月都在充电和赶进度。好久不冒泡了，今天还有公众号读者给我发了句淡淡的「好久没更新了」来催更，今天先「水」一篇非技术的吧。\n知乎上有很多关于语言选择的问题，这已经是月经贴了。其中关于Python和Java的问题大抵如下：\nPython和Java该如何选择 ？\n将来Python(Java)会不会替代Java(Python) ？\n零基础应该选择学习Python还是Java ？\n做web开发，用Python好还是Java好呢？\n这类问题过一段时间就得来一波，今天我就以这个为切入点和大家唠唠。\n我为啥要说这个话题？\n相信你们最近又看到一波「夸」Python的文章，引用了一些国外的数据，无非说Python现在很火，薪资很高，是未来的趋势balabala...\n不过我们要关注下带节奏的是谁：\nA: 培训机构营销号\n他们说的话可以信？\n那么Python在国内的发展情况如何？\n注：此文发布时间为 2017-09-28\n我最近4-5年是一个靠Python吃饭的一线开发者。在我认知里面，Python既是一个大众化的语言，也是一小搓儿开发者喜欢的语言。怎么说呢？\n每个开发者都应该学学Python这个胶水语言，后端开发者不会Python都不好意思出门和别人打招呼。事实上基本在每个公司都有Python的身影，只不过公司的核心业务、用户产品很少用Python来做。\n国内大一点的、使用Python做基础设施的公司1只手就可以数出来：豆瓣、知乎、美团、饿了么、搜狐（漏掉的欢迎补充）。 公司级别把Python作为核心的公司屈指可数，它更像是一波有「特殊」感情开发者的选择，这波人品味很挑剔，这个有点难描述，参照Pythonic这个词希望你成为的开发者吧。\nPython在国外环境要好得多，但是在国内一直在缓慢的赢得更多人的心，在我的感觉里还有点「病态」发展（这个就不展开了），增速是可预期的，不会出现井喷式的增长。\n职位就是那么多，但是由于那些无良培训机构和不明真相的吃瓜群众的引导和欺骗，再加上浮躁的社会的风气，进来了一大帮水货，企业相应的也就提高的招聘要求，让offer拿的更难了。和前端市场一样，很多人抱怨找不到工作，究其原因，无非是市场冷静客观下来优胜劣汰，能力不达标罢了。据我所知，只要你的能力匹配，Python高级工程师是非常受市场青睐的。\n造成Python市场不好的原因有哪些？\n政治。在我的第一个知乎Live「Python 工程师的入门和进阶」中也提过，我们都知道语言通常不是技术瓶颈，那为什么公司会有很强烈的技术选型因素？这其实是「政治」。BAT出来的人到其他小型公司做高管，他们为了站稳和站在核心位置会选择重构成自己熟悉和喜欢的技术栈，这些小型公司之后发展成细分领域排名很靠前的公司，就这样开枝散叶下去... 另外语言重构大部分是为了KPI和晋升。这些有话语权的人往往不会Python，只熟悉传统的PHP，Java，学习新的语言第一心里没底第二好累呀（有些人就靠现在会的那些东西准备度过下一个20年呢），这就造成一种「恶性」循环，其他语言的市场热度不会降下去，政治正确要比技术正确更重要，Python语言很难在这种环境里突破重围（另外一个角度，有眼光和魄力能把XX转成了Golang的也是凤毛菱角）。那么知乎、饿了么这些公司为什么选择Python？嘿嘿，除了创业早期为了显得逼格高（有时候这是创业营销的一种需要），他们的高管中有些是豆瓣出去的哦，所以你看到同样的现象，豆瓣出去的人做技术决策的结果选了Python。? \n招人难。国内找靠谱的Python工程师实在是太难了。会Python和真的靠它吃饭差别实在太大了，知乎Python话题下大部分充其量算是会用Python写脚本的人在强答罢了。你看我的同事或者我了解到的Python领域里面的开发者基本都是不用知乎也不回答Python问题的。我们知道，Python非常适合创业期完成产品快速试错和迭代，如果一个公司没有优秀的开发者坐镇，我还是不太相信用Python能坚持下去的，太多工程问题真的不是学院派能解决的，很多问题Google/SO是找不到的。那么用人荒造成了想选择Python为公司技术栈的公司望而却步，最后恶性循环大家都不太敢让核心系统用Python了。\n总有刁民拿性能说事儿。性能问题确实是存在的，但事实上绝大部分公司和产品真的不需要担心这点，也有人说Python没有大型网站的顶级的解决方案。其实不然，国内有豆瓣，国外有Instagram、Reddit等等成功的案例，我说了很多遍了，决定网站性能的主要因素是架构，然后是代码水平，最后才是语言。 但是很多对Python一知半解的人会放大这些问题，就被被吓跑了，并且拿着这些槽点去吓别人。\n技术环境不好。PyCON北京场都组织不起来，真的有干货的开发者都不出来活动，万事与Ta无关高高挂起，反观前端氛围真的很好。很多新人想入坑，但是没人带，没方向，没组织，外面尽是坏人，每天看到的都是类似于爬虫这种很low级别的技术文章，这种气氛下，未来真的青黄不接呀。\nPython or Java？\n终于到了正题了。我确实不用Java，不过工作和个人项目中我会用到Python，Golang，Lua，Javascript、CSS，以前做运维的时候还用过Perl和Ruby。很多年前看《程序员修炼之道》，作者建议每年至少学习一门新语言，每季度阅读一本技术书籍。非常有道理，我今年学的是Rust，明年准备学Swift。其实学习语言无非是语法、库和框架这三者，如果掌握正确的方法一个月就能开始用它写点东西了，没什么必要纠结学那个的问题，开发者的基本素养之一就是整个职业生涯里面都得不断学习，除非我不认同某个语言的设计哲学和语法，比如我个人是不喜欢Java的。学的时候可以带着问题来学，比如A语言和B语言相比有什么优劣，设计上为什么不同、它们只能有很么互相借鉴的地方，为什么？等等.. 以后在工作中可以针对不同的项目特点选择合适的语言。我爱Python，但是只在正确的时候用它，而不是一棒子打死无论什么场景都用某语言，要记住，用语言或 者框架来划分技术其实很幼稚。\n插个题外话，可能有的读者会问「那怎么不见你写/回答Golang、Rust等方面的文章/问题呀」？因为不自信，不想误人子弟，也不想强答。「自信」是什么呢？就是使用它的时候不担心有什么解决不了的问题，「天下我有」的感觉，大不了看源码，我C学的不好，但是不影响我带着问题读CPython的源码，不过离贡献C代码就差的很远了，我现在也没想着走这一步，所以对C语言的掌握程度就这样了，精力和天赋有限，就要正确规划，10个浅尝辄止不如1个融会贯通。如果没有经过4-5年的深入和实践，我真的不觉得能在某个领域指手画脚。\n说到选择。如果你没有强烈的对语言的认可或者不认可，单纯为了尽快养家糊口，选Java，因为市场需求量大，应用广泛，成熟案例多。如果你很理解「人生苦短我用Python」这句话，答案就不言而喻了，不过无论是否选择Python吃饭，甚至你不是一个职业的开发者（比如产品经理），我还是再建议你应该也要学学Python。\n之前在知乎看到过大概这样一句话「只会Python找工作很难」，我是认可的。通过观察和了解，我身边的大部分除了Python都能使用其他技术完成工作，比如前端、IOS、安卓等。无论Python还是Java都只是编程语言，工作中还需要具备很多其他的能力，拿Web开发来说（这里不考虑软技能和需求分析、沟通协作等方面的事情），HTTP/TCP、Linux、数据库、Web服务器、第三方库和框架、Web基础（HTML/CSS/JS/ES6) 、消息队列、分布式、虚拟化、RPC、缓存、搜索引擎、微服务、上线流程、趁手的开发工具、调试流程、分布式文件系统、安全等等，随便一想就这么多内容。当然最难的和最有价值的是工作经验。只会编程语言算什么？你有什么竞争力，你给个有点悟性的本科生2个月时间工作起来不会差很多。一定不要放大编程语言对于找工作的重要性。\n另外插个话题。应届生找工作对语言的要求并没有那么重要，反而数据结构、算法、计算机系统、Linux、计算机网络甚至英语这些基础更重要。希望还没有毕业的同学能够抓紧时间多多充电。多看书多时实践多刷题，少上知乎。\n欢迎大家关注我的 微信公众号「Python之美」  \nhttp://\nopen.weixin.qq.com/qr/c\node/?username=python_cn\n- by 知乎同步小助手"},
{"title": "最全数据分析资料汇总（含python、爬虫、数据库、大数据、tableau、统计学等）", "description": "W3cschool Python3基础 Python最佳实践指南 Python 精要教程 Python进阶 中文版 中文 Python 笔记 莫烦python教程 The", "article": "一、Python基础\nPython简明教程（Python3）\n \nPython3.7.4官方中文文档\n \nPython标准库中文版\n廖雪峰 Python 3 中文教程\n \nPython 3.3 官方教程中文版\n \nPython3 Cookbook 中文版\n \n笨办法学 Python\n (\nPDF\n \nEPUB\n) \n《Think Python 2e》最新版中文\n \nPython 核心编程 第二版 中文\n \n菜鸟教程 Python3基础\n \nW3cschool Python3基础\n \nPython最佳实践指南\n \nPython 精要教程\n \nPython进阶 中文版\n \n中文 Python 笔记\n \n莫烦python教程\n \nThe Hitchhiker's Guide to Python\n \n草根学 Python\n \nPython从入门到精通教程 视频（600集）\n \nKaggle Python基础学习（英文）\n \n李笑来-自学是门手艺-python教程\n二、Python资源\nPython中文开发者社区\n \nPython 资源大全中文版\nPython-100天从新手到大师（github）\n \nGitHub上入门开发项目汇总（含Python）\n \nPython面试题-1\n \nPython面试题-2\n \nPython面试题-3\nAwesome Python Applications 酷炫Python小应用\n \nPython艺术二维码生成器\n \nPython有趣脚本集合\n \nPython数据结构和算法（英文）\n \nAwesome Python Applications\n \nPython常见算法刷题\n \nPython 第三方库whl文件下载\n三、Python爬虫\nawesome-spider 爬虫集合\n \npython模拟登陆&爬虫\n \nPython爬虫代理IP池(proxy pool)\n \nPython入门网络爬虫之精华版\n \nPython3网络爬虫实战\n \n有趣的Python爬虫和Python数据分析小项目\n \nPython入门爬虫\n \nRequests 英文文档\n \nRequests 中文文档\n \nScrapy 英文文档\n \nScrapy 中文文档\n \nPyspider 英文文档\n \nBeautifulSoup中文文档\n \nBeautifulSoup英文文档\n \nXpath教程\n \n四、Python可视化\nseaborn 英文文档\nseaborn 中文文档\n \nmatplotlib 英文文档\n \nmatplotlib 中文文档（官方）\nmatplotlib 中文文档\n （非官方）\npyecharts 中文文档（官方）\n \nplotly绘图官方教程 英文文档\n \nbokeh动态可视化教程 英文文档\n五、python数据分析\npandas 英文文档\n \npandas 中文文档（官方）\npandas 中文文档（非官方）\n \n利用python进行数据分析 第二版（中文）\n \nnumpy 英文文档\n \nnumpy中文文档（官方）\n \nnumpy 中文文档（非官方）\n \nnumpy 100 练习题\npython科学计算笔记（英文）\n \n数据科学速查表（英文）\n \npython data science handbook（python数据科学手册）\n \ndata science python notebook（数据科学python笔记）\n六、python机器学习\nAI Learning 机器学习实战 中文（GitHub 15000星）\n \ndata-science-ipython-notebooks\n \nKaggle 机器学习基础学习\n \n动手学深度学习\n \nscikit-learn 英文文档\nscikit-learn 中文文档\n \nxgboost 中文文档\n \npytorch中文网\n \nmachine learning mastery 博客（英文）\n \n机器学习笔记 英文\n \n面向机器学习的特征工程\n \nkeras英文文档\n \nkeras中文文档\n \nTensorFlow Examples\n \n面试-机器学习算法试题及讲解（中文）\n \n机器学习100天练习（英文）\n \n机器学习100天练习（中文）\n \n吴恩达-机器学习 视频（b站）\n机器学习算法基础 视频（b站）\n \n吴恩达-神经网络和深度学习 视频（b站）\n \n李飞飞-深度学习与计算机视觉 视频（b站）\n \nkaggle等数据比赛TOP解决方案集合\n七、数据库\n21分钟MySQL入门教程\n \nW3cschool SQL基础教程\n \n菜鸟教程 SQL基础\n \n易百教程 SQL基础\n廖雪峰SQL教程\n \nSQL在线手册\n \nSQL 在线速查手册\n \nPL/SQL教程\n \nPL/SQL中文教程\nOracle SQL Developer 入门\n \nMySQL 5.1参考中文手册\n \nSQL 手册（github ）\n \nOracle SQL 语言文档\n \nSQL reference英文\n \nMySQL索引背后的数据结构及算法原理\n \nPostgreSQL 9.5.3 中文文档\n \nNoSQL数据库笔谈\n \nThe Little MongoDB Book\n \nThe Little Redis Book\n \nApache Spark 设计与实现\n \nKaggle SQL学习（英文）\n八、Tableau\nTableau官方学习平台（含视频、文档）\n \nTableau社区\n \nTableau作品精选Viz\nTableau教程_w3cschool\n \nTableau教程- W3xue\n \nTableau中文手册\n \nTableau官网视频培训教材 英文版（b站）\n \nTableau官网视频培训教材 中文版（b站）\n \nTableau 14天入门训练营 （b站）\n \nTableau商业智能与可视化应用实战（b站）\n如何学习tableau？\n \nMakeOver Monday(Tablea作品集)\n \nTableau制作小案例\n（优阅达）\niconfont（图标库，可用于dash board制作）\n \n九、大数据\nspark 中文文档\n \nkafka 中文文档\n \nhbase 中文文档\n \nflink 中文文档\n \nHive 英文文档\n \nHive 中文教程\n \nSpark 编程指南简体中文版\n \nScala 英文文档\nScala 中文文档\n \nScala Tutorial 中文版\n \nScala 菜鸟教程\n \nScala w3cschool教程\n \n十、数理统计知识\n《\n麻省理工公开课-线性代数\n》\n《\n可汗学院公开课：线性代数\n》\n《\n同济大学公开课：线性代数\n》\n《\n山东大学MOOC-线性代数\n》\n《\n线性代数讲义 - 华东师范大学数学系\n》\n《\n线性代数-北京大学出版社\n》\n线性代数-维基百科\nMIT-18.06-线性代数-完整笔记\n两小时讲完线性代数\n《\n矩阵编码：线性代数在计算机科学中的应用\n》\n《\n线性代数应用\n-戴维森学院》\n《\n可汗学院公开课：统计学\n》\n《\n加利福尼亚大学伯克利分校公开课：统计学\n》\n《\n浙江大学公开课：概率论与数理统计\n》\n《\n可汗学院公开课：概率\n》\n《\n概率论与数理统计-重庆大学公开课\n》\n《\n概率论与数理统计-北京大学公开课\n》\n《概率论与数理统计》浙大版（第四版）\n《\n概率论与数理统计-中科大公开课\n》\n《\n商务与经济统计-北师大公开课\n》\n《\n哈佛大学\n统计学110讲稿》\n《\n概率论和统计学\n-Khan Academy》\n《\n麻省理工学院公开课：微积分重点\n》\n《\n清华大学微积分主讲-刘坤林\n》\n《\n微积分-浙江大学\n》\n《\n麻省理工学院公开课：多变量微积分\n》\n《\n可汗学院公开课：微积分预备\n》\n《\n麻省理工学院公开课：单变量微积分\n》\n《\nHACC公开课：微积分1\n》\n《\nHACC公开课：微积分II\n》\n《微积分—多元函数与重积分-清华大学》\n《\n数学分析讲义 - 南京大学数学系\n》\n《\n7天搞定微积分\n》\n《\n托马斯微积分\n》 \n十一、量化\nPython量化投资\n \n十一、数据集\nsklearn自带数据集\n \nkaggle数据集\n \nUCI数据集\n \n科赛网数据集\n \n最近做了一个Live，利益相关，宣传一波哈哈\n如果你对python技术书有选择困难症，下面这个回答可以帮到你：\n入门python有什么好的书籍推荐？\n此资源持续更新~~欢迎点赞收藏关注！"}
]